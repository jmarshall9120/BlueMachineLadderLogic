// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC DM-SIM

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
dd2cac21b21b6b52a0ba67c6b4e60fc0beb74974d7f6740771bcc2cfe99ab64803e41cd01ba47f2b
490a38df8f33739c54e302ac8ad4c1941c015d047f3f48b01284d6e44fc5bb5938f5aedb3824ce88
1c9b62e984d68cc07a3972e928215e16c80b2f4d6868167a6d6e80019d05c2385b0f1ab188c04c89
28abfc08621d53ff5db9e11b69ac631ac631b81a7416a0054bd0a975a1ecfbad4413032ace145e58
442c4196c8cbf27d00d635cdcb479b58e676bcef2ecb6d6e3ef3b26a3b8242fe9d83ac2062d6241b
be16b2a7128ab1c00b88960052fea20fb6c0f70b7aa9a1fbe2aa71947a9c3ad44e8a3af2d0c6456d
d01088467a230aeb9e4ed6fa4dbbd37737ca4d43c2b1c44b70681e50ec632da3d45babd0c45ecded
1adf48f1f2dd0f49755bb9b5a8f065a7fc6515b59d7672a3d0854ac1c5af87656523cf8037465dc8
6cd8029604c24b29534d52ea2991ecea5ba8970b7a8f43fdfa15bf23b11dac133b81ee8f11f22da2
027389e2959b68e82d8bd950104f924a9987684eeb37b395dcd2529b5125a16bf4787157d0fe1a89
c29a39261f87ecedf42f295f36d6b620423eab2857a8132d3bdf8b25c72a1f225d735b4595b8f495
87b3bc837d700ddd790dc3a6fa57c405194d9a65ae480f66f09332a2e547c18722d831cd70be6af3
5e7b295bdec54a21a36aa3e922f1b767ea0200be704ee168e6761bfb406b587847795ddb101d6951
b3b304de7bb63d4d35f0c8707baefc88c0e467865d5ab9272823f3cb1dd2d24f3d14a193f4abafd5
f9f878a887795386b998d61e9d0737195770c623f63eb4e653f5162ebb520f941727993f2d95b3c8
f178065039362f73ab61656e03667f2fd9af69562aed894f21deb4bf248cd2b132df0eba08c33aa6
3b4be68a4aca901d0e77082865f9f884ca03547af0f55495e3dab5caf475c92b69642dbcae438abb
3c1090788885e3269afea20df0b78cb72e6fc30872778a29df9a20295a0d4bf9b740e84841b970d1
8eec99151d79cd3e170dfec83a9e53367e80770b1b9eeff87fa363080fdafe9eb77cc40241215b8e
9aff6cf3c7b072ad79fbec29b3d66a2494050386fa00d5c2987326acd1f9e10c9e28bd57108330d8
279d049210c23166891b6e1e3dfaadcef678c77bba32f85146d6b03694d5a7b5554edc472f131b55
82c7e7fc339923ab4b6730a0ea50447d6f78972d66561f1b913131f7555bd96674e4b9528106c5bb
9028bdb2275bc0f25ef1b20e03be9fe4f140c8558bc6935787dd4d57498047f201ceeb030130eccf
03b0d07c1873aa5292c22f4f877ad5ce02b6dc948f97ffb0d4b82dae4c1e395088ef529f53c2d482
1717dec18ba0e45a20d840899a9646249c48cb5ce594243f4d69af0162922fa8c58d07a2a6a485c7
21a7f9b66cbdae93eb027c0396f5349819e5689d03aea935e18bfa608b0e04cb3b450a5bcb5532c6
9f968a0fb253cbe78c5af24688213aaf41de6a5b1781222e697784cdbcc37d37f6f192f5812cb550
8e982efbd89a30dc241d645a091d5b26c4758eef24423414d97b8ebc844d60b040b1cff78fb7c5c2
03d06b865892758b471d64f58e52d1cbd8ae555e1f11ae224985b0863806acd69eab026a95c395cf
dcb323e937705e19be40f411eec2d0d493249d41b61b44cf5a7e31c8a81760ea192f9b4c9f9dc874
af77f7b35f763c2bbd8c7571cfcc0e79c7f5e988117815855ebe61c3954d3c79f6df20aba34daac7
e3df4e4ee6ae03ba789b01d57c56a87042a1008374193d0110117954590172e65b60288095e0d736
9714e38eaa964f985abcae88e8bba49d7fccedf1521e3fe8c1638da6f4f92002638bee92ca80f69f
1c3e25e6633ab78f4e17d9cc3697fdf34607baa9892ef98ea42d6949b6f74989f6e7845a8147c9b3
44ab3f8410a925deb0e16fce93e00470ec38862cef2dd9d337755adfe62f9a8a15b15f72bdd724f3
815cbb5306ef608348c4a493ed10b607e8c4cb894d2d6c71405ce5ddddba559d8dac8dc2c2971022
839d2a42a13ab0b7df740dbdf934489e549e88b9688503169bf67bcb95b7d7463ae48b92c814f4a1
e0bc4208b2cf4e354235abe76129bb93eadd2b0e31692c582cbc4186ace1293cac5f4aa9a84d1830
cdfae6975faf8d574b79f5ed4e9e28707efd8b10da0242a9dcad4752ad01527df841c8837c82162d
8533a41e798932e8f81abdcb10ca23f3d726e4241f35aff3123dbc5949ca0c33ea714a520d33ee62
134d44abc1aaa320f37bde0a179cb0f69806665e52534eb9630f89e25e28205a3fe4eef12080d976
f6cf41be9f0c5b9b9a20537acc0ee7a6aa9d1fd9749c75089acedaedae3c51f464f15edc399f28ac
197921dddd330e6a8bf421ede2c38b817e3ba6a56d4fb1c694adfc7d4311fcc6a75ae886d1332532
545da7254e4a444b8f6a8960a9d69c92c626880555162b16e9600dde584d47ef76dae0c990a1a74e
91a6cd6be472919103ba70037ed095c0515f40710b9e5cc136fffa55be676dee145bc34026d2c995
74e7e8015074633ebc004ff5e23961879183aa39668e3d508bd7fb4a1165c5344d981b14fd3229a3
1b6910588d0dfa7e5e4dd5bb85b7b2352fc109dae6157da5308714b808190ecc2d23ed2ab5c860b4
342f97470f36aea0525016a15b273890b6f965fed3664be4d48cd716d3ce36060c7cf06dca0551a3
5ea8d31df1e2cabc1ae99533783a681c86261f26c328f4210627a4f974c98971ff4b60a57e5da22c
d20d555fc1b9717d64990dcb7fde39c82bad7bb5370f5e46bb9d48211ae362adeddfa63efab4338e
407c6e65346a61a237d6f34e7992b22315b1c8562b6acef0096955ead416c1439a41cdd6b9655ab3
dcbef40bb43fc6fda7ecbee3954f172f76470a8ec8608ffeeee6176106258554cbc409f59d95d45f
9a35ad41ac0fb42c0bf59f4d18e45c953633627041499c6a5e2202e43a9dd1acebdbe3f52702a18c
1d1d30b2691323a865732f816f3e5099f52a74381e5265af94172d5c04c4a4ad693df81665a6d09b
f4e96defe417be8b1b4a3599004f5b103e8f5b5fe23df0fa095a1bedbe0b297ad18f3f659f7a2733
7a3f7442bdd50404b5caf8644ff5617f3373883f0873b3d0851cb0b5743102b9756592a651334aa2
5da5baeb41a33dfb8b354a6c4b096ec2fc6b4fae63eb3013005b8266632ba12215238c8a4510b70e
3524cecd724a9886220993c7973791f775071f03f4e996922f869ef2db5953f1dc9863042404c340
93494232808a2ec8129bb6f9b61e66653c11a8c3514e4ec74d68f5ab1b41ff40cc1c7b2449eab29b
1e96023e23edf60e36bed56d48625e2dc6e910f5fdcda45f657d7329a12c99b819df731823791976
10f603a2f13301ad48375dc760c4a9aa152dbf4888f2991f40e5f4699eb2ac2cd29fc033a1e83f6b
5f8713d3be9d20a06084baec6777291f56897ddf860f8cc335bf7407a53f3acabaad4a35ae6c6816
d8ce1d7d608d0123fcdc4f90f7fd5cd125b182d5b6689ca6fffad0350c0b033df9e586b958bb4c79
88b066e24244ed86356821b98d3bfb452efb087404668655530ce9c4af3d28cfb02b511598574192
f2ee438b8e3e12ca65f99105b941540a6083b63178f1126e1e7ceb5084717e201c5e75c52fefa194
76b96f78af05daf0b89d6596b89cfe6248cf9b97a56395e04438484f7882a27d3dac3e8471578858
6f0d9fb3ab0187bb2f936b0e509c808a995108b59f7a43e46c9496a67f0df90f9212b0e6d122c486
8c0bd88fde533e5150fe15c84c888a638db0f0afd2073692ee5ef8444df3aecb6ff30ef8aa0c8d8b
2831db5949dd6199c7c5a74471f69071cab6c6a47cafbdb7874d4cde0bed92094b4f410a44b3954a
994ec6abc4c56a21d5eb25d699018c90aa482e7b0f8cf3f414f35d02e7ca01933a2020939277f13e
e8ff48e20d276f4aeac9190f904c2b9db68d1e53a0abeff2cfe40138472c4e4474bedf4d400edb8f
5cb975b9af7c6cf6dd8f520a189fee2dd86621ab575ecdd1f8f544e3760a36e807b7faa5d88dbfbb
a3fadb4fc8124142febdc38690f22dcd79943c174e6a1339772fecc591c0b540d11da818f449683d
394f65eab317c275f1851d6c7926e935cce03b56eebb3d2d4bea13ffee18faff31c9f5db6fd3c563
07e5a279c7dba76423ed38d0b01d288ad9d34116053db2dd4eb14d0c688201d463375e61c25926c9
693ffef40cc79881c1738252108140c7c119c00924d826614dc18170861e2ad314c724507e1633a4
db57e2d7784e280f6b79460dc46b023cf6e5a8bd10f7e2653cb5281bab0f038a72ba2211bf79bb82
657acde9319e0200787b173f10cd5cfc219820afe2050a73441941620b886eb4dc3741eb25a7e269
da3191d35f4f04b0605e1099d7d92d4e6bbe6eb1e3f470a7d0a32a917ddf4e0d02510e2d80243ddd
7961c6f804219c8464f0f64e10c7486ddf600df1ff41d783b2f2ea4db0ab13c0ee090155d6899ed2
e90f3617c5d5f9b63ac6bdd29b4b893a7cbc19ba9b4c5f7dae1c81a18720c030309a3c7e4c322371
e1ecb90194918eb6563fcf1ac37dbe73c1357881efd459c446b45cb6f3d777d4867793852a74ed6d
41b25574f96c9c19544bc271d68d5a4ac76b45e6d3d94a61db6bc7ac327acbf3c72fc7919e9ac56e
1e753173d4622ad14a36971a8b4a504789f76f9cbca718e21b3235d6e1af85d6aba8b2b677113d93
5cf03230f6950c263c63dde24812c68af20bf237f6c023a5c75fca2509566881abcbe9377eecf7cf
caac064f6e78fe838c41dce131d5ef7b6d36bede533269a53c1fcec426f8574646e4a0aac5badffd
da131e377046a554878db7d313a6e452655d8f6df0f819d0d5ba6b3b0fad39f4b0d414a1cb832f1d
55aea550a33243b891c8366904804d77c29c9a257a8a293137a9e54dca9bb135a34e7dfb5899c7ae
4bab7695bbf7ffa5fd29dead8777f62e815298fde8cf9a3fc6581e4adea6a33f067d39c9859580bf
462dabd735ad1c34c7af4f9d7db2a58a794c54bea18b5d29f435d0104ad21526ae19d524452d14de
05f13d7ac2a51f848106ceccfdc7919906fa7ad4e0077df18b3d93e409ceb635428155cc57f068d1
4564628f90def38164589eb2e2d12005dbed4ff08946c43d607b936dfd1c13d29b6ae48f74c4b059
893db14d0eb145d2126ab2dd252e94dc6926cc40df8c9f5f941d734788150f141bbd1851d9f6f3f1
5c5c28149817b88f97203bfa8dede7cf1452447d1e2cafdd471b8320a6526c4627d2deba93669a93
d4e7f1d41c9c94cc013ff71e39631ae0fc091bfd44c4cef1ecae3bd4310268c48dc7aa39b10533fe
ea234a530d1c4c47225f71cb5d5757a98da72eddf4d71cfd6bc3362fdbae054efbf7b0bc774002e7
917e4a214f97522d4dfce8e9db50b2b76350d75ba660f158294afd540b81f474c1b6102bc02f7417
931d5400db23352ae000a60a7536a89a939d233894472fae254b99550a3b8f3feed790350fe6847f
12a5be751726a8ed3c4f45a3b01a9d4d2313578e5dbb65a84cba555b21333acf33bf23b61853173a
de999082a85fc2985ce3c33448987d64280ad952c138433a3cef363e11ad31704f5ab61250f5fd52
c51d1db6706f8fd7c5025577da298514d2628dc23c38fd5768de6e7c183210947986cd76560df85b
aae393c549f4d635de5dc24caab54c01689f883e31c310237dc4d56e01c14ad6b3338c734fa3080e
03967e182b71d24ff1f6944a216ad5313841d770c2c3408e4b587b4bc80fcbc150048dacfe136703
2684e54a42062ef7c3929a9e6c6cee40a2197f4e760351d9ae5e07c1c1bcdd3b29c55589cfe89e16
43931b120a114ca17144ff58e0981c141830d489023d51c1fd85c41f4587e0073c6d75fcd69621e8
622b7a20d4ed2e2ec7fb4231a0f8f43ffa1437b97a360ce503805abda774ca3c2f4d4e47ca0f6a1e
307e000b78d93ffb43ac01f9ed3985a815b43e082b4bf2478a78907c10b124e02e69e80163b30e02
afe1b3bc96a7c019f6466dbb06081223ebb39a81611bef8959f8c2b7fb372e14881ea13963065ccd
8990ca30fd75a91d874c95695128e7fb88eacbb5afee0126a7cc1abe9b011815e1aa8f913661004e
05334c8f87c3e6ec1bdc6e166ab1160bcd152cefdc6eff401b960e8a0aa631201664944ba1e9c556
0bb4d884332d2edb6fe7bd0f5c427735b87b821e01bbdbfc9bae8a2066f1a6db46e19219d12a6a9b
1ff65cc9df4b204adc9959f61ad8f5b86dc4e4f0801628dbfa866f867b9f7432d3dac2f4b941c14d
a4137b67ee93cb2bfd735afac45607259cb669d34c8fcccc8c7d39d9712e0692f9e3f6ae8d9378eb
946b875e229dc0fbf00ba76fe544bc72aab6699f9c557ff379b2f15741bdd0d939f380a3a7ee7302
53a77a4b48ba6aa66c0ca69da1bf2d1dc6bbda000c469151229dd6aa3a10f1ddc8ccc714158af611
8c044e8f2dbb69ee64e0c851aa5909e95d886f33ad6ae50cbdfd8ae51bd97f673a942b12d83d460b
3520280dec6229e80a6af81fa81864a32068d56315ac198096e32b56acec1d49b24b3ad33a873728
1ef8dff559bf8d39483071026c932e7fa6862f300a89525801f0bb91cfede07e612acd947e1895e2
af5cfc7798fa15497bd3564c8774a0f8c35ca905f4a1f0686056596335748aef633ccfcf507a6562
9b9dc0d3f5d2e7d51894ef7be2d9daf2d619e5c753d9eb406e6760eab2b491be13ff3d36b3a5eb87
95e102b71a949c86a1cdc939619a718021b87f8ec40f93d6062964fef1ddc4a4d048f98fcf414da3
f1a02be7c46aaf6e19eabdcc8648e23d9b67a8afcca624ccf3fd86993cdd6646ab3633d6c71be711
a6a7374d3731e2acc293b09c6bf26b6ce92caa78ee30ef5c61ed7f46f62ddd95bff4db591625e9c9
a4b8d0d88d86ce1fe0b729bff93e73d6975c3562b02d9f1581a2ebca4f9aa3964e06d3d774215e00
bd40c120c96e9f644806c2de3507e5f921f7e286d906da88119df4177a3ad35094cc33fec47e5d83
11c45e8851e2d254e20e8c7abe8c48d52956953f89d8d4b385d92c5f0105926de86a2057be09c7a4
e813e0fe9dc818f0e5255692f01a78cf8e797caf875ca769a186cc6a2f095439b90af9cc9faf69e7
e3a80fbae8c451dfbc06ca406cd1e6275a5878c25144730ffe963db7d805f6bac4205af2e9b41f2f
4ff785831824f1817ae11050c5a8656105982e394e77c1be5ef422db382cd6c3ddb33f0c5451881d
b7705a693abb1a8ecb12a3c7fa88f831a6c58216d7135baa6f2757a2e1a5f4d0557e23d117214bcb
5325ecf0e1b9f0e85f23f0db1211eb3b9dfe7e1ed15e61083cb468cb7c80f167a79ee4fcc4a945be
3037f40ca98312e7c03e68a0e1c366687b23c54c02e044bf120613f5267dee6bbccd9fe7b63c7b52
1289b6ac7572d7e66b4f5ce130de06606bf8164c8c033acb040fb33483a59e4c1a734b94732fe96e
acb9da65c4c9b64432c9c90f01a7c04472164924532e1592ee51946d5552f8bd8bd5ef1c532a9a6e
574e114dcd64b6af4f1c0a3f488fded89975ed611dadadc2a70d8f7c2d154f536b85f955098920f2
eb0b584c790ec9989edf73a24444aed8a1479423bb921cc19a12641dc55f9a4781586815d59ceddd
887be5338a867c8b7d39e53a5158042edbb6893e4631b353ed4404740d6ae4008642a27b061e1f06
2561132050baa0e9c4b7008d6f40bf62e2480b757f28c63158b70f940dd1ecc2954579dc001d0503
4bf64269962de232ddd8dc948fbfb9b268784d6af1f2a78aa5329c2a4b4f59346729e354264df5d7
15c91f79b79bd203a783bde5376062c24cb71cd8414fbf55d6780f79739bf78f735c5291d9b2e54a
4cc849183ae0acbda5a4dfae202b52676f17208b04e73e6abb87ad7d4670a625a65512208281484b
6c1a7a2057f6c0b30384a0e904a1ddc73aafa26c3b8cab9acaa74f932107ca2b4a41fa411c5c3800
453f5e4c60754e57974c6908df875c1e50dd1fc76465a6c07790d40332147fabf89b01c6c2e6146b
8addb5c70a54830c78858acd8e5fb0445ff44348038e8192ea13e05c1c4fd664cd6f34383c20249b
60f9a5d85d4f7a776871d61215a10f9e96a544be1381576ab54bb4c6b9cb7bc8431f94745ed6f013
d0b64fee8f03275676334d858df3b6c086365418e1cce5a03c47c29e4db72dab640a381b0a519607
3a806f982192422bab1e41c3607d3f14c749c24639bdbca0a5260812ccec1124f76e41af8233e600
438b6315766c5547ffd7b73af4ccbc4df8e0e191ec434dfaadecedbe2fc6b690ca9380df3eac5fa9
64ac301140c884909bfde9495d181190a278de4dfd6c3fb67e9486b2057ed544bfe23e9a3d2153c5
b46ff0353acf091ac4802edcdd7c25c7bf709610b8e70674c389ede3f104d184286561584d8fcb05
6f6a84a16ecdd2db254b66430fca2a676f67f71262696d66fe9b6cb12dcbb57cb36d82f7f2137316
695c7eb223ebfcb34973f6ec120ff1be521506fc9028a4036d0ac3e372c3af33b09d99d5502ebb15
a6d94b78e942441f2b867713562ab2737ef9b18c34168b37ebcbdcb27fefa4349d00f1ad63f376d0
f7bbdc49a7a9387643fc510ccbdf2dd0a76c3150660a42e1c8c3ef5f7c1f4f6953d49fde169ce61b
3243b609364fa98f3d5bf110c2ad01c92badc3c5c202806d184e9be8c2020acc4a207ea879d3cf3e
2ad5b9c14225d772eec965603db0d5592135545caa412f275b5dbd3ee43ed8507eb2b3e2b36e56bb
616f49f31337df20c1df68c17e610c175ab970f97bc7d70bff67338a17c9fb21d58a65989e117421
9e777ef2c977b369ef2bcec20b4daac3784e04e6cf23db25768dfb631b1e207421019f7dc0f183dc
5f6d285030ffc2b337aa6f764c5498cbdcfdb353b2fc7888a36707ff106f012bd97c8d09c4e6798c
5f087d18c51609583af0bad3eae2fd3ca37a2fbc46c3b6ef14ce5a9542e927b2b258f0ccbc957f1b
36c79df6caabff7429e6daae2c87101a5bdb39d80c4083d87eacea8df47385f3f53d28c1d25b0008
87e46483e5e4074b450fc19110e532d4b76467bcc376adc72744a012693ea1817fda1ef5d0106186
99e57270c4a965c7abb24e3dfb08fef835ac85462ebf8d943cece48b72c03abe4596aa1a9adf8310
9691983af828089f7b623a992828f76f4d176aff54d44a67ee3b593fe950c265ebe212d6b7ee40a6
e200aef8d07dd0eacdd751368d4c26990f68c7f2b2dd70eb25c1385e3702cd13538e602bfcc4f0c1
566dbe9526ab3dfe91587f4ed9b7a5c185afdd375f5bbb8f2c5c9439acbaa362e9feb21c1779923c
3891d63964e54b185c0e23f2778fa0810bf71f5a1648a9ba267facde5c5d9f404f8cb42524a1a191
5f57ceeac9b97e1ca64e7f4e724d18d3cafaf1ea93aa0dbb1dad3a6b4c3cdad8bfe5987ed6019d35
f8fdadf53a70ccc042af040f7efcc079f62407a73a7755f4e46d0578f43f8ff97ac3d8c422f9091b
9061fd49261098da905c2fe82ad110dbb3e624c7f389a5952aa52eb4ed456f7025391d99d79eb1d0
0da28a77c512b3716abace7be6e24d4be90a9fcd5c9520f897ac16e15e9c3797a26c865020351e9a
f75daa8d4847b28c0fdb87ee44e7ee2c71201c94bd3552f9e6dec7bddaa06fa94d8ea5dadf26b3f9
916b1dae79008a88fd84c4723c4ace2b370dec1fec4338d7544a7df7b2b0456a481f88d5d0a51fa4
ea8e1c10c09a189573631002326e4027aeec46d4d14326416e185e81571b773a9a9a2179c90838bd
3904b35456832d805603e8ffb4b631118fdc8aa9cedaf3c1ac1b8bf987734be657ca87a7d1e16882
bbfe70bf9a57cae29bcfec84ed9901bed2782b3b25357bfd33f346f9c7f1fcb5460f3bc0d2ed728f
d4f3d916721da2e567fdc73d23dd56ce76dce134e0a2b33ece20ac973a2d6968d869ddc1634ba992
f5ec8ab082b1259fc78729d551284fe80352fcd4302b1561b28a078cdcb5b60cd6d2d045b8f0247c
82217bc18b065bfb38faa2dc3d9c9a3636781be2142a9ec7800d5b85629500531cb64f0721e5a047
1b898d9d65e4b09e28a748694204f6669043f2018cd5c93a2fde86c2940395301a56bb448798ab41
aa967ad3d5df29ef699e093430cbce04eff83b1c77cbf453c4f083f1305e22c231d65f4522289fc7
eb911c6fde98e5759888315f8518d294074bac86048d3f8935baf276c59e8304824c0be214235402
ab84e716fae6f687aef9359397b720689118599d73f81624a41aed549dfd2e46603b5c6daa2e522e
c6e784b841b00252c507da8384904d310faced03f77b2aa1d23ec908bafa1656ca933810e7b39eed
03f99b64e5e184766cfd57
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
	@IntProcSim, 11, 26
	@SDCardFS, 25, 1
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Stacker	PROGRAM		0	-1
	StkerStartUp	TASK		0	-1
	StkerFaultCheck	TASK		0	-1
	StkerCycle	TASK		0	-1
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	Y59
RST	Y58
RST	Y57
RST	Y56
RST	Y54

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	Y59
SET	Y58
RST	Y57
RST	Y56
RST	Y54

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	Y59
SET	Y58
SET	Y57
RST	Y56
RST	Y54

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	Y59
SET	Y58
SET	Y57
SET	Y56
RST	Y54

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	Y59
RST	Y58
RST	Y57
SET	Y56
SET	Y54

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X19
ANDN	X20
AND	X22
ANDN	X21
AND	X26
ANDN	X28
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
ANDN	C308
AND	C309
ANDN	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STRN	C305
AND	C306
ANDN	C307
AND	C308
AND	C309
ANDN	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
AND	C308
ANDN	C309
AND	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X19
RST	X20
SET	X22
RST	X21
SET	X26
RST	X28

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X19
SET	X20
SET	X22
RST	X21
SET	X26
RST	X28

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X19
SET	X20
SET	X22
RST	X21
SET	X26
RST	X28

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
RST	X19
SET	X20
RST	X22
SET	X21
SET	X26
RST	X28

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X19
RST	X20
RST	X22
SET	X21
RST	X26
SET	X28

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X19
SET	X20
SET	X22
SET	X21
SET	X26
SET	X28

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
RUN	Stacker
NOT
SUSPEND	Stacker

// Rung $Main#2
// Offset 5
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#3
// Offset 14
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// Rung $Main#4
// Offset 22
NOP

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stacker
$PRGRM	Stacker

// Rung Stacker#1
// Offset 0
#BEGIN FMT_COMMENT 
"///////////////////////////////////////////////////<br>"
"// Globals<br>///////////////////////////////////////////////////"
#END

STR	ST1
OUT	C40

// Rung Stacker#2
// Offset 2
STR	ST1
OUT	C41

// Rung Stacker#3
// Offset 4
STR	ST1
OUT	C42

// Rung Stacker#4
// Offset 6
STR	ST1
OUT	C43

// Rung Stacker#5
// Offset 8
STR	ST1
OUT	C44

// Rung Stacker#6
// Offset 10
STR	C45
ENTASK	StkerFaultCheck	0x0	0	0x1
NOT
ANDPDPF
SUSPEND	StkerFaultCheck

// Rung Stacker#7
// Offset 18
STR	C46
ENTASK	StkerStartUp	0x0	0	0x1
NOT
SUSPEND	StkerStartUp

// Rung Stacker#8
// Offset 25
STR	C47
ENTASK	StkerCycle	0x0	0	0x1
NOT
SUSPEND	StkerCycle

// End of Code Block Stacker
$PGMEND	Stacker

// Beginning of Code Block StkerFaultCheck
$TSK	StkerFaultCheck

// Rung StkerFaultCheck#1
// Offset 0
#BEGIN FMT_COMMENT 
"Pre-run check<br>  "
#END

STR	X2
AND	X33
OUT	C0

// Rung StkerFaultCheck#2
// Offset 3
#BEGIN FMT_COMMENT 
"EnergizeStackerJamLight<br>    * Air pressure dips<br>"
"    * Guard door opens"
#END

STRN	C0
ORN	X3
OUT	Y1049

// Rung StkerFaultCheck#3
// Offset 6
#BEGIN FMT_COMMENT 
"Stacker Shutoff Grace Period<br>  - True when:<br>"
"    * Machine is running<br>"
"    * 6s after machin has stopped<br> "
#END

STR	X17
OFFDTMR	T0	6000	C1

// Rung StkerFaultCheck#4
// Offset 10
#BEGIN FMT_COMMENT 
"PassAllChecks<br>    - Air working<br>    - Door closed<br>"
"    - Within grace period<br> "
#END

STR	X3
AND	C0
AND	C1
OUT	C2

// Rung StkerFaultCheck#5
// Offset 14
#BEGIN FMT_COMMENT 
"Jam Timer Detect<br>"
"    - Detects dip in max air pressure<br>      * If air "
"stays at max all th etime it's not being exhausted.<br>"
"         Thus the stacker is jamed."
#END

STR	X3
OFFDTMR	T1	3000	C8

// Rung StkerFaultCheck#6
// Offset 18
#BEGIN FMT_COMMENT 
"Check if jams are detectable:<br>"
"    if: <br>        * In grace period<br>"
"    else if not in grace period<br>"
"        * Not reset pressed<br>        * Not Air has been "
"on for %3E than 3 sec<br>        * Air pressure on<br>"
"    then:<br>        * True"
#END

STRN	X9
ANDN	C8
AND	C0
OR	C1
OUT	C3

// End of Code Block StkerFaultCheck
$TSKEND	StkerFaultCheck

// Beginning of Code Block StkerStartUp
$TSK	StkerStartUp

// Rung StkerStartUp#1
// Offset 0
#BEGIN FMT_COMMENT 
"GraduallyBringUpAirPressure<br>"
"    %3E Holds air valve open till fault occurs.<br>"
"    - All faults ok references<br>"
"        * Guard door is closed<br>        * Air is on<br>"
"    - Air pressure OK refrences<br>"
"        * Air has not stayed at max for more than 3 sec.<br>"
"    - Press button will clear any fault exept:<br>"
"        * Guard door is closed<br>        * Air is on"
#END

STR	Y53
AND	X3
ANDN	C7
OR	X9
AND	C0
OUT	Y53

// Rung StkerStartUp#2
// Offset 6
#BEGIN FMT_COMMENT 
"TurnOnFullAir<br>"
"    # If air is up to pressure, open full air.<br>    - "
"Redundent fault checks.  Could not possibly have changed "
"state <br>"
"      since the last time they were set. <br>        * Air "
"pressure OK<br>        * All faults OK<br>"
"    - Valid Inputs<br>        * Gradual Start Valve"
#END

STR	X3
AND	Y53
AND	C0
OUT	Y61
OUT	Y62

// End of Code Block StkerStartUp
$TSKEND	StkerStartUp

// Beginning of Code Block StkerCycle
$TSK	StkerCycle

// Rung StkerCycle#1
// Offset 0
NOP

// Rung StkerCycle#2
// Offset 1
#BEGIN FMT_COMMENT 
"1. EnergizeVerticalBar<br>"
"/////////////////////////////////////////////////////////////<br>    "
"# Hold itself up till Eject out is tripped.<br>"
"    - Air Presso OK redundant check"
#END

STR	X19
OR	Y59
AND	X3
ANDN	X20
OUT	Y59

// Rung StkerCycle#3
// Offset 6
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>2. Stripper return<br>"
"/////////////////////////////////////////////////////////////////////////<br> "
""
#END

STR	C2
AND	Y58
ANDN	Y59
ANDN	X19
TMR	T20	500

// Rung StkerCycle#4
// Offset 12
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>3. Ejection Arm<br>"
"/////////////////////////////////////////////////////////////////////////<br>    "
"# Latch Start OS is the eye that reads one revolution of "
"the <br>"
"       gear which attaches the stacker to the main drive. <br>"
"    - This is the prime mover that triggers the whole "
"cycle<br> "
#END

STR	C2
ANDPD	X18
OR	Y58
AND	T20.Done
OUT	Y58

// Rung StkerCycle#5
// Offset 18
STR	X19
TMR	T21	65

// Rung StkerCycle#6
// Offset 21
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>4. "
"Compression<br>/////////////////////////////////////////////////////////////////////////"
#END

STRPD	T21.Done
OR	Y57
ANDN	T22.Done
OUT	Y57
TMR	T22	0

// Rung StkerCycle#7
// Offset 28
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>5. "
"Transfer<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	Y57
TMR	T23	9000

// Rung StkerCycle#8
// Offset 31
STRPD	T23.Done
OR	T24.Timing
TMR	T24	1000

// Rung StkerCycle#9
// Offset 36
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>6. "
"Load<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	T24.Timing
OUT	Y56

// Rung StkerCycle#10
// Offset 38
STR	C42
OR	Y54
OUT	C20

// Rung StkerCycle#11
// Offset 41
STR	C43
AND	C20
ANDPDPF
OR	C21
AND	C40
AND	C0
AND	C22
OUT	C21

// Rung StkerCycle#12
// Offset 49
STRN	X27
ANDN	C41
ORN	C44
AND	C20
OUT	C22

// Rung StkerCycle#13
// Offset 54
STR	C21
AND	C20
ANDN	C22
OUT	Y54

// Rung StkerCycle#14
// Offset 58
#BEGIN FMT_COMMENT 
""
"/////////////////////////////////////////////////////////////////////////<br>"
" <br> <br>/////////////////////////////////////////////////////////////////////////"
#END

STR	C42
PD	C4

// Rung StkerCycle#15
// Offset 61
STR	Y56
OR	C5
ANDN	C43
AND	C3
ANDN	C4
OUT	C5
TMR	T2	1000

// Rung StkerCycle#16
// Offset 69
STRN	Y56
OR	C6
ANDN	X22
AND	C3
OUT	C6
TMR	T3	2000

// Rung StkerCycle#17
// Offset 76
STR	Y54
AND	C22
AND	C3
TMR	T4	2000

// Rung StkerCycle#18
// Offset 81
STRN	Y54
ANDN	X26
AND	C3
TMR	T5	1000

// Rung StkerCycle#19
// Offset 86
STR	T2.Done
OR	T3.Done
STR	T5.Done
ANDN	X29
ORSTR
STR	T4.Done
ANDN	X29
ORSTR
OUT	C7

// Rung StkerCycle#20
// Offset 95
STR	C7
OR	Y51
ANDN	X9
OUT	Y51

// Rung StkerCycle#21
// Offset 99
STR	T5.Done
OUT	Y68

// Rung StkerCycle#22
// Offset 101
STR	T4.Done
OUT	Y67

// Rung StkerCycle#23
// Offset 103
STR	T3.Done
OUT	Y66

// Rung StkerCycle#24
// Offset 105
STR	T2.Done
OUT	Y65

// Rung StkerCycle#25
// Offset 107
NOP

// End of Code Block StkerCycle
$TSKEND	StkerCycle

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X19
ONDTMR	T6	500	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X20
ONDTMR	T7	500	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X22
ONDTMR	T8	500	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X21
ONDTMR	T9	500	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X26
ONDTMR	T10	500	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X28
ONDTMR	T11	500	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X17
OFFDTMR	T102	6000	C319

// Rung NewStker#4
// Offset 10
STR	X9
TIMEDOUT	500	C9	0x1

// Rung NewStker#5
// Offset 15
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STRN	X33
ORN	X2
ORN	X3
STR	Y49
ANDN	C9
ORSTR
OUT	C303
OUT	Y49

// Rung NewStker#6
// Offset 23
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y51

// Rung NewStker#7
// Offset 27
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#8
// Offset 34
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y62

// Rung NewStker#9
// Offset 46
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#10
// Offset 54
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#11
// Offset 60
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// Rung NewStker#12
// Offset 68
NOP

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X18
SET	C355
RSTR	C320	C322

// Rung stkr_CycleState#3
// Offset 33
STRE	D5	0
SET	C314

// Rung stkr_CycleState#4
// Offset 38
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X18
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#5
// Offset 57
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"2000"
MATH	D1	"3000"

// Rung stkr_CycleState#6
// Offset 205
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#7
// Offset 220
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#8
// Offset 227
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#9
// Offset 234
STR	C317
AND	T101.Done
SET	C376

// Rung stkr_CycleState#10
// Offset 237
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#11
// Offset 240
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// Rung stkr_CycleState#12
// Offset 247
NOP

// Rung stkr_CycleState#13
// Offset 248
NOP

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X2
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X2
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y59
ANDN	Y58
ANDN	Y57
ANDN	Y56
ANDN	Y54
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y59
AND	Y58
ANDN	Y57
ANDN	Y56
ANDN	Y54
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y59
AND	Y58
AND	Y57
ANDN	Y56
ANDN	Y54
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y59
AND	Y58
AND	Y57
AND	Y56
ANDN	Y54
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y59
ANDN	Y58
ANDN	Y57
AND	Y56
AND	Y54
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
TMR	T201	2000
AND	T201.Done
SET	C406

// Rung TestNewStker#29
// Offset 420
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 424
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 446
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X9

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X2
SET	X33
SET	X3
SET	X9
OUT	C407
SET	X17

// Rung mock_stkrStart#3
// Offset 10
NOP

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X18
POPBOOL
ANDN	C420
RST	X18

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y59
ANDN	Y58
ANDN	Y57
ANDN	Y56
ANDN	Y54
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y59
AND	Y58
ANDN	Y57
ANDN	Y56
ANDN	Y54
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y59
AND	Y58
AND	Y57
ANDN	Y56
ANDN	Y54
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y59
AND	Y58
AND	Y57
AND	Y56
ANDN	Y54
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y59
ANDN	Y58
ANDN	Y57
AND	Y56
AND	Y54
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

#BEGIN ELEMENT_DOC
"X2","","","Air SW on Stacker"
"X3","","","Air Pressure OK"
"X9","","","Stacker Reset PB"
"X17","","","Machine Run Started"
"X18","","","Latch Cam Start Cycle"
"X19","","","Eject In"
"X20","","","Eject Out"
"X21","","","Transfer Operator Side"
"X22","","","Transfer Drive Side"
"X26","","","Operator Side Load In"
"X27","","","Operator Side Load Half"
"X28","","","Operator Side Load Out"
"X29","s","","Product Entering"
"X30","set","",""
"X33","","","Guard Door SW"
"Y49","","","Stacker Jam Light"
"Y51","","","Timing Fault Light"
"Y53","","","Gradual Start Valve"
"Y54","","","Operator Side Load Sol"
"Y56","","","Transfer Sol"
"Y57","","","Compression Sol"
"Y58","","","Ejection Sol"
"Y59","","","Vertical Bar Sol"
"Y61","","","Full Air Valve"
"Y62","","","Machine Stop Interlock"
"Y65","","","Transfer Left Timing Fault"
"Y66","","","Transfer Right Timing Fault"
"Y67","","","Operator Side Load Out Timing Fault"
"Y68","","","Operator Side Load In Timing Fault"
"C0","","","All Faults OK"
"C1","","","Stacker Run OK"
"C2","","","Stacker Enable"
"C3","","","Jam Detect Enable"
"C4","","","Operator Side OS"
"C5","","","State Bit"
"C6","","","State Bit"
"C7","","","Any Timing Fault"
"C8","","","Alarm For Excess Time at Max Air Pressure"
"C9","","","Stacker Reset Press"
"C20","","","Operator Side Load Enable"
"C21","","","Operator Side Load Single Stack"
"C22","","","Operator Side Mode"
"C40","","","Single Stack Mode Constant"
"C41","","","No Interupt Stroke Mode Constant"
"C42","","","Operator Side Loading Mode Constant"
"C43","","","4 To 5/6 Stacker Adjust for Operator Load Constant"
"C44","","","4 To 5/6 Stacker Adjust For Operator Load"
"C45","","","Run Stacker Check Faults Task"
"C46","","","Run Stacker Start Up Task"
"C47","","","Run Stacker Cycle Task"
"C200","","","Run Stacker Program"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C316","","","Transition Variables Set"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Machine Run Started + Grace Period"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
"T0","GracePeriodTMR","","Stacker Shutdown Grace Period Timer"
"T1","AirMaxPressTMR","","Alarm for Excess Time at Max Air Pressure"
"T2","OSTransferStrTMR","","Operator Side Transfer Stroke Timer"
"T3","DSTransferTMR","","Drive Side Transfer Stroke Timer"
"T4","OSLoadOutTMR","","Operator Side Load Out Timer"
"T5","OSLoadInTMR","","Operator Side Load In Timer"
"T20","StripperReturTMR","","Stripper Return Timer"
"T21","EjectInTMR","","Eject Arm In Timer"
"T22","CompressDwellTMR","","Compression Dwell Timer"
"T23","TransferEnablTMR","","Transfer Enable Timer"
"T24","TransferDwellTMR","","Operator Side Transfer Dwell Timer"
#END

