// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
faeee07bd2a29b6973a5e2e176a857e2450530e5aa7f0cba10ca3e0763c66edc411e087ec73fc125
9f4e4d2ce4aaa97132d02f4c0133efdbb884dc9927d4448c6c3bf2fcab1abca54c2925b6ebf1d37e
bdc0b89197245a964659a15ae387c345d43eb4cca36f4221a31f10b48d0d0e992fc833473f469e5c
583cccb2ef3a2deac7642d522f40490ff9ed3836c72e99e0df618242a2eae09d79c4dfc8aeeb3935
0f83667acada87f3b93cb7360fcd70351de8910735b4aa4082b78ccb26113abc0244b33e638ef433
36ba153e6f2958a5e46dcf12db05687c63fbd7324b4cba405b61348ca9121bbe9e89431aa99a95d1
6b91e996acf5fb8d1c6fbc8a10a76e1c24552166218f5f366b8183fdf3ae3c47e0822b52fcb668a7
f3fb10f46a9443ef30f4f8846e02b657b00fa1699c93cbebb0971e0992c3839ae87267df243aee98
e53e141fbe32768db42f40d60fc0fd954893446a786d6b8ef83784ec8c14752574721ba3449f0f98
1665d122dd0fc7c386e97f03d522c7a0eb1183b9091a26403b3c2907bffbe3e40ffaaf7c44724b7e
adce67bba49b39d4e414d9170e57aa4088a6101d8077c88a8fa452b020d6382f186abe6584eae725
74481ca2f2598a6ed3886b5e336c5f980db2a62dcfb698387c0e79290a82799f40fad7b5c18c781c
8518b1724f918f4fa89b50eb04d6758a414ea642548db199ae65422e6462a8928819049b80ce1735
5bafb42a375e7eb0c28b9afab45786c7ef22adbb438fc894a82400ca84f98700565061248ddb33bd
64110dea9f76f48018d9a584e7c94a4bbad48a42b63ab10a99e10e358fd58c43f92085bc72139e7b
053bc9cb2de852c31f08fd3396d15abd683b29c7686d650aa6af3dff0a96c61562b004b98e96a45f
9cbf0b4e4531da22a8f64465600c52a0b654f9ed85b55edea5934199041895a4a0bc1c6c402425a6
71d19e018af78a9986c4d14fcce41323eaf83a5ba47c6b4ac4403558ed2aa0449749d9e8f5e64004
7bff71a5bb464f84f92d857e994ab471e5cc07ac627185651b27145e0044fd330e05db4fc3e6a788
a3d96d2fce9189a8173b0577a28b872e7de4cb09b9c2c570cf9bb854104166a78f2b299f3b2bb55d
6cb1700434a5e841c5b51c0a0f4f780312f0391fee5ae2f8b4cccf936855bc455bd18a8f9f22bd48
d3c71d7d58ee0b7563731cb48f312fad9fdc2a749f527d1d186976f411228b912b4d720090c964f1
902410dde32665f18fe8cc42f4cfb04d660dc5b52896aec8c729a309fc6ead85e739d15a944e6354
881fd668401642d6d658c1274f62631c799af0fb680df03992111b69ef97cb623d68d75fc02ea3d3
3a298f5ee81dc99c75888dd48b9913506e8bc103093680d1dd51def9818cbe9be490f388633685fd
848a6ad99968cc3ffd600840db4bca34bd8672ce8c1499de3ddfaa39c47b5b48dd0e206fd555af98
8c365bfa257555d1ce9d0a6930c75748c7cca8c0f748b12a048f111480f4fddeed5a69343fbd66b7
5c641f06905bc06c9c72a6fb7649a436595605bc926e4d33bb38db6af853ba0a0a0b6b09aa283e2b
07b045af62bae74c4c45626566fca1b9b95b60f486f14288076f917a392fdb24b7a6a68b4635b6f0
4b69d24c4db58974f647e0c1dc764ef586629581106d3e555828e57f1643591f0c9da077e7df92a4
e8fc144dfae365b20082da705913c66028806fe3ec294d5fd488452fafc58091140873263d1b38f0
43e377ad1c5d7c83e906edf98e7230ae6d8a454d114e601c63a12df0b5564546370b55d36705dc28
8857c2a5310d4d684251770c4de93e99fde7934894cd4f54c8d9f96453d87ecff05023c711e8d18d
b03f1b3a6e30388785cd0203fff20863e3e60760d9fc4a52512845762d456fed8656fd4973814a62
399eeae8e245870072a234c80023adb438c91723126971108de236e6612d9bb8ed6a76333632428c
7cef1c6c99761df46bfd15415a4c148ae585caeffec939aa01b126313ef6d627132ca4ef783922d8
ff07c91a0cd9be11d6aee29e0c3023854ea4ad2336760f8312a748ce2824b434d2e2138e3ecffcbc
f934b85bdc2971b2214e28f70844841bf8def749a12e3db89d1b818716a9b99a21ebd18d2f65f8f5
2efd62b8b25899bcee640cb3a30cea24f4f5f4a1bb310814df040e943d13492d8bc0c1a86e059bf4
b4faa224c3fbe1a52c330b6b0d0715f058b5a9a5c1debea18bd6309a53dec581819cd3263d094fbe
cf2ef2f974b5aea5fb6580f59805be5efe112c14d9da9db3ee4336f65b19469e46a1ff220c3cf061
91dcd0b75780d5774aca24795873318db034ae9ac8c5c17e72583cf2187d6b3974c785ee4442f3e3
e7d291a7cdc22a0f40f2198c099914e367cf44d6c1729a4b6bd51ac2324b7d5ce1731d3a58766b09
99f8b6c992c3eb391b7c411360afc95b369475a6f0776162d6cc0e4eb2916301bb8f31a8e802b3d7
4776c0d37756931569bdeaa2513d62c98ff4f73eb1ffc9eaaa76b8f8190b72b0c3b09e9a847ef2bf
dbc363bbb71b2d8a93809b17271540ced6719c2f94af6652668dd2c5f004e864690d10307986b2ba
3c15584656eb8cde50944ae1468de2abab2497ddac427672dd57479aeb9f0fff58061ec4aab378b8
ffea839dd446a07dfc3330c951e9c6d8ae8c8124a6db5f133d0247800cc880ad9544d845e31bb9cf
fa6901e3682c9fd41dc0fee3c724a01a990ddd15971902793bd6d3ec3db1908ba8e6bf899d9df02d
e6e505423a3d14a52d6e80640069348e9ad87f4022bdadfd620f50aea31f7e273f098eedf43169a2
dad38229617533901c541d92b1346c44dbd7520301b2b14850a2fdf334923c529ee12b1e4ff5b949
cc226a0260fa0111dfd4166ebae2d5543c24883a999e24cee4c9e397c1a904b767785cda75da95f0
3a0b2bd6b56e4e2cff064bcf3af30ad71522bcaccbd2a516c852a8f14de3fea9bc29c2688f9a0e46
b4dec2deb6aff849da3bbe1ac5debbf017c2a15790f28da383c674231a1d07848b24aa499cb4fe86
d4da0e00ae88edf0286f9bc162a4a741239f8ee51ed7cecf38fa39867f0d800e4887320202816545
370fdecbccb08e773b53797ee9e909269c55764732bd5999dc47f9e3b3244a78fec8f2f204deb857
45959b1368c0e67f1d889df3da589afaac10f50011d1bf20854f6ba4f1f7bd2e1dc43ac010cd9299
1501434688bedb097bf5031675f53c0689be63eef799c7377f217b6d8a3356ee1f1d522e82119631
1dcba78a95d46851358924bfc8ca63b3ed3339c0c2da8f4ba31cc46dd67ea282e72a25b296779285
f567787c7cf5d7329c91788faf75d97c4c72967dd2fa5c7e378297194944bed55570328597ef6013
88c35c4eed2f895f7faa9058d3a4d782775cc793b38a4a43d9fd4285fe105b6327ee6e412ad327b5
0a841a025fe2c10a9de4fb413ae5b3a1362f629f195ee4c85ddfb39a17e632e35f62bc50edf7fcfb
c0e349c28c6ecbc69b09c2081fb4ce1fdadd6c0d1e8abcc9ecd30aaa54ca36f8c6b43d0cd27061f5
7ec67b0871c586f0b7e42b86e8b991ecc7e6896ea2713bf2b6daae61aad2bedc249f3d2767adb0c2
e576764f810267fabbdfba84e261dcaaf81efe8fcdb93b4344b063f654a04772304bff09c99b7ece
a3a7c3439909cccb7a1b092d4ca62112c4935af799d872ee7fe534d75dc18f9030cd7b3699bbdd98
1cfc0dc3667688f3006cb89603a396d4c6fef7ef0819606f5a2e0f96153fe5adc68e6e79eeb1ba47
c186028ede9d54109ce134c2e962b95be0f6a17c51dae8b8ba383d8cedfe1a789215c613748951a1
1bb2f9853bf685cef89ace8241bd6118fe2459eaf67d0287c6a2475e5025a918b3061f4068492641
8dde955c1894e5b0c828c6d72e3e63c45c71df09a3860e94c215468971a1e95700817da5550fa62d
26e5a2e383ddef0821a6efb651294527b0dbadfa270a390b0759fca857d2fa73c5b850297a144506
cf8ba7d456e0b6b73ed0adb1babd467668594b73c0e7022ec8f41acdd6ec0b215e8679b0efc4e58a
155b4e5feb251b7ff62ff153427eb56e5f477a8f859a14cd7bbcc1572603589b62a38fea25c29711
a10e74abf1e28cbeff0e613ec7a37c120b86210358a65ea2dc99cfde130eb855fddbc1250ca4e9f1
8f3b06fc09d1359fa26c2be2970019d38ad2f8f2b8e0c1dc65c0ffc45d4f3f79540c49406bb2494b
65037a550aee05aa020cfab3e04dfa91396b9687c63a78f58932213aaee11b134cf06d2096da6fb1
8fe1b87ddbb47d590ae0e2f4a8095d4c9da71a21e96dc76fec7efe066c3256d9ecacbe868f03b563
a3a144a821c9562f380241aa728359f27963a024251dbab0ceeb22c8df443eb538e2b403504714b5
e1b070e421a8446d20d094311b805b893258c2cd543fcd2130fe79c8b92a484ab5f55369f997f58f
809a46d3955763d3b9fdc5193de36f8aef86d48a7114d30e0350c413ac4898e8d030997c8b9b2326
fc9ca6e2f508e4ea4ba6e438bb410a023e159970245949524e3562f1055d48ba48df95456accc229
5b3494feaaf763307aaf3573eb84ff4e5e283d610181e848a63ce97d206cc03a3cde77aef012a3fa
45189d51e7fc0c97d26f5ebb5f9fc299c63faf6d8dd768d836a17e484b336fd3e2072cdb9fdf40a2
d036f1e0b93d38ece729def9f5abe9f9735c746292de5e8b0c8fffceaeb5afc7e2ffa336f1b413c5
bcc6d8f326b9ab797a31fb8d12194884aacbd9b25c9d93d76848dc2b100bf5aacb71fdf9019b8fcb
b892207f97d3377461cb58d5682408149b3a4fa20fa798b8d029e9b19653cbc4c6fc5a9aced3d9ef
eb8e0d41b4870fc43b1b708059c64546f5c4973c68123585ade95da6763372b06e9e27ab55256c37
cac5645856ecf4ef53098a58e415b3d67b3b64a8c1e1e02fabdf1da8a2ea1b5dba6ab29f145f8e67
3c0c787ed9425b55774cf9239340c21407237daa45221dd0010ee4ea595d4e0e771ff359555e1db2
d8ac3e3f161a72da2de7cf080fc62ebdb4fb8c4144b0af012b62cf6ea06bc5fa79ffdffaf4af7af6
eb6d7f1b2b0bf58d928b744b35a5c83dc4dc5a4248e6f56a1f87787f23f95a732c737543cf04ee87
6d0e22acd25800e3697f260a322470a509a37a456a8759b56a216e385cb8306a27753a3cac94f42e
ac4632899cd3eed8d8d625999b2f8c102964dcbc5f569aa71f0c9cf5813a811e51509e85d042e491
724567f0ebe0f34ca22711b2c62882f60fdb26139020fdf2ac369a8976e79b9c23aad452fe4e4a59
7ac6b2c1aad1162aec5a3b2dade3153edfdb4eb740c1c637dee99f7d5be120be179c438d991cf041
9a902f82fde1b1a14e2a80baf4c77495ce4b2ed38cb42b931560b306e4bc6b811b3875d193f589ca
99f32f5f52cb77f2f4a3d641d2d5d52df09371e084952bd4e0019ede264d3fd70b7162daff305dd5
a7fede3b94cf7e25660887e47411a5c8d5d978dd17c61b1c9f3e69b563557e861627de25f100e367
c57bf3b7dd0c7062dbe5a017b86633c6a1274e191d9bd2a5713266e77049db942be46f2d733bab0e
3c763d26b433454cfe21c2e02e4676f9fb96827a76fd672e47a3c36831413efa54c341eb4db3f798
22781157036523d7779b3aa5fd84956e5128afc01fa12fe8f089d90efa539b9d612b1ea792cd54b1
d6839c79535fc6695b413f27835b162eed1de04172cef237d3d95af6291065e5012f1694336e83ec
703b0806f60780c4201363cd0f8a6698362ba4a5b58d466d5a5b5be2486106a847e7624a8566ca3c
ec4ec1ccdecc9ed5e6a8f45958a4d051f6e6d4baa2a63bb9aba03ee4c9d22ed2b96db51a84ac6392
b49b8ffc377fe6ffe51cb8063b0c2bc33725d9706b11ab97bc79a7c996e72d186c3893409c4781c7
3cfe92043dfffb5ed6150733c73ac3f5752bc4ea331c775bbc5a4f5ecfdfc60a95bd0b6df963213e
66ee98f860e3ecdf8f39fd439a8d9079b2ae7685bd36f5ae62e918b999a54bb5a5cb119a08a25cad
540b57318cf55ace6145e30c5c684092f66fa5bc9bd005f4e06ba001e3ea0723f67d7568456ec2f4
960edefff407e065c97ea8d4e6eedbd1587cf67b1bcee5002bca815ace9fc60860a9156121b09ede
e3c45dbd7f7881f10a7c958d27ccc8351eec3c5902590d84db94f4e15ca01c9a548e280c613ee203
75d9b9427543168c58ffe8ed75e86ab254e04160f1d1670a770b3c83fc6a16c037368e5a5060d0f7
fd8b11ac255c3a84b24f5d51cba0015cf4fb579e01c0de5c682b1dad161ee76b930de40fdc2f730a
984a058481cb053840c658c46e283dfef7f9b25d4d59d23030ea4993036a42c830bba2e303ee441d
538baed0401f1e37fa91d588ffcc6231350ab1371f2aa67ef78a307092f7e9189d2d57286d462096
3bbd8e76ccd7f50ed74454cbf6629e3b07503941bb379a1cc60270055e09ffee46a8fd1fe0452b05
2d9e4938a52360d831dde049eb4c1034767d9283e3b3afbc9822f280ff2a5098347a9a187ff67556
9d6133f7f4a5962bd77473065a108814cbd62a0d60f7e969875ac49375637c3e9a6c5e3a8e15e82d
548fda38ed17cc4f5524822aa577134f3cb262640f8f014209a25793e20b81caadedaa5967ce4256
9ee3395c2827c51980ae708330d5f978d238ae5c9cafc5bc4b9d2de2947f3a8b64b41a4e08247e35
062c0d027dee45fe3188bb410c8e622e49cd542746e571f874d6bd3f4819ec2b6f07ebac5edc067d
db7329a94fdbe8c6c38fed4fc2fa330514776dd1d99969f98886de77fb9bb8cc1cfd73ca3505229d
eae8811b97999eefb47cad46c380dc127e9ffeae84ca5b908b4a0166a756cae7518bde7cecd9eca1
89f1cb430056037b3caef028f7728a46e66fc699b8be328e7a9687e5c139ed5385b06f8521bb7b07
d2bca5b0ec3d008aa017814b9c93a6d804443f8c1f57695e80cfd70c460716c0e4c6d36da4cf573a
a85af9afa2652370ec45a6f6b67843796203459a161127e27483d71947c3a4cbacf6d3b0e9677e6d
75049fc77eb071d26323d357b0cfdeb1b65d074fb721754208e4c8c98a63c82dca931531c8e02d47
f80b4d7421e7b1007f7a0c001e32ab12dd535d691f1af9865b15e3486bf49385de1b5e0b0f7f4e46
77c8709d7863d10da9d2f6f087f67a18718ea93b37e4768564ab50bfb8faf53672fdc2b09eaaeea7
2098750064a699096a4d3a005cfa6e844f9fc47d3d872b516722b20a070d9389e4b5a7af4412d37b
a24294026ce5a6f498484e8204a1162f81608729217c1899e3b8ee2233e911eb6fcaacb43bb1c8e9
29f24bc9f5d7d7f528dfb797748aa172291d6abdb469090dee670b25db072d598c040d716a12752e
d5f5a935b4982d88fcb7507ee8af73bc3380a531175854de0ed0bc5a586867a5e2f834b84debd37e
63b6b1a93a0d1d3f58760e58fd0f1a8965132859ba3a4f0bdfb0be5270ccae84d296eb347bd5177d
c4f5f2f9257c390e9257a6a7660d9f085d84ec7dd2b2fd0d0477a4c0894807ec73365b8e433765be
8be79bdd21808fda4631d2ccb3fcaa1879892ad20bbd45e3eff0ede1e59a1f7b07d8aff26ffa363e
84f3449a4127fb7f6e47e8136df824ccb2a56ef2c922dd85994806e4739fa2fa3128a01bb24c1f88
6435fbd7a4f2e69b2e12fb670c73694983d56f37e770e7feaad96340a355c121990c8346f30c2fbe
47fa8a9e519d57e7b4c573ce40ba48f2352e5af7be53b9725d4aee4afd928a3d9a99b3bfbdfe374d
7a034e30044b93342a0f02574fc3c57f730679173bee77e5a745cf41288fb6a1ae11a994418c4119
e5a0f9fa7a1ee12db6ee1827f26899743d6217d38f4d15470943a2863592c4955ba5fa9ea3dac336
6dcba5bf317f0e605caa35b0d7ac88fc473eae0da2508e3c208cf509c22963a72a9249b5a2fe996c
f724e096b0ab03322cd68c70604815c718a92a942f7a8ced6d7b97721155040934b8e0799c9157c8
cbd48fb4ec60d5fa9c0831f7f6243f35c85ebf3997136aba51ddeffdd0873aad50a9e8f79b0ea581
854111b0b66bf36612a73d3b81a9438e38aea7de535c41a6e623e75a4ec9094e76409d7814a1ccad
a6b0bdebe97d1b7ef7673d2ca593454a2b9cb21446ba84932adb1e4f7dc760795c2f4d605fa0e148
185c2f0679600a7ae98b72995497d40e7c8efd8cd5e6b0a375051c9cedfa4116138b3ec589b6b0cb
ec109021a8d0dacb5b6912388751ea71e798d37b277f9afc15ed401b61ecc2378c3664e934e015f6
11a2a9620978f672f9036b6c530db04c7726fe0859c5dadd18654202f5861f47d9e66efa89962f3b
c1f0ac69876725a9eab6e350c759f4027a0cb9f66ccce1dd32a813271285280bc3b9addc3c54c285
7b3dc8d86bcba872fa6726b0a72a29f341e8cf332aaadb0f9b4d961660df93c3de65c439c44814ab
dd96f159f1e0805c3462cfc9e7bb1a7d1050c0fdca3dba96ac758c2105736e332441c98ebbaa3f6f
60ff2d998a041a130c1e3f024647f95c6e67aab9e29006cb86a50d924efe3f85c444eebba85d6b9f
806c844d932a45e4f921698763877d9df5934f5fff06878816b32dd2180e11b3216259d862d77f51
f42d8b74789384f11f4eae1beafeb1cb78a407f4c71d22cd2f119d55c3b7dc969bc2defe2351e871
65195356a1db13cdacb44f44f331df6b4d14adb84e3c0523b12fe7fc351989e56ac6b4b1fdec0de2
3df8b4d79fe8b69bf85c4307252bde05c1523da880c5fc64e86af8a857549243c113fd666b368b5b
b5c9bc7e2da029593be43c571f2d4c70dc9f740ec7b128b20a85ff0cccfe0cb6ee2314defb66f7a6
e272c5b0c9220a45c14f3ee6da2284d86720cc61268831adfe0de8d7001721e008c29a06fc1e8e42
1518f699edce0596324749010a6e7c46c899316275287fcd0a6353428cb96621cbcc0904bd7a8fc4
b67a6f4074eb861fccff30a307c95739d49083fa302a4ce2f30e02ad8e4bdd45f3cebcf34bb1e89e
6199aaea34f92320a37c0b93f32c80edbb308946790e8e25a2a8e91b79a87c70d3c86ebcfa9d9862
d941d50a16a643fa15bdc755b2f65d6495e9b823ec4b4e4fbd11223603374b6389060a40a6e34ab7
705aa608b9f65af7a4375e2a5f9b5cf54a999f567eaffd46154ce1b51b5309942f5ad7f9188e4d70
0c75fb4abe7194ed9eef77e8487cadcebce93258d676ccbda928bc964335ce73f7959f97a117df3a
b51cb0df334761e8996ae662f19a709e0d7187356a90f6c93e3697da5415fba749a2a494e0299569
2f711f3eca78f26352ecc7ba6cab9d20899a7d11715ad3741110e6a4ef20c36bb4c45262938b85c0
a360e2bd9567338d0a0b2df623db224eb2ac5aaf8356d87a4724261f04ca7cd509e3661de7d52d79
59f143544d8eb5a3cca60c5114d17eebdacf7f34023cac2ee60383193e31ac7222621afcb7269f9e
d4c782788614be9a4e09c18e5be88c4c02146efd63687be91d7db574732e796c3c1bb00b15d0a755
6bfc28ceda420a777988b139cf599024ebb74b8c73db7b17d00ff124ab58085358ccbafde51acf8f
7c680816479d75156d4c6903492dcf2b3a48a9cbbcce3dabcd53785354c33423ce91ced53fb9ef92
b3eddadcfb3535ac2f10dfc9d1e749f1590c36fe436f793b0e91dcacb80a1dce0da6e67ec61050ae
7c97e522e2264f2052509ef97d2b81e48dd8dc644c0dd0e1a826942f09b11f3537cda99d3459534c
3a25075de311f61bb79fd5605416286e8f4244c8fb9de08e79272e0f85a51e055947b4c8854a05ca
240949334331d89aa05ca72a9a5261fb218cd9d08144b2bd64974b97f015e004c96dca2d433ec41d
45b5c577764d6911f62eec9d509fc0e518d0e9f91f50945f31951449d293f8ffbcfa17b1bc46b026
35b69d795c9d645075f69c9e8f31fc2847939f172de73581a1fca7658fc7c9a6b5a0bc66d0c6c9b3
378ec96e7941bd4f31969258c66655f08debaaf6a8d68ae745d6131e412f121651817d8b4a14a476
1d03b0e1e43183c81bc1dd345aa32b6a16724976932972f4700b51406e2cff8ffb500fac90d6b7ec
0ed7fd9a22c65ee3cc240bbb2a83db3b660c2d1175583b3929a0dae004cac3468837a3fe8acc7ebf
7fd07ac3a4c638433ecfa6c0729bd6110bd98b7f896622157378b08881e2be1bfc666c985293daa1
87044a73761fc1498b6bb6d03ffb02c6beb273478fa51ea2af367cd27f9824b75927c3a2ad8306ce
c7a8aab0e02651b20a0937575506f932cd0c2d9773d901d3843a5a2610c3638544c7e53583dc23b3
86856a050d304173c1092cc234edcf21cf3a55ebeef4b453bec0934a887f7e525441b9789e1592ce
9ce58dcfe617d2349fee0bf77894ea29fc09e3ce3dd238ac0e131f7b8993ae4a
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	STKC	BIT	decimal	256
	STKD	SWORD	decimal	64
	STKT	TIMER	decimal	64
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
	Run	PROGRAM		0	-1
	Glue	PROGRAM		0	-1
	tst_stkBufferY	TASK		0	-1
	TestTimer	PROGRAM		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	STKD43	0
SET	STKC10
RST	STKC11
RST	STKC12
RST	STKC13
RST	STKC14

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection / Compression  State"
#END

STRE	STKD43	1
RST	STKC10
SET	STKC11
SET	STKC12
RST	STKC13
RST	STKC14

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	STKD43	2
RST	STKC10
RST	STKC11
SET	STKC12
SET	STKC13
RST	STKC14

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	STKD43	3
SET	STKC10
RST	STKC11
RST	STKC12
SET	STKC13
SET	STKC14

// Rung Stkr_SetState#5
// Offset 36
NOP

// Rung Stkr_SetState#6
// Offset 37
NOP

// Rung Stkr_SetState#7
// Offset 38
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	STKD42	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X4
ANDN	X5
AND	X7
AND	X6
AND	X8
AND	X9
MATH	STKD42	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	STKC0
AND	STKC1
AND	STKC2
AND	STKC3
AND	STKC4
AND	STKC5
MATH	STKD42	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	STKC0
ANDN	STKC1
ANDN	STKC2
ANDN	STKC3
AND	STKC4
AND	STKC5
MATH	STKD42	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	STKC0
ANDN	STKC1
ANDN	STKC2
ANDN	STKC3
ANDN	STKC4
ANDN	STKC5
MATH	STKD42	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X4
RST	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection / Compression "
#END

STRE	D50	1
RST	X4
SET	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	2
SET	X4
RST	X4
RST	X7
RST	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	3
SET	X4
RST	X4
RST	X7
RST	X6
RST	X8
RST	X9

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X4
SET	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#6
// Offset 50
NOP

// Rung tst_mock_stkr#7
// Offset 51
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
HALT	NewStker
OUT	C700

// Rung $Main#2
// Offset 9
STR	C205
RUN	Run
NOT
HALT	Run

// Rung $Main#3
// Offset 14
STR	C201
DUPBOOL
ANDPDPF
RUN	Glue
POPBOOL
NOT
HALT	Glue

// Rung $Main#4
// Offset 22
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// Rung $Main#5
// Offset 30
STR	C204
ENTASK	tst_stkBufferY	0x0	0	0x1
NOT
HALT	tst_stkBufferY

// Rung $Main#6
// Offset 37
STR	C202
RUN	TestTimer
NOT
HALT	TestTimer

// Rung $Main#7
// Offset 42
STR	C205
RUN	Run
NOT
HALT	Run

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block stkr_BufferX
$TSK	stkr_BufferX

// Rung stkr_BufferX#1
// Offset 0
STR	X4
ONDTMR	STKT0	STKD0	STKC0

// Rung stkr_BufferX#2
// Offset 4
STR	X5
ONDTMR	STKT1	STKD1	STKC1

// Rung stkr_BufferX#3
// Offset 8
STR	X7
ONDTMR	STKT2	STKD2	STKC2

// Rung stkr_BufferX#4
// Offset 12
STR	X6
ONDTMR	STKT3	STKD3	STKC3

// Rung stkr_BufferX#5
// Offset 16
STR	X8
ONDTMR	STKT4	STKD4	STKC4

// Rung stkr_BufferX#6
// Offset 20
STR	X9
ONDTMR	STKT5	STKD5	STKC5

// End of Code Block stkr_BufferX
$TSKEND	stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"#################################################<br>"
"## Error handling ###################################<br>"
"#################################################<br> "
#END

STR	X2
TIMEDOUT	1000	STKC30	0x1

// Rung NewStker#5
// Offset 16
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STRN	X32
ORN	X0
ORN	X1
STR	Y0
ANDN	STKC30
ORSTR
OUT	STKC120
OUT	Y0
OUT	C10

// Rung NewStker#6
// Offset 25
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	STKC122
OR	STKC123
OUT	STKC121
OUT	Y1
OUT	C10

// Rung NewStker#7
// Offset 30
STR	STKC30
ANDE	STKD42	0
RST	STKC122
RST	STKC123

// Rung NewStker#8
// Offset 37
NOP

// Rung NewStker#9
// Offset 38
STRN	C2
ANDN	C8
ANDN	C9
ANDN	STKC30
ANDNE	STKD42	0
SET	STKC123

// Rung NewStker#10
// Offset 47
STRN	C2
ORN	C8
ORN	C9
AND	STKC30
ANDN	STKC120
ANDNE	STKD43	0
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"

// Rung NewStker#11
// Offset 65
#BEGIN FMT_COMMENT 
"#################################################<br>"
"## Start up ########################################<br>"
"#################################################<br> "
"<br>Pre-Run Setup"
#END

STRN	STKC121
OR	STKC30
ANDN	STKC120
OUT	Y2

// Rung NewStker#12
// Offset 69
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STR	C2
OR	C8
OR	C9
ANDN	STKC120
ANDN	STKC121
ANDN	STKC30
STR	STKC100
STRE	STKD42	0
ANDE	STKD43	0
ORSTR
ANDSTR
OUT	STKC100

// Rung NewStker#13
// Offset 87
NOP

// Rung NewStker#14
// Offset 88
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#15
// Offset 96
STR	STKC100
ANDN	STKC31
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#16
// Offset 102
STRN	STKC100
OR	STKC31
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	STKC40
RST	STKC41
MATH	STKD45	"0"
MATH	STKD40	"0"
MATH	STKD41	"0"
MATH	D2	"0"
MATH	STKD43	"0"
MATH	STKD50	"0"
MATH	STKD51	"0"

// Rung stkr_CycleState#2
// Offset 46
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the time the next cam cycle "
"comes around<br>"
"        it will thorw a Cam Latch Missed error (our cycle "
"is taking too long)<br>        "
#END

STRPD	X3
AND	STKC43
AND	ST2
SET	STKC123
RST	STKC43

// Rung stkr_CycleState#3
// Offset 52
STRPD	X3
SET	STKC43

// Rung stkr_CycleState#4
// Offset 55
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRE	STKD42	STKD43
ANDGT	STKD42	0
AND	STKT40.Done
STRE	STKD42	0
AND	X3
STR	STKT40.Done
ORN	STKC40
ANDSTR
ORSTR
ANDNE	STKD42	-1
SET	STKC45
SET	STKC40

// Rung stkr_CycleState#5
// Offset 79
STR	C2
OR	C8
OR	C9
ONDTMR	T1	4500	C4

// Rung stkr_CycleState#6
// Offset 85
STR	C4
AND	STKC45
SET	STKC41
RST	STKC45

// Rung stkr_CycleState#7
// Offset 89
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	STKC41
DUPBOOL
ANDE	STKD42	0
MATH	STKD45	"1"
MATH	STKD40	"STKD32"
MATH	STKD41	"STKD33"
RST	STKC43
POPBOOL
DUPBOOL
ANDE	STKD42	1
MATH	STKD45	"2"
MATH	STKD40	"STKD34"
MATH	STKD41	"STKD35"
POPBOOL
DUPBOOL
ANDE	STKD42	2
MATH	STKD45	"3"
MATH	STKD40	"STKD36"
MATH	STKD41	"STKD37"
POPBOOL
ANDE	STKD42	3
MATH	STKD45	"0"
MATH	STKD40	"STKD30"
MATH	STKD41	"STKD31"

// Rung stkr_CycleState#8
// Offset 185
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	STKC40
ANDGT	STKD50	0
STRPD	STKC41
TMRA	STKT40	STKD40

// Rung stkr_CycleState#9
// Offset 194
STRPD	STKC41
MATH	STKD50	"STKD40"

// Rung stkr_CycleState#10
// Offset 202
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	STKC40
ANDGT	STKD51	0
STRPD	STKC41
TMRA	STKT41	STKD41

// Rung stkr_CycleState#11
// Offset 211
STRPD	STKC41
MATH	STKD51	"STKD41"

// Rung stkr_CycleState#12
// Offset 219
STR	STKC40
AND	STKT41.Done
ANDGT	STKD41	0
SET	STKC122

// Rung stkr_CycleState#13
// Offset 226
#BEGIN FMT_COMMENT 
"4. Set the new Cycle State"
#END

STR	STKC41
CALL	Stkr_SetState	0x1	DST511	"3 STKD45 STKD43 1"	"3"
RST	STKC41

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	STKC10
ONDTMR	STKT15	STKD15	STKC15

// Rung stkr_BufferY#2
// Offset 4
STRND	STKC15
OFFDTMR	STKT16	STKD16	STKC16

// Rung stkr_BufferY#3
// Offset 9
STR	STKC11
ONDTMR	STKT17	STKD17	STKC17
ANDNDPF
OFFDTMR	STKT18	STKD18	STKC18

// Rung stkr_BufferY#4
// Offset 17
STR	STKC12
ONDTMR	STKT19	STKD19	STKC19
ANDNDPF
OFFDTMR	STKT20	STKD20	STKC20

// Rung stkr_BufferY#5
// Offset 25
STR	STKC13
ONDTMR	STKT21	STKD21	STKC21
ANDNDPF
OFFDTMR	STKT22	STKD22	STKC22

// Rung stkr_BufferY#6
// Offset 33
STR	STKC14
ONDTMR	STKT23	STKD23	STKC23

// Rung stkr_BufferY#7
// Offset 37
STRND	STKC23
OFFDTMR	T210	STKD24	C2005

// Rung stkr_BufferY#8
// Offset 42
STR	STKC15
OR	STKC16
OUT	Y9

// Rung stkr_BufferY#9
// Offset 45
STR	STKC17
OR	STKC18
OUT	Y8

// Rung stkr_BufferY#10
// Offset 48
STR	STKC19
OR	STKC20
OUT	Y5

// Rung stkr_BufferY#11
// Offset 51
STR	STKC21
OR	STKC22
OUT	Y4

// Rung stkr_BufferY#12
// Offset 54
STR	STKC23
AND	C2000
STR	C2005
AND	C2001
ORSTR
OUT	Y3

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	STKC31

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	STKC100
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	STKC100
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	STKC100
AND	STKC120
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	STKC100
RST	X0
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X0
AND	C409
AND	STKC100
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	STKC123
ANDN	STKC123
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	STKC123
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	STKC100
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	STKC123
AND	C410
AND	STKC100
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 194
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	2
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	3
SET	C412
POPBOOL
AND	C412
ANDN	C413
ANDE	D12	-1
SET	C413

// Rung TestNewStker#20
// Offset 238
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 STKD42 D12 1"

// Rung TestNewStker#21
// Offset 249
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 259
NOP

// Rung TestNewStker#23
// Offset 260
NOP

// Rung TestNewStker#24
// Offset 261
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 STKD43 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 STKD43 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 STKD43 1"	"3"
POPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 STKD43 1"	"3"

// Rung TestNewStker#25
// Offset 316
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y9
ANDN	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDN	Y9
AND	Y8
AND	Y5
ANDN	Y4
ANDN	Y3
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
AND	Y9
ANDN	Y8
AND	Y5
AND	Y4
ANDN	Y3
SET	C411
POPBOOL
AND	C411
ANDN	C412
AND	Y9
ANDN	Y8
ANDN	Y5
AND	Y4
AND	Y3
SET	C412

// Rung TestNewStker#26
// Offset 355
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 364
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 365
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	STKC31
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 398
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	STKC31
RST	STKC31

// Rung TestNewStker#30
// Offset 402
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 424
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	STKC100
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 438
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X2

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X0
SET	X32
SET	X1
SET	X2
OUT	C407

// Rung mock_stkrStart#3
// Offset 9
STRN	X2
ANDE	STKD43	0
SET	X3

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	STKD42	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	STKD43	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X3
POPBOOL
ANDN	C420
RST	X3

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y9
ANDN	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y9
AND	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y9
AND	Y8
AND	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y9
ANDN	Y8
AND	Y5
AND	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y9
ANDN	Y8
ANDN	Y5
AND	Y4
AND	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	STKD40	0
ANDPDPF
MATH	D26	"(((STKD41 - 5) - STKD40) * RANDREAL()) + STKD40"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

// Beginning of Code Block Run
$PRGRM	Run

// Rung Run#1
// Offset 0
#BEGIN FMT_COMMENT 
"#############################################<br>"
"## Buffers #####################################<br>"
"#############################################<br> <br>Main "
"Drive On<br> "
#END

STR	X16
STR	Y17
AND	X17
AND	X24
ORSTR
OUT	Y17

// Rung Run#2
// Offset 6
#BEGIN FMT_COMMENT 
"Matt Fan On"
#END

STR	X18
STR	Y18
AND	X19
AND	X25
ORSTR
OUT	Y18

// Rung Run#3
// Offset 12
#BEGIN FMT_COMMENT 
"Chip Fan On"
#END

STR	X20
STR	Y19
AND	X21
AND	X26
ORSTR
OUT	Y19

// Rung Run#4
// Offset 18
#BEGIN FMT_COMMENT 
"Fife On"
#END

STR	X27
OUT	Y27

// Rung Run#5
// Offset 20
#BEGIN FMT_COMMENT 
"End Seal Drop Manual"
#END

STR	X23
OR	C11
OUT	Y32

// Rung Run#6
// Offset 23
STR	C13
OR	C14
OUT	Y48

// Rung Run#7
// Offset 26
STR	C15
OR	C16
OUT	Y33

// Rung Run#8
// Offset 29
#BEGIN FMT_COMMENT 
"Tape Glue Manual"
#END

STR	X49
OUT	C13
OUT	C15

// Rung Run#9
// Offset 32
STRPD	X35
STR	ST2
CNT	CT7	D1

// Rung Run#10
// Offset 37
#BEGIN FMT_COMMENT 
"Tape Glue Auto"
#END

STR	C12
OUT	C16
AND	X35
OUT	C14

// Rung Run#11
// Offset 41
#BEGIN FMT_COMMENT 
"Bell minimum ring"
#END

STR	C3
OR	C5
OR	C7
TMR	T2	2000

// Rung Run#12
// Offset 46
STR	T2.Timing
ANDN	T2.Done
OUT	Y16

// Rung Run#13
// Offset 49
#BEGIN FMT_COMMENT 
"Pre Run Check"
#END

STR	Y17
ANDN	Y20
ANDN	Y21
OUT	C6

// Rung Run#14
// Offset 53
#BEGIN FMT_COMMENT 
"Run Circuit<br> "
#END

STR	X11
ANDN	X12
ANDN	X13
AND	C6
OR	C3
AND	X10
ANDN	C10
OUT	C3
ONDTMR	T4	3000	C2

// Rung Run#15
// Offset 64
#BEGIN FMT_COMMENT 
"Thread Circuit"
#END

STR	X12
ANDN	X11
ANDN	X13
OR	C5
AND	X10
ANDN	C10
OUT	C5
ONDTMR	T5	3000	C8

// Rung Run#16
// Offset 74
#BEGIN FMT_COMMENT 
"Jog Circuit"
#END

STR	X13
ANDN	X11
ANDN	X12
AND	X10
ANDN	C10
OUT	C7
ONDTMR	T6	3000	C9

// Rung Run#17
// Offset 83
#BEGIN FMT_COMMENT 
"Run Function"
#END

STR	C2
AND	X10
ANDN	Y21
DUPBOOL
AND	X48
OUT	C12
POPBOOL
DUPBOOL
AND	X29
ONDTMR	T3	10000	C11
POPBOOL
AND	ST1
OUT	Y20
OUT	Y28

// Rung Run#18
// Offset 99
#BEGIN FMT_COMMENT 
"Thread Function"
#END

STR	C9
OR	C8
AND	X10
ANDN	Y20
OUT	Y21
OUT	Y29

// Rung Run#19
// Offset 105
#BEGIN FMT_COMMENT 
"Glue Break Detection<br> "
#END

STR	C2
AND	X48
AND	X33
TMR	T7	500

// Rung Run#20
// Offset 110
STR	T7.Done
AND	ST2
OUT	C10
OUT	C25

// End of Code Block Run
$PGMEND	Run

// Beginning of Code Block Glue
$PRGRM	Glue

// Rung Glue#1
// Offset 0
STR	ST1
DTOFFSET	SDT0	-18000	UDT1

// Rung Glue#2
// Offset 4
STR	ST1
DTOFFSET	SDT0	86400	UDT2

// Rung Glue#3
// Offset 9
STR	ST1
DTOFFSET	UDT2	-300	UDT3

// Rung Glue#4
// Offset 13
#BEGIN FMT_COMMENT 
"#################################<br>"
"##  Day Schedule ###################<br>#################################"
#END

STRE	UDT2.DayOfWeek	0
AND	ST2
STRE	UDT2.DayOfWeek	1
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	2
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	3
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	4
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	5
AND	ST2
ORSTR
STRE	UDT2.DayOfWeek	6
AND	ST2
ORSTR
OUT	C20

// Rung Glue#5
// Offset 55
#BEGIN FMT_COMMENT 
""
"#################################<br>"
"##  Switch & Heat Behavior  ###########<br>#################################"
#END

STR	C20
OR	X51
AND	X50
SET	C21

// Rung Glue#6
// Offset 59
STRN	X50
RST	C21

// Rung Glue#7
// Offset 61
STR	C21
ANDE	UDT1.Hour	0
ANDE	UDT1.Minute	0
OUT	C22

// Rung Glue#8
// Offset 71
STR	C22
OR	C23
OR	X52
ANDN	C24
ANDN	X53
OUT	Y34
OUT	Y36
OUT	C23

// Rung Glue#9
// Offset 79
NOP

// Rung Glue#10
// Offset 80
#BEGIN FMT_COMMENT 
"#################################<br>"
"##  After hours saftey shut off  "
"##########<br>#################################"
#END

STR	C2
OR	C5
OR	X13
NOT
TMR	T0	0

// Rung Glue#11
// Offset 86
#BEGIN FMT_COMMENT 
" "
#END

STRGT	SDT0.Hour	18
ORLT	SDT0.Hour	4
ANDGT	T0.Acc	3600000
OUT	C24

// Rung Glue#12
// Offset 100
NOP

// End of Code Block Glue
$PGMEND	Glue

// Beginning of Code Block TestTimer
$PRGRM	TestTimer

// Rung TestTimer#1
// Offset 0
NOP

// Rung TestTimer#2
// Offset 1
STRE	SDT0.DayOfWeek	6
MATH	D4	"0"
NOT
MATH	D4	"SDT0.DayOfWeek + 1"

// Rung TestTimer#3
// Offset 20
STRGE	SDT0.DayOfWeek	D8
ANDLE	SDT0.DayOfWeek	D9
ANDLE	SDT0.Hour	D10
ANDLE	SDT0.Minute	D11
STRGE	D4	D8
ANDLE	D4	D9
ORSTR
OUT	C30

// Rung TestTimer#4
// Offset 46
STR	C30
OR	X11
OR	C31
AND	X9
OUT	C31

// Rung TestTimer#5
// Offset 51
STR	C31
ANDN	C34
ANDGE	SDT0.Hour	UDT0.Hour
ANDGE	SDT0.Minute	UDT0.Minute
OUT	C33
SET	C34
ANDNDPF
RST	C31

// Rung TestTimer#6
// Offset 65
STRE	SDT0.Hour	0
ANDE	SDT0.Minute	0
RST	C31

// Rung TestTimer#7
// Offset 74
NOP

// Rung TestTimer#8
// Offset 75
STR	C36
OR	C33
STR	C35
ANDN	C36
ORSTR
OUT	C35

// End of Code Block TestTimer
$PGMEND	TestTimer

#BEGIN ELEMENT_DOC
"X0","","","Air SW on Stacker"
"X1","","","Air Pressure OK"
"X2","","","Stacker Reset PB"
"X3","","","Latch Cam Start Cycle"
"X4","","","Eject In"
"X5","","","Eject Out"
"X6","","","Transfer Operator Side"
"X7","","","Transfer Drive Side"
"X8","","","Operator Side Load In"
"X9","","","Operator Side Load Out"
"X10","","","Emergency Stop"
"X11","","","Run"
"X12","","","Thread"
"X13","","","Jog"
"X14","","","Encoder"
"X15","","","*"
"X16","","","Main Drive Start"
"X17","","","Main Drive Stop"
"X18","","","Matt Fan Start"
"X19","","","Matt Fan Stop"
"X20","","","Chip Fan Start"
"X21","","","Chip Fan Stop"
"X23","","","End Seal Drop Manual"
"X24","","","Main Dr Stop"
"X25","","","Matt Fan Stop"
"X26","","","Chip Fan Stop"
"X27","","","Fife On"
"X28","","","Poly On"
"X29","","","Auto Drop End Seal"
"X32","","","Guard Door SW"
"X33","","","Glue Arm Detected"
"X35","","","PLS Pulse"
"X48","","","Glue SW Auto"
"X49","","","Glue SW Manual"
"X50","","","Auto Arm Tape Glue HTR"
"X51","","","Manual Arm Tape Glue HTR"
"X52","","","Tape Glue HTR On"
"X53","","","Tape Glue HTR Off"
"Y0","","","Stacker Jam Light"
"Y1","","","Timing Fault Light"
"Y2","","","Gradual Start Valve"
"Y3","","","Operator Side Load Sol"
"Y4","","","Transfer Sol"
"Y5","","","Compression Sol"
"Y8","","","Ejection Sol"
"Y9","","","Vertical Bar Sol"
"Y10","","","Machine Stop Interlock"
"Y16","","","Bell"
"Y17","","","Main Drive"
"Y18","","","Matt Fan"
"Y19","","","Chip Fan"
"Y20","","","Run"
"Y21","","","Jog"
"Y22","","","NO CARD"
"Y23","","","NO CARD"
"Y26","","","End Seal Drop"
"Y27","","","Fife"
"Y28","","","RCR"
"Y29","","","JCR"
"Y32","","","End Seal Drop"
"Y33","","","Tape Glue Motor"
"Y34","","","Tape Glue HTR"
"Y36","","","End Seal HTR"
"Y48","","","Tape Glue Sol Manual"
"Y49","","","Tape Glue SOL Auto"
"Y50","","","Tape Glue HTR"
"Y51","","","End Seal HTR"
"Y69","","","Tape Glue Pump On"
"Y72","","","Tape Power Relay"
"C1","","","Bell Minimum Ring"
"C2","","","Machine Run"
"C5","","","Machine Thread"
"C6","","","Pre Run Check"
"C8","","","Machine Thread"
"C9","","","Machine Jog"
"C10","","","PLC Stop"
"C20","","","Auto Arm Tape Glue HTR"
"C21","","","Tape Glue HTR Armed"
"C22","","","Tape Glue HTR On"
"C24","","","Turn Off Heaters"
"C25","","","Glue Tape Break Detected"
"C30","","","Standard Work Week Day"
"C31","","","Arm Auto Warm Glue Lamp"
"C32","","","Auto Warm Glue Armed Lamp"
"C33","","","Auto Heat Glue"
"C34","","","Auto Glue Triggered Today"
"C36","","","Manually Heat Glue"
"C200","","","Enable Stacker Program"
"C201","","","Enable Glue Program"
"C203","","","Enable Stacker Test"
"C205","","","Run"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D30","","","Vertical Bar On Buffer"
"D31","","","Ejection On Buffer"
"D32","","","Compression On Buffer"
"D33","","","Transfer On Buffer"
"D34","","","Load On Buffer"
"D40","","","Vertical Bar Off Buffer"
"D50","","","Stacker Operation Mock State"
"STKC0","","","Eject In Eye Buffer"
"STKC1","","","Eject Out Eye Buffer"
"STKC2","","","Transfer Drive Side Eye Buffer"
"STKC3","","","Transfer Operator Side Eye Buffer"
"STKC4","","","Load In Eye Buffer"
"STKC5","","","Load Out Eye Buffer"
"STKC10","","","Stacker Operation Vertical Bar SOL Buffered"
"STKC11","","","Stacker Operation Ejection SOL Buffered"
"STKC12","","","Stacker Operation Compression SOL Buffered"
"STKC13","","","Stacker Operation Transfer SOL Buffered"
"STKC14","","","Stacker Operation Load SOL Buffered"
"STKC15","","","Stacker Vertical Bar On Buffer"
"STKC16","","","Stacker Vertical Bar Off Buffer"
"STKC17","","","Stacker Ejection Bar On Buffer"
"STKC18","","","Stacker Ejection Bar Off Buffer"
"STKC19","","","Stacker Compression On Buffer"
"STKC20","","","Stacker Compression Off Buffer"
"STKC21","","","Stacker Transfer On Buffer"
"STKC22","","","Stacker Transfer Off Buffer"
"STKC23","","","Stacker Load On Buffer"
"STKC24","","","Stacker Load Off Buffer"
"STKC30","","","Stacker Reset Press"
"STKC31","","","Stacker Cycle Disconnect"
"STKC40","","","Begin Timers"
"STKC41","","","Transition State"
"STKC42","","","Stacker Start Up Cycle Delay"
"STKC43","","","Latch Cycle Open"
"STKC44","SET","",""
"STKC100","","","Stacker Run State"
"STKC120","","","Stacker Pre Run Error State"
"STKC121","","","Stacker Run Time Error State"
"STKC122","","","Stacker Operation Transition State Timeout Error"
"STKC123","","","Stacker Operation Missed Cam Latch Cycle Error"
"STKD15","","","Vertical Bar On Buffer"
"STKD16","","","Vertical Bar Off Buffer"
"STKD17","","","Ejection On Buffer"
"STKD18","","","Ejection Off Buffer"
"STKD19","","","Compression On Buffer"
"STKD20","","","Compression Off Buffer"
"STKD21","","","Transfer On Buffer"
"STKD22","","","Transfer Off Buffer"
"STKD23","","","Load On Buffer"
"STKD24","","","Load Off Buffer"
"STKD30","","","Reset State Lockout"
"STKD31","","","Reset State Timeout"
"STKD32","","","Eject State Lockout"
"STKD33","","","Eject State Timeout"
"STKD34","","","Transfer State Lockout"
"STKD35","","","Transfer State Timeout"
"STKD36","","","Load State Lockout"
"STKD37","","","LoadState Timeout"
"STKD40","","","Stacker Transition Lock Out ms"
"STKD41","","","Stacker Transition Time Out ms"
"STKD42","","","Stacker Operation Detected State"
"STKD43","","","Stacker Operation State Set"
"STKD45","","","Stacker Operation Next Cycle State"
#END

