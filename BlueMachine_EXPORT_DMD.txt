// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
c0d4da41e898a153499fd8db4c926dd87f3f0adf904536802af0043d59fc54e67b243244fd05fb1f
a5747716de90934b08ea15763b09d5e182bee6a31dee7eb65601c8c69120869f76131f8cd1cbe944
87fa82abad1e60ac7c639b60d9bdf97fee048ef69955781b99252a8eb73734a315f2097d057ca466
6206f688d50017d0fd5e1768157a7335c3d7020cfd14a3dae55bb87898d0daa743fee5f294d1030f
35b95c40f0e0bdc983068d0c35f74a0f27d2ab3d0f8e907ab88db6f11c2b0086387e890459b4ce09
0c802f045513629fde57f528e13f524659c1ed087176807a615b0eb693282184a4b3792093a0afeb
51abd3ac96cfc1b7265586b02a9d54261e6f1b5c1bb5650c51bbb9c7c994067ddab81168c68c529d
c9c12ace50ae79d50acec2be54388c6d8a359b53a6a9f1d18aad2433a8f9b9a0d2485de51e00d4a2
df042e2584084cb78e157aec35fac7af72a97e50425751b4c20dbed6b62e4f1f4e4821997ea535a2
2c5feb18e735fdf9bcd34539ef18fd9ad12bb98333201c7a0106133d85c1d9de35c095467e487144
97f45d819ea103eede2ee32d346d907ab29c2a27ba4df2b0b59e688a1aec02152250845fbed0dd1f
4e722698c863b054e9b25164095665a237889c17f58ca2024634431330b843a57ac0ed8ffbb64226
bf228b4875abb57592a16ad13eec4fb07b749c786eb78ba3945f78145e5892a8b2233ea1baf42d0f
61958e100d64448af8b1a0c08e6dbcfdd518978179b5f2ae921e3af0bec3bd3a6c6a5b1eb7e10987
5e2b37d0a54cceba22e39fbeddf3707180eeb0788c008b30a3db340fb5efb679c31abf864829a441
3f01f3f117d268f92532c709aceb6087520113fd52575f309c9507c530acfc2f588a3e83b4ac9e65
a68531747f0be01892cc7e5f5a36689a8c6ec3d7bf8f64e49fa97ba33e22af9e9a8626567a1e1f9c
4beba43bb0cdb0a3bcfeeb75f6de2919d0c200619e465170fe7a0f62d7109a7ead73e3d2cfdc7a3e
41c54b9f817c75bec317bf44a3708e4bdff63d96584bbf5f211d2e643a7ec709343fe175f9dc9db2
99e35715f4abb3922d013f4d98b1bd1447def13383f8ff4af5a1826e2a7b5c9db51113a501118f67
568b4a3e0e9fd27bff8f26303575423928ca0325d460d8c28ef6f5a9526f867f61ebb0b5a5188772
e9fd274762d4314f5949268eb50b1597a5e6104ea568472722534cce2b18b1ab1177483aaaf35ecb
aa1e2ae7d91c5fcbb5d2f678cef58a775c37ff8f12ac94f2fd139933c65497bfdd03eb60ae74596e
b225ec527a2c78ecec62fb1d7558592643a0cac15237ca03a82b2153d5adf1580752ed65fa1499e9
0013b564d227f3a64fb2b7eeb1a3296a54b1fb39330cbaebe76be4c3bbb684a1deaac9b2590cbfc7
beb050e3a352f605c75a327ae171f00e87bc48f4b62ea3e407e59003fe416172e7341a55ef6f95a2
b60c61c01f4f6febf4a730530afd6d72fdf692facd728b103eb52b2ebacec7e4d760530e05875c8d
665e253caa61fa56a6489cc14c739e0c636c3f86a85477098102e150c26980303031513390120411
3d8a7f955880dd76767f585f5cc69b8383615acebccb78b23d55ab400315e11e8d9c9cb17c0f8cca
7153e876778fb34ecc7ddafbe64c74cfbc58afbb2a57046f6212df452c79632536a79a4ddde5a89e
d2c62e77c0d95f883ab8e04a6329fc5a12ba55d9d6137765eeb27f1595ffbaab2e32491c072102ca
79d94d97266746b9d33cd7c3b4480a9457b07f772b745a26599b17ca8f6c7f7c0d316fe95d3fe612
b26df89f0b377752786b4d3677d304a3c7dda972aef7756ef2e3c35e69e244f5ca6a19fd2bd2ebb7
8a052100540a02bdbff73839c5c83259d9dc3d5ae3c670686b127f4c177f55d7bc6cc77349bb7058
03a4d0d2d87fbd3a48980ef23a19978e02f32d1928534b2ab7d80cdc5b17a182d7504c090c0878b6
46d52656a34c27ce51c72f7b60762eb0dfbff0d5c4f303903b8b1c0b04ccec1d29169ed5420318e2
c53df32036e3842bec94d8a4360a19bf749e97190c4c35b9289d72f4121e8e0ee8d829b404f5c686
c30e8261e6134b881b7412cd327ebe21c2e4cd739b140782a721bbbd2c9383a01bd1ebb7155fc2cf
14c758828862a386d45e36899936d01ececfce9b810b322ee53e34ae07297317b1fafb92543fa1ce
8ec0981ef9c1db9f16093151373d2fca628f939ffbe4849bb1ec0aa069e4ffbbbba6e91c07337584
f514c8c34e8f949fc15fbacfa23f8464c42b162ee3e0a789d4790ccc61237ca47c9bc5183606ca5b
abe6ea8d6dbaef4d70f01e4362490bb78a0e94a0f2fffb44486206c8224751034efdbfd47e78c9d9
dde8ab9df7f810357ac823b633a32ed95df57eecfb48a07151ef20f808714766db492700624c5133
a3c28cf3a8f9d10321467b295a95f3610cae4f9cca4d5b58ecf6347488ab593b81b50b92d23889ed
7d4cfae94d6ca92f5387d0986b0758f3b5cecd048bc5f3d0904c82c22331488af98aa4a0be44c885
e1f959818d2117b0a9baa12d1d2f7af4ec4ba615ae955c685cb7e8ffca3ed25e53372a0a43bc8880
062f627c6cd1b6e46aae70db7cb7d891911eade796784c48e76d7da0d1a535c5623c24fe90894282
c5d0b9a7ee7c9a47c6090af36bd3fce294b6bb1e9ce1652907387dba36f2ba97af7ee27fd92183f5
c0533bd95216a5ee27fac4d9fd1e9a20a337e72fad23384301ece9d6078baab192dc85b3a7a7ca17
dcdf3f7800072e9f1754ba5e3a530eb4a0e2457a188797c758356a949925441d0533b4d7ce0b5398
e0e9b8135b4f09aa266e27a88b0e567ee1ed68393b888b726a98c7c90ea80668a4db112475cf8373
f61850385ac03b2be5ee2c5480d8ef6e061eb200a3a41ef4def3d9adfb933e8d5d4266e04fe0afca
003111ec8f547416c53c71f500c930ed2f188696f1e89f2cf26892cb77d9c4938613f852b5a0347c
8ee4f8e48c95c273e0018420ffe481ca2df89b6daac8b799b9fc4e1920273dbeb11e9073a68ec4bc
eee0343a94b2d7ca1255a1fb589e9d7b19a5b4df24edf4f502c003bc4537ba3472bd083838bb5f7f
0d35e4f1f68ab44d01694344d3d3331ca66f4c7d088763a3e67dc3d9891e7042c4f2c8c83ee4826d
7fafa12952fadc4527b2a7c9e062a0c0962acf3a2beb851abf75519ecbcd871427fe00fa2af7a8a3
2f3b797cb284e13341cf392c4fcf063cb38459d4cda3fd0d451b4157b0096cd425276814b82bac0b
27f19db0afee526b0fb31e85f2f05989d70903faf8e0b5719926fe57ec4498b8dd101f88ac4da8bf
cf5d424646cfed08a6ab42b5954fe3467648ac47e8c066440db8ad23737e84ef6f4a08bfadd55a29
b2f96674d715b3654590aa62e99eedb84d66fda989b07079e3c778bfc42a61591dd4547b10e91d8f
30be203865d8fb30a7dec17b00df899b0c1558a52364def267e589a02ddc08d96558866ad7cdc6c1
fad973f8b654f1fca133f832258ef425e0e7563724b086f3d6e930906ef00cc2fc8e0736e84a5bcf
44fc41324bffbcca8dde11bcd283abd6fddcb354984b01c88ce0945b90e884e61ea5071d5d978af8
df4c4c75bb385dc081e580bed85be690c224c4b5f78301797e8a59cc6e9a7d480a71c533f3a144f4
999df979a333f6f140213317769c1b28fea960cda3e248d445df0eed67fbb5aa0af7410ca381e7a2
26c637f95c4cb2c93a5682ac3999aceefcc4cdd532235a55601435ac2f05df97fcb45443d48b807d
fbbc38b4e4a76e2aa6db0ef8d3588361dacc9b466be0d282800207b6d7c42042a82ffc294eb36b9b
2188c3bf01ccbff4c2a0f4b87b875b22c41e63d0cc4738bdfc987d646a1f9322893c257a52731c7b
b7e4af6622aedf8af212fced140459fe664be53399bc34aef82f7cb34b9bd36d3abb479f6f359c17
1cdf98d9b9e7d5321b9cd58c6b137f1d8ae197c01d3003313d63c6926de8c049ff826a13402e7f3c
f5b19dee6cda8c8d04ea978b80877c4c52637149fadd3814f2ce20f7ecd6311b64bc438ad5fedfb0
2f617465d11f2145cc15cb6978448f54657d40b5bfa02ef74186fb6d1c3962a15899b5d01ff8ad2b
9b344e91cbd8b684c5345b04fd99462831bc1b39629c6498e6a3f5e42934826fc7e1fb1f369ed3cb
b5013cc633eb0fa5985611d8ad3a23e9b0e8c2c882dafbe65ffac5fe677505436e36737a51887371
5f39406f30d43f903836c089da77c0ab0351acbdfc0042cfb3081b0094db212976ca571aace0558b
b5db8247e18e476330dad8ce92336776a79d201bd357fd55d644c43c56086ce3d69684bcb5398f59
999b7e921bf36c1502387b9048b963c843599a1e1f27808af4d118f2e57e048f02d88e396a7d2e8f
db8a4ade1b927e571aeaae0b21ba61b30862f8f76e05f71b0ac443f2831072708fcf6953c3adcfb5
baa07ce9af6d59e983c7ff2307d955b0d5bceeb04b2ee934396afe299672a2d2ea0aa346b1a1191c
c6a69cd8cf32ded0719cde02817b3038042fa34a1e637368740f58cb3f67728072e5af7f50f6f813
610eaec490cd590a40950f49d1bec5746412075b3bbbd2729c06d3471a56fa0006e44d94ca2899c0
7f22a76bddc636ade855648165a5f8a3fc059557b7ed52e20c9b4472710955e9d83d16e1a5e57a98
ea0ccbda830702d6dd13e4c3cf91d3c349664e58a8e464b136b5c5f4948f95fdd8c5990ccb8e29ff
86fce2c91c839143400bc1b7282372be90f1e38866a7a9ed5272e6112a31cf90f14bc7c33ba1b5f1
82a81a45ade90d4e5bf162ef521e322ea1007598359da282ea13d38bac69f1fefcc660a0f4e9e3d5
d1b4377b8ebd35fe01214aba63fc7f7ccffead0652280fbf97d3679c4c09488a54a41d916f1f560d
f0ff5e626cd6ced56933b062de2f89ec41015e92fbdbda1591e5279298d02167805088a52e65b45d
06364244e378616f4d76c319a97af82e3d1947907f1827ea3b34ded0636774344d25c9636f642788
e29604052c2048e017ddf53235fc14878ec1b67b7e8a953b1158f5549a51ffc043c5e5c0ce9540cc
d15745211131cfb7a8b14e710f9ff207fee6607872dccf5025bd424519c3604916494f79f53ed4bd
57341896e8623ad953451c30081e4a9f3399407f50bd638f501b540266820a501d4f000696aece14
967c08b3a6e9d4e2e2ec1fa3a115b62a135ee686656ca09d2536a6cfbb00bb246b6aa4bfea78deab
487f5dcad1dac976981d2b88fc12b8cc35e11c29aa1ac7c8960ca0b34cdda1a61990ee68c4747063
40fc88fb90eb2c10d660011797d92f04e5e1748d7afbfc0de4d3a54761db1a842da679b7a326ca7b
a0aa15b8c7db8b9b7410ba80cefd4eaff47114e9b68e11a92f5a893cde8651bb21024feba9cfb3f0
a3c9156568f14dc8ce99ec7be8efef17caa94bdabeaf11eeda3ba4e41c7705ed314b58e0c50a67ef
9dc4e401aef5441f5c32bdde4e2b9ff2efe342e72dfc2126a504538f596f44bc2c1de41fcb3ad95d
ff41c98de7364a58e1df9a2d825c09fc9b1d742327a1e89f4b085cdd4a73e1ae11de551749019134
064c071c8e097f76c41bf8da147c4cc3c1acb8404cc75d147d99f9520b7b04c06ef97bd17789cda2
18422b6d395f19ed4da1009fc7beaf546b1295fa259b15d2cab3e334c069a1a75b11249da8f76e8b
ecb9a6436965fc53617b051db9612c14d727da7b48f4c80de9e360cc132a5fdf3b152cae0954b9d6
4a01323ccc3dbafe1a2959f735b05ca20c119e9f8fb77c57606161d8725b3c927ddd5870bf5cf006
d674fbf6e4f6a4efdc92ce63629eea6bccdcee80989c0183919a04def3e814e883578f20be9659a8
8ea1b5c60d45dcc5df26823c013611f90d1fe34a512b91ad86439df3acdd17225602a97aa67dbbfd
06c4a83e07c5c164ec2f3d09fd00f9cf4f11fed009264d6186607564f5e5fc30af873157c3591b04
5cd4a2c25ad9d6e5b503c779a0b7aa4388944cbf870ccf9458d32283a39f718f9ff12ba032986697
6e316d0bb6cf60f45b7fd93666527aa8cc559f86a1ea3fceda519a3bd9d03d19cc474f527f54f8ce
ac34e4c5ce3dda5ff34492eedcd4e1eb6246cc4121f4df3a11f0bb60f4a5fc325a932f5b1b8aa4e4
d9fe67874542bbcb3046afb71df6f20f24d60663386337bee1aecedb669a26a06eb412365b04d839
4fe383784f792cb662c5d2d74fd250886eda7b5acbeb5d304d3106b9c6502cfa0d0cb4606a5aeacd
c7b12b961f6600be8875676bf19a3b66cec16da43bfae466521127972c24dd51a937de35e6154930
a2703fbebbf13f027afc62fe541207c4cdc388677763e80a0ad073a9395078f20a8198d939d47e27
69b194ea7a25240dc0abefb2c5f6580b0f308b0d25109c44cdb00a4aa8cdd322a7176d12577c1aac
0187b44cf6edcf34ed7e6ef1cc58a4013d6a037b810da026fc384a3f6433c5d47c92c725da7f113f
17a473029f195ae20be7da73d1762a0e4c47a8b9d9899586a218c8bac5106aa20e40a02245cc4f6c
a75b09cdce9fac11ed4e493c602ab22ef1ec10375acdd353bd60fea94f594604a0566400b42fd217
6eb5e002d72df6756f1eb8109f4d29750688585e35b53b7833986da9d831bbf097d790635df4786c
a4d90366121dff23ba944ab90aefc342e8029466a695ff8671a717d8ae4500b15e8e2074321e440f
3c16373847d47fc40bb2817b36b4581473f76e1d7cdf4bc24eec87057223d611553dd19664e63c47
e149139375e1d2fcf9b5d775f8c0093f2e4d57ebe3a353c3b2bce44dc1a182f626c749f00f3f18a7
d0d2bb21ada3a4d58e46977cf9bae62844a5c494bef061aab1703b5c9d6cf0dd6bb1e446d6e3d69b
b3cbf1793a6c39410694ca12cd48b07cdc55fca3828408b440acbddffb03d769bf8a55bf1b81413d
e8869f8ad6073ab09a2dbb71a6a99ce23e7e05b6256d5364baf5ed367c3d2cfadefce9579ef56d00
9260c395985f194ad67f9ccc8c42794358397fa02c2b1dd84eb9ed237df99ef196cce98ad35d4457
4f3ea5fd448a4be85919e96d8af5e48b8c673d758d1b4f7832def2f3b059f217f0a92f0bf2da177d
c231774e1bdd8b3a4540363a24089128e76967532520c3bc612fd97251cea9bfe42164313545747c
4df24aa74259eb3793e8cccabdcc40224bb493010dde4cbf5e916a8582c0cf0c48c7f88aa490d49d
1aa24f3a5e9ca3335077003a66c054be75a5fe4707bd116b5d1888303d37a9b3de8f9d957e28e941
9878ae3856df9ccea27274b83e9b2c15bb5abd131b4622a3d982d41809d32bd155f0968e018bf2d3
13c871f3cfededcf12e58dad4eb09b48132750878e533337d45d311fe13d1763b63e374b50284f14
efcf930f8ea217b2c68d6a44d295498609ba9f0b2d626ee434ea866062525d9fd8c20e8277d1e944
598c8b9300372705624c3462c73520b35f29126380007531e58a84684af694bee8acd10e41ef2d47
fecfc8c31f460334a86d9c9d5c37a53267bed647e888c7373e4d9efab3723dd6490c61b4790d5f84
b1dda1e71bbab5e07c0be8f689c6902243b310e831877fd9d5cad7dbdfa025413de295c855c00c04
bec97ea07b1dc145547dd22957c21ef6889f54c8f318e7bfa3723cde49a598c00b129a21887625b2
5e0fc1ed9ec8dca11428c15d36495373b9ef550ddd4addc490e3597a996ffb1ba336b97cc9361584
7dc0b0a46ba76ddd8eff49f47a8072c80f1460cd846983486770d470c7a8b007a0a3898587c40d77
4039740a3e71a90e1035386d75f9ff45493c432d01d44ddf9d7ff57b12b58c9b942b93ae7bb67b23
df9ac3c04024db178cd4221dc852a34e07582de9b5772f7d337998bc0fa8feaf619fc0a499e0f90c
57f19f850b45345a66900f8aed96b2c67d049437986ab4061ab6cf33f813599d10a8738f98c4a356
cd1edaac8a91390816ecb64a5a722ffd229310ae1540b6d75741ad482b6f3e330e82da43a6ab6df2
f1eeb58ed65aefc0a6320bcdcc1e050ff2648503ad2950806be7d5c7eabd00976a93d2cda1349fbb
bf7b2b8a8c51c95c289d0701bb9379b402949de469667b9cdc19dd6074f333744c7aa7422e9bf697
9c8a87d1d3472144cd5d07169fa97f7011a6882e7c80bea910e1247547fd5a436615775a659adb72
2266153c435a3040d3b148a36eadee3446b4c7b6efdc8a994f3f26a6d7c07b2c29b104ffb38c8af1
d62aaa1b92eae0f161532802bd6bd04bdda2e9411d45a0c62fd77a215bd6f80db60c5ed30eda2fcc
2b9893583342cc48c339515669378a764d1cc43263ffe0e7225f7838cfbc257de3dc54c0b3ac1501
fbca9653bd5d1f93d08cd96afd63ce38403683cc56f6dbe70892291d28bf1231f98397e6066ef8bf
4107f2e251f19248c05d1c8a9d1013c97bd2f5091090e135a177ac2c5ae5a9f9e45ffe03fe722e91
e7accb63cbdaba660e58f5f3dd8120472a6afac7f00780ac964fb61b3f4954091e7bf3b481900555
5ac517a3b03e2029362405387c7dc366545d9083d8aa3cf1bc9f37a874c405bffe7ed481926751a5
ba56be77a9107fdec31b53bd59bd47a7cfa97565c53cbdb22c8917e822342b891b5863e258ed456b
ce17b14e42a9becb25749421d0c48bf1429e3dcefd2718f7152ba76ff98de6aca1f8e4c4196bd24b
5f23696c9be129f7968e757ec90be551772e978274063f198b15ddc60f23b3df50fc8e8bc7d637d8
07c28eeda5d28ca1c266793d1f11e43ffb680792baffc65ed250c2926d6ea879fb29c75c510cb161
8ff38644179a136301de066d2517764ae6a54e34fd8b128830bfc536f6c4368cd4192ee4c15ccd9c
d848ff8af318307ffb7504dce018bee25d1af65b1cb20b97c437d2ed3a2d1bda32f8a03cc624b478
2f22cca3d7f43fac087d733b3054467cf2a30b584f1245f730596978b6835c1bf1f6333e8740b5fe
8c40557a4ed1bc25f6c50a993df36d03eeaab9c00a1076d8c9343897b471e77fc9f486c9718bd2a4
5ba390d00ec3191a994631a9c916bad7810ab37c4334b41f9892d3214392464ae9f25486c0a7a258
e37bef302c9c79c02f87fd6f88cc675eafd38219d6717475872b180c390d7159b33c307a9cd9708d
4a609c3283cc60cd9e0d641065a166cf70a3a56c4495c77c2f76db8f216933ae1560edc322b4774a
364fc170844baed7a4d54dd2724697f486d30862ec4cf687931286ac790ff449cdafa5ad9b2de500
8f268ae5097d5bd2a350dc58cba04aa4374bbd0f50aaccf3040cade06e2fc19d73989eaeda13af53
154b2504f042c85968d6fd805691a71ab3a0472b4b60e94e2b2adc9ed51af9518efe6858a9b1bffa
995ad887af5d09b7303117cc19e1187488966095b96ce2407d1e1c253ef046ef33d95c27ddef1743
63cb796e77b48f99f69c366b2eeb44d1e0f5450e38069614dc39b923040b9648185820c68d1ca5a4
eefdb842bc2e84a07433fbb461d2b676382e54c7595241d327478f4e4914435606218a312fea9d6f
51c612f4e078304d43b28b03f563aa1ed18d71b649e1412dea35cb1e9162326962f680c7df20f5b5
4652322c7da74f2f577653397317f511007293f186f40791f76942696ef90e19f4abf4ef0583d5a8
89d7e0e6c10f0f96152ae5f3ebdd73cb63360cc47955430134abe696823027f4379cdc44fc2a6a94
46addf18d81c751a686aa4c34711bbdeb7e2e65e7637eadb921cae15338b250f0df793a70e636976
001f3d67d92bcc218da5ef5a6e2c1254b5787ef2c1a7dab4431d1435bf9f243f637d8ef2bf703ff0
1e337309790be2a09a669d10a0685bc11bb6e3eabb7e88875ead71adca2fda3ef357f0177904fe27
7f8fff4d4c77532bcc14d6a76aa5fadf22ead3c3256aae650baf2e73e8a9c2c586c02d8b867c8a1c
0f8ca74366a75e6a4fcca6a4b50bc6127da9a52d17dd0fbb9bc69d5fb5fdf39c8f9a865ceafcf389
0db4f354437b87750baca862fc5c6fcab7d190cc92ecb0dd7fec29247b15282c6bbb47b1702e9e4c
27398adbde0bb9f221fbe70e609911502c48734ca91348ce4a316b7a5416c5b5c16a3596aaec8dd6
34edc7a018fc64d9f61e318110b9e1015c36172b4f620103139ae0da3ef0f97cb20d99c4b0f64485
45ea40f99efc027904f59cfa48a1ec2b31e3b145b35c182f49428ab2bbd88421c65c56a268a9e09b
bd3e70494c25fb73b1518cea05c138fc8488497db59f2498950c46e845a21e8d631df99897b93cf4
fd92908ada1c6b8830330d6d6f3cc308f73617ad49e33be9be00601c2af959bf7efddf0fb9e61989
bcbf503f370a7b49fb3316f80ed7f51bf5006fd1d4ce8e6984faa970b24544686e7b8342a42fa8f4
a6dfb7f5dc2de80ea5d431cd42aed013c633d9f407e8029634292541b3a99470
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	STKC	BIT	decimal	256
	STKD	SWORD	decimal	64
	STKT	TIMER	decimal	64
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
	Run	PROGRAM		0	-1
	Glue	PROGRAM		0	-1
	tst_stkBufferY	TASK		0	-1
	TestTimer	PROGRAM		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	STKD43	0
SET	STKC10
RST	STKC11
RST	STKC12
RST	STKC13
RST	STKC14

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection / Compression  State"
#END

STRE	STKD43	1
RST	STKC10
SET	STKC11
SET	STKC12
RST	STKC13
RST	STKC14

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	STKD43	2
RST	STKC10
RST	STKC11
SET	STKC12
SET	STKC13
RST	STKC14

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	STKD43	3
SET	STKC10
RST	STKC11
RST	STKC12
SET	STKC13
SET	STKC14

// Rung Stkr_SetState#5
// Offset 36
NOP

// Rung Stkr_SetState#6
// Offset 37
NOP

// Rung Stkr_SetState#7
// Offset 38
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	STKD42	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X4
ANDN	X5
AND	X7
AND	X6
AND	X8
AND	X9
MATH	STKD42	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	STKC0
AND	STKC1
AND	STKC2
AND	STKC3
AND	STKC4
AND	STKC5
MATH	STKD42	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	STKC0
ANDN	STKC1
ANDN	STKC2
ANDN	STKC3
AND	STKC4
AND	STKC5
MATH	STKD42	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	STKC0
ANDN	STKC1
ANDN	STKC2
ANDN	STKC3
ANDN	STKC4
ANDN	STKC5
MATH	STKD42	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X4
RST	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection / Compression "
#END

STRE	D50	1
RST	X4
SET	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	2
SET	X4
RST	X4
RST	X7
RST	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	3
SET	X4
RST	X4
RST	X7
RST	X6
RST	X8
RST	X9

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X4
SET	X4
SET	X7
SET	X6
SET	X8
SET	X9

// Rung tst_mock_stkr#6
// Offset 50
NOP

// Rung tst_mock_stkr#7
// Offset 51
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
HALT	NewStker
OUT	C700

// Rung $Main#2
// Offset 9
STR	C205
RUN	Run
NOT
HALT	Run

// Rung $Main#3
// Offset 14
STR	C201
DUPBOOL
ANDPDPF
RUN	Glue
POPBOOL
NOT
HALT	Glue

// Rung $Main#4
// Offset 22
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// Rung $Main#5
// Offset 30
STR	C204
ENTASK	tst_stkBufferY	0x0	0	0x1
NOT
HALT	tst_stkBufferY

// Rung $Main#6
// Offset 37
STR	C202
RUN	TestTimer
NOT
HALT	TestTimer

// Rung $Main#7
// Offset 42
STR	C205
RUN	Run
NOT
HALT	Run

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block stkr_BufferX
$TSK	stkr_BufferX

// Rung stkr_BufferX#1
// Offset 0
STR	X4
ONDTMR	STKT0	STKD0	STKC0

// Rung stkr_BufferX#2
// Offset 4
STR	X5
ONDTMR	STKT1	STKD1	STKC1

// Rung stkr_BufferX#3
// Offset 8
STR	X7
ONDTMR	STKT2	STKD2	STKC2

// Rung stkr_BufferX#4
// Offset 12
STR	X6
ONDTMR	STKT3	STKD3	STKC3

// Rung stkr_BufferX#5
// Offset 16
STR	X8
ONDTMR	STKT4	STKD4	STKC4

// Rung stkr_BufferX#6
// Offset 20
STR	X9
ONDTMR	STKT5	STKD5	STKC5

// End of Code Block stkr_BufferX
$TSKEND	stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"#################################################<br>"
"## Error handling ###################################<br>"
"#################################################<br> "
#END

STR	X2
TIMEDOUT	1000	STKC30	0x1

// Rung NewStker#5
// Offset 16
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STRN	X32
ORN	X0
ORN	X1
STR	Y0
ANDN	STKC30
ORSTR
OUT	STKC120
OUT	Y0
OUT	C10

// Rung NewStker#6
// Offset 25
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	STKC122
OR	STKC123
OUT	STKC121
OUT	Y1
OUT	C10

// Rung NewStker#7
// Offset 30
STR	STKC30
ANDE	STKD42	0
RST	STKC122
RST	STKC123

// Rung NewStker#8
// Offset 37
NOP

// Rung NewStker#9
// Offset 38
STRN	C2
ANDN	C8
ANDN	C9
ANDN	STKC30
ANDNE	STKD42	0
SET	STKC123

// Rung NewStker#10
// Offset 47
STRN	C2
ORN	C8
ORN	C9
AND	STKC30
ANDN	STKC120
ANDNE	STKD43	0
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"

// Rung NewStker#11
// Offset 65
#BEGIN FMT_COMMENT 
"#################################################<br>"
"## Start up ########################################<br>"
"#################################################<br> "
"<br>Pre-Run Setup"
#END

STRN	STKC121
OR	STKC30
ANDN	STKC120
OUT	Y2

// Rung NewStker#12
// Offset 69
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STR	C2
OR	C8
OR	C9
ANDN	STKC120
ANDN	STKC121
ANDN	STKC30
STR	STKC100
STRE	STKD42	0
ANDE	STKD43	0
ORSTR
ANDSTR
OUT	STKC100

// Rung NewStker#13
// Offset 87
NOP

// Rung NewStker#14
// Offset 88
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#15
// Offset 96
STR	STKC100
ANDN	STKC31
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#16
// Offset 102
STRN	STKC100
OR	STKC31
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	STKC40
RST	STKC41
MATH	STKD45	"0"
MATH	STKD40	"0"
MATH	STKD41	"0"
MATH	D2	"0"
MATH	STKD43	"0"
MATH	STKD50	"0"
MATH	STKD51	"0"

// Rung stkr_CycleState#2
// Offset 46
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the time the next cam cycle "
"comes around<br>"
"        it will thorw a Cam Latch Missed error (our cycle "
"is taking too long)<br>        "
#END

STRPD	X3
AND	STKC43
AND	ST2
SET	STKC123
RST	STKC43

// Rung stkr_CycleState#3
// Offset 52
STRPD	X3
SET	STKC43

// Rung stkr_CycleState#4
// Offset 55
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRE	STKD42	STKD43
ANDGT	STKD42	0
AND	STKT40.Done
STRE	STKD42	0
AND	X3
STR	STKT40.Done
ORN	STKC40
ANDSTR
ORSTR
ANDNE	STKD42	-1
SET	STKC45
SET	STKC40

// Rung stkr_CycleState#5
// Offset 79
STR	C2
OR	C8
OR	C9
ONDTMR	T1	4500	C4

// Rung stkr_CycleState#6
// Offset 85
STR	C4
AND	STKC45
SET	STKC41
RST	STKC45

// Rung stkr_CycleState#7
// Offset 89
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	STKC41
DUPBOOL
ANDE	STKD42	0
MATH	STKD45	"1"
MATH	STKD40	"STKD32"
MATH	STKD41	"STKD33"
RST	STKC43
POPBOOL
DUPBOOL
ANDE	STKD42	1
MATH	STKD45	"2"
MATH	STKD40	"STKD34"
MATH	STKD41	"STKD35"
POPBOOL
DUPBOOL
ANDE	STKD42	2
MATH	STKD45	"3"
MATH	STKD40	"STKD36"
MATH	STKD41	"STKD37"
POPBOOL
ANDE	STKD42	3
MATH	STKD45	"0"
MATH	STKD40	"STKD30"
MATH	STKD41	"STKD31"

// Rung stkr_CycleState#8
// Offset 185
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	STKC40
ANDGT	STKD50	0
STRPD	STKC41
TMRA	STKT40	STKD40

// Rung stkr_CycleState#9
// Offset 194
STRPD	STKC41
MATH	STKD50	"STKD40"

// Rung stkr_CycleState#10
// Offset 202
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	STKC40
ANDGT	STKD51	0
STRPD	STKC41
TMRA	STKT41	STKD41

// Rung stkr_CycleState#11
// Offset 211
STRPD	STKC41
MATH	STKD51	"STKD41"

// Rung stkr_CycleState#12
// Offset 219
STR	STKC40
AND	STKT41.Done
ANDGT	STKD41	0
SET	STKC122

// Rung stkr_CycleState#13
// Offset 226
#BEGIN FMT_COMMENT 
"4. Set the new Cycle State"
#END

STR	STKC41
CALL	Stkr_SetState	0x1	DST511	"3 STKD45 STKD43 1"	"3"
RST	STKC41

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	STKC10
ONDTMR	STKT15	STKD15	STKC15

// Rung stkr_BufferY#2
// Offset 4
STRND	STKC15
OFFDTMR	STKT16	STKD16	STKC16

// Rung stkr_BufferY#3
// Offset 9
STR	STKC11
ONDTMR	STKT17	STKD17	STKC17
ANDNDPF
OFFDTMR	STKT18	STKD18	STKC18

// Rung stkr_BufferY#4
// Offset 17
STR	STKC12
ONDTMR	STKT19	STKD19	STKC19
ANDNDPF
OFFDTMR	STKT20	STKD20	STKC20

// Rung stkr_BufferY#5
// Offset 25
STR	STKC13
ONDTMR	STKT21	STKD21	STKC21
ANDNDPF
OFFDTMR	STKT22	STKD22	STKC22

// Rung stkr_BufferY#6
// Offset 33
STR	STKC14
ONDTMR	STKT23	STKD23	STKC23

// Rung stkr_BufferY#7
// Offset 37
STRND	STKC23
OFFDTMR	T210	STKD24	C2005

// Rung stkr_BufferY#8
// Offset 42
STR	STKC15
OR	STKC16
OUT	Y9

// Rung stkr_BufferY#9
// Offset 45
STR	STKC17
OR	STKC18
OUT	Y8

// Rung stkr_BufferY#10
// Offset 48
STR	STKC19
OR	STKC20
OUT	Y5

// Rung stkr_BufferY#11
// Offset 51
STR	STKC21
OR	STKC22
OUT	Y4

// Rung stkr_BufferY#12
// Offset 54
STR	STKC23
AND	C2000
STR	C2005
AND	C2001
ORSTR
OUT	Y3

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	STKC31

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	STKC100
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	STKC100
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	STKC100
AND	STKC120
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	STKC100
RST	X0
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X0
AND	C409
AND	STKC100
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	STKC123
ANDN	STKC123
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	STKC123
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	STKC100
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	STKC123
AND	C410
AND	STKC100
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 194
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	2
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	3
SET	C412
POPBOOL
AND	C412
ANDN	C413
ANDE	D12	-1
SET	C413

// Rung TestNewStker#20
// Offset 238
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 STKD42 D12 1"

// Rung TestNewStker#21
// Offset 249
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 259
NOP

// Rung TestNewStker#23
// Offset 260
NOP

// Rung TestNewStker#24
// Offset 261
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 STKD43 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 STKD43 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 STKD43 1"	"3"
POPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 STKD43 1"	"3"

// Rung TestNewStker#25
// Offset 316
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y9
ANDN	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDN	Y9
AND	Y8
AND	Y5
ANDN	Y4
ANDN	Y3
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
AND	Y9
ANDN	Y8
AND	Y5
AND	Y4
ANDN	Y3
SET	C411
POPBOOL
AND	C411
ANDN	C412
AND	Y9
ANDN	Y8
ANDN	Y5
AND	Y4
AND	Y3
SET	C412

// Rung TestNewStker#26
// Offset 355
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 364
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 365
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	STKC31
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 398
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	STKC31
RST	STKC31

// Rung TestNewStker#30
// Offset 402
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 424
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	STKC100
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 438
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X2

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X0
SET	X32
SET	X1
SET	X2
OUT	C407

// Rung mock_stkrStart#3
// Offset 9
STRN	X2
ANDE	STKD43	0
SET	X3

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	STKD42	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	STKD43	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 STKD43 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X3
POPBOOL
ANDN	C420
RST	X3

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y9
ANDN	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y9
AND	Y8
ANDN	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y9
AND	Y8
AND	Y5
ANDN	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y9
ANDN	Y8
AND	Y5
AND	Y4
ANDN	Y3
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y9
ANDN	Y8
ANDN	Y5
AND	Y4
AND	Y3
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	STKD40	0
ANDPDPF
MATH	D26	"(((STKD41 - 5) - STKD40) * RANDREAL()) + STKD40"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

// Beginning of Code Block Run
$PRGRM	Run

// Rung Run#1
// Offset 0
#BEGIN FMT_COMMENT 
"#############################################<br>"
"## Buffers #####################################<br>"
"#############################################<br> <br>Main "
"Drive On<br> "
#END

STR	X16
STR	Y17
AND	X17
AND	X24
ORSTR
OUT	Y17

// Rung Run#2
// Offset 6
#BEGIN FMT_COMMENT 
"Matt Fan On"
#END

STR	X18
STR	Y18
AND	X19
AND	X25
ORSTR
OUT	Y18

// Rung Run#3
// Offset 12
#BEGIN FMT_COMMENT 
"Chip Fan On"
#END

STR	X20
STR	Y19
AND	X21
AND	X26
ORSTR
OUT	Y19

// Rung Run#4
// Offset 18
#BEGIN FMT_COMMENT 
"Fife On"
#END

STR	X27
OUT	Y27

// Rung Run#5
// Offset 20
#BEGIN FMT_COMMENT 
"End Seal Drop Manual"
#END

STR	X23
OR	C11
OUT	Y32

// Rung Run#6
// Offset 23
STR	C13
OR	C14
OUT	Y48

// Rung Run#7
// Offset 26
STR	C15
OR	C16
OUT	Y33

// Rung Run#8
// Offset 29
#BEGIN FMT_COMMENT 
"Tape Glue Manual"
#END

STR	X49
OUT	C13
OUT	C15

// Rung Run#9
// Offset 32
STRPD	X35
STR	ST2
CNT	CT7	D1

// Rung Run#10
// Offset 37
#BEGIN FMT_COMMENT 
"Tape Glue Auto"
#END

STR	C12
OUT	C16
AND	X35
OUT	C14

// Rung Run#11
// Offset 41
#BEGIN FMT_COMMENT 
"Bell minimum ring"
#END

STR	C3
OR	C5
OR	C7
TMR	T2	2000

// Rung Run#12
// Offset 46
STR	T2.Timing
ANDN	T2.Done
OUT	Y16

// Rung Run#13
// Offset 49
#BEGIN FMT_COMMENT 
"Pre Run Check"
#END

STR	Y17
ANDN	Y20
ANDN	Y21
OUT	C6

// Rung Run#14
// Offset 53
#BEGIN FMT_COMMENT 
"Run Circuit<br> "
#END

STR	X11
ANDN	X12
ANDN	X13
AND	C6
OR	C3
AND	X10
ANDN	C10
OUT	C3
ONDTMR	T4	3000	C2

// Rung Run#15
// Offset 64
#BEGIN FMT_COMMENT 
"Thread Circuit"
#END

STR	X12
ANDN	X11
ANDN	X13
OR	C5
AND	X10
ANDN	C10
OUT	C5
ONDTMR	T5	3000	C8

// Rung Run#16
// Offset 74
#BEGIN FMT_COMMENT 
"Jog Circuit"
#END

STR	X13
ANDN	X11
ANDN	X12
AND	X10
ANDN	C10
OUT	C7
ONDTMR	T6	3000	C9

// Rung Run#17
// Offset 83
#BEGIN FMT_COMMENT 
"Run Function"
#END

STR	C2
AND	X10
ANDN	Y21
DUPBOOL
AND	X48
OUT	C12
POPBOOL
DUPBOOL
AND	X29
ONDTMR	T3	10000	C11
POPBOOL
AND	ST1
OUT	Y20
OUT	Y28

// Rung Run#18
// Offset 99
#BEGIN FMT_COMMENT 
"Thread Function"
#END

STR	C9
OR	C8
AND	X10
ANDN	Y20
OUT	Y21
OUT	Y29

// End of Code Block Run
$PGMEND	Run

// Beginning of Code Block Glue
$PRGRM	Glue

// Rung Glue#1
// Offset 0
STR	ST1
DTOFFSET	SDT0	-18000	UDT1

// Rung Glue#2
// Offset 4
STR	ST1
DTOFFSET	SDT0	86400	UDT2

// Rung Glue#3
// Offset 9
STR	ST1
DTOFFSET	UDT2	-300	UDT3

// Rung Glue#4
// Offset 13
#BEGIN FMT_COMMENT 
"#################################<br>"
"##  Day Schedule ###################<br>#################################"
#END

STRE	UDT2.DayOfWeek	0
AND	ST2
STRE	UDT2.DayOfWeek	1
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	2
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	3
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	4
AND	ST1
ORSTR
STRE	UDT2.DayOfWeek	5
AND	ST2
ORSTR
STRE	UDT2.DayOfWeek	6
AND	ST2
ORSTR
OUT	C20

// Rung Glue#5
// Offset 55
#BEGIN FMT_COMMENT 
""
"#################################<br>"
"##  Switch & Heat Behavior  ###########<br>#################################"
#END

STR	C20
OR	X31
AND	X30
SET	C21

// Rung Glue#6
// Offset 59
STRN	X30
RST	C21

// Rung Glue#7
// Offset 61
STR	C21
ANDE	UDT1.Hour	0
ANDE	UDT1.Minute	0
OUT	C22

// Rung Glue#8
// Offset 71
STR	C22
OR	C23
ANDN	C24
OUT	Y34
OUT	Y36
OUT	C23

// Rung Glue#9
// Offset 77
#BEGIN FMT_COMMENT 
"#################################<br>"
"##  After hours saftey shut off  "
"##########<br>#################################"
#END

STR	C2
OR	C5
OR	X13
NOT
TMR	T0	0

// Rung Glue#10
// Offset 83
#BEGIN FMT_COMMENT 
" "
#END

STRGT	SDT0.Hour	18
ORLT	SDT0.Hour	4
ANDGT	T0.Acc	3600000
OUT	C24

// End of Code Block Glue
$PGMEND	Glue

// Beginning of Code Block TestTimer
$PRGRM	TestTimer

// Rung TestTimer#1
// Offset 0
NOP

// Rung TestTimer#2
// Offset 1
STRE	SDT0.DayOfWeek	6
MATH	D4	"0"
NOT
MATH	D4	"SDT0.DayOfWeek + 1"

// Rung TestTimer#3
// Offset 20
STRGE	SDT0.DayOfWeek	D8
ANDLE	SDT0.DayOfWeek	D9
ANDLE	SDT0.Hour	D10
ANDLE	SDT0.Minute	D11
STRGE	D4	D8
ANDLE	D4	D9
ORSTR
OUT	C30

// Rung TestTimer#4
// Offset 46
STR	C30
OR	X11
OR	C31
AND	X9
OUT	C31

// Rung TestTimer#5
// Offset 51
STR	C31
ANDN	C34
ANDGE	SDT0.Hour	UDT0.Hour
ANDGE	SDT0.Minute	UDT0.Minute
OUT	C33
SET	C34
ANDNDPF
RST	C31

// Rung TestTimer#6
// Offset 65
STRE	SDT0.Hour	0
ANDE	SDT0.Minute	0
RST	C31

// Rung TestTimer#7
// Offset 74
NOP

// Rung TestTimer#8
// Offset 75
STR	C36
OR	C33
STR	C35
ANDN	C36
ORSTR
OUT	C35

// End of Code Block TestTimer
$PGMEND	TestTimer

#BEGIN ELEMENT_DOC
"X0","","","Air SW on Stacker"
"X1","","","Air Pressure OK"
"X2","","","Stacker Reset PB"
"X3","","","Latch Cam Start Cycle"
"X4","","","Eject In"
"X5","","","Eject Out"
"X6","","","Transfer Operator Side"
"X7","","","Transfer Drive Side"
"X8","","","Operator Side Load In"
"X9","","","Operator Side Load Out"
"X10","","","Emergency Stop"
"X11","","","Run"
"X12","","","Thread"
"X13","","","Jog"
"X14","","","Encoder"
"X15","","","*"
"X16","","","Main Drive Start"
"X17","","","Main Drive Stop"
"X18","","","Matt Fan Start"
"X19","","","Matt Fan Stop"
"X20","","","Chip Fan Start"
"X21","","","Chip Fan Stop"
"X23","","","End Seal Drop Manual"
"X24","","","Main Dr Stop"
"X25","","","Matt Fan Stop"
"X26","","","Chip Fan Stop"
"X27","","","Fife On"
"X28","","","Poly On"
"X29","","","Auto Drop End Seal"
"X30","","","Auto Arm Tape Glue HTR"
"X31","","","Manual Arm Tape Glue HTR"
"X32","","","Guard Door SW"
"X35","","","PLS Pulse"
"X48","","","Glue SW Auto"
"X49","","","Glue SW Manual"
"Y0","","","Stacker Jam Light"
"Y1","","","Timing Fault Light"
"Y2","","","Gradual Start Valve"
"Y3","","","Operator Side Load Sol"
"Y4","","","Transfer Sol"
"Y5","","","Compression Sol"
"Y8","","","Ejection Sol"
"Y9","","","Vertical Bar Sol"
"Y10","","","Machine Stop Interlock"
"Y16","","","Bell"
"Y17","","","Main Drive"
"Y18","","","Matt Fan"
"Y19","","","Chip Fan"
"Y20","","","Run"
"Y21","","","Jog"
"Y22","","","NO CARD"
"Y23","","","NO CARD"
"Y26","","","End Seal Drop"
"Y27","","","Fife"
"Y28","","","RCR"
"Y29","","","JCR"
"Y32","","","End Seal Drop"
"Y33","","","Tape Glue Motor"
"Y34","","","Tape Glue HTR"
"Y36","","","End Seal HTR"
"Y48","","","Tape Glue Sol Manual"
"Y49","","","Tape Glue SOL Auto"
"Y50","","","Tape Glue HTR"
"Y51","","","End Seal HTR"
"Y69","","","Tape Glue Pump On"
"Y72","","","Tape Power Relay"
"C1","","","Bell Minimum Ring"
"C2","","","Machine Run"
"C5","","","Machine Thread"
"C6","","","Pre Run Check"
"C8","","","Machine Thread"
"C9","","","Machine Jog"
"C20","","","Auto Arm Tape Glue HTR"
"C21","","","Manual Arm Tape Glue HTR"
"C22","","","Tape Glue HTR On"
"C24","","","Turn Off Heaters"
"C30","","","Standard Work Week Day"
"C31","","","Arm Auto Warm Glue Lamp"
"C32","","","Auto Warm Glue Armed Lamp"
"C33","","","Auto Heat Glue"
"C34","","","Auto Glue Triggered Today"
"C36","","","Manually Heat Glue"
"C200","","","Enable Stacker Program"
"C201","","","Enable Glue Program"
"C203","","","Enable Stacker Test"
"C205","","","Run"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D30","","","Vertical Bar On Buffer"
"D31","","","Ejection On Buffer"
"D32","","","Compression On Buffer"
"D33","","","Transfer On Buffer"
"D34","","","Load On Buffer"
"D40","","","Vertical Bar Off Buffer"
"D50","","","Stacker Operation Mock State"
"STKC0","","","Eject In Eye Buffer"
"STKC1","","","Eject Out Eye Buffer"
"STKC2","","","Transfer Drive Side Eye Buffer"
"STKC3","","","Transfer Operator Side Eye Buffer"
"STKC4","","","Load In Eye Buffer"
"STKC5","","","Load Out Eye Buffer"
"STKC10","","","Stacker Operation Vertical Bar SOL Buffered"
"STKC11","","","Stacker Operation Ejection SOL Buffered"
"STKC12","","","Stacker Operation Compression SOL Buffered"
"STKC13","","","Stacker Operation Transfer SOL Buffered"
"STKC14","","","Stacker Operation Load SOL Buffered"
"STKC15","","","Stacker Vertical Bar On Buffer"
"STKC16","","","Stacker Vertical Bar Off Buffer"
"STKC17","","","Stacker Ejection Bar On Buffer"
"STKC18","","","Stacker Ejection Bar Off Buffer"
"STKC19","","","Stacker Compression On Buffer"
"STKC20","","","Stacker Compression Off Buffer"
"STKC21","","","Stacker Transfer On Buffer"
"STKC22","","","Stacker Transfer Off Buffer"
"STKC23","","","Stacker Load On Buffer"
"STKC24","","","Stacker Load Off Buffer"
"STKC30","","","Stacker Reset Press"
"STKC31","","","Stacker Cycle Disconnect"
"STKC40","","","Begin Timers"
"STKC41","","","Transition State"
"STKC42","","","Stacker Start Up Cycle Delay"
"STKC43","","","Latch Cycle Open"
"STKC44","SET","",""
"STKC100","","","Stacker Run State"
"STKC120","","","Stacker Pre Run Error State"
"STKC121","","","Stacker Run Time Error State"
"STKC122","","","Stacker Operation Transition State Timeout Error"
"STKC123","","","Stacker Operation Missed Cam Latch Cycle Error"
"STKD15","","","Vertical Bar On Buffer"
"STKD16","","","Vertical Bar Off Buffer"
"STKD17","","","Ejection On Buffer"
"STKD18","","","Ejection Off Buffer"
"STKD19","","","Compression On Buffer"
"STKD20","","","Compression Off Buffer"
"STKD21","","","Transfer On Buffer"
"STKD22","","","Transfer Off Buffer"
"STKD23","","","Load On Buffer"
"STKD24","","","Load Off Buffer"
"STKD30","","","Reset State Lockout"
"STKD31","","","Reset State Timeout"
"STKD32","","","Eject State Lockout"
"STKD33","","","Eject State Timeout"
"STKD34","","","Transfer State Lockout"
"STKD35","","","Transfer State Timeout"
"STKD36","","","Load State Lockout"
"STKD37","","","LoadState Timeout"
"STKD40","","","Stacker Transition Lock Out ms"
"STKD41","","","Stacker Transition Time Out ms"
"STKD42","","","Stacker Operation Detected State"
"STKD43","","","Stacker Operation State Set"
"STKD45","","","Stacker Operation Next Cycle State"
#END

