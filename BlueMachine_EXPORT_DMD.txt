// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
b7a3ad369fefd6243ee8afac3b77972285c1f4310caea97bf98a9d7e67206b2b038c62c51d027a4f
f43fcbcf3931c426ebc8b2e0fba3d6a02ac8fa175ceb79bac57b5458181e3437467ea3a947e2c3ff
c8a3acb56954e5b604c68683629b76ce8558e6f503d8e4a2e7bbeea8d038848d039008e7015c99a4
0706e08a6ca2577eb3d64185d4a2553325a77cc02d5b8791fd7315498d241805a1f0a1d53b579a79
ba2478d224ec2309a942ce0203b7f132d6055337fa293717b3c171b29785542499629fced42f7bfd
9d9886cec348efde8bdb235c687f14c8e8e4879fbe7547b2e3b9b742672d497a82eab7bc55c2c675
a6dff9ffcd70ebda59316628cac5a59199bbd48391d0d30291452af2d26d39aad5ca0b9bf4b48b75
6ab919452d4632d42be4240fee2549fc050c1db37eb068879e70b1efe0c39ee97bacc8ebab0e7449
adf7e5517a1ba18bb9dc1df2690da9693a738c33d177d1703c911a85a0d31e4bb0827e7e051e8b4d
0d10159d174fdeec69ea86ca7e9675881b579d9010f92c5d81748fd93301df4f627c566876c64eab
fe02f2f288298d7d24f96bce275b2f929e2f97b37359dc47481fa07feeb66d076f2ec80c9df26ff0
38e38b6615f5a285094e20a5c460a644d631d3c4a19dabf95252884b3b0e2190b729adfb9da39cde
81df938322c15ac8f7fc92f2e4fb8e56237e9fd0f4f8af815d600e70f02efb31754a8949a1760ea5
dfd76dad6c2fb34c940c4b3ca68f64631d76eb37a4942416c0d2136eff250068d09a8fcf45c0beb7
1941e7bc1aebfd83e73702970763531f658d4ff17d604f06deb572fc1f0ad37af0a265cdef2bf881
2e4f8c2d899978d6ee0af526a67cfaa1bccebcf2a0159301221b0635d6e4cb3867e40777e6076b05
3de17965736b14b3b248097eee6dde1ab6b7df623617c36924d3fbfa464a2d686254074016d351ec
04fbd4e106a85a5937df18141ac9cecc2b43dd353a593280042385aeb845de44e52c9b8cbba5baae
da701d83794b22e14308061638e4a2d4f4dc8aaa3c638a1c650930ae6e2f132e9f1d5b0506bb51c1
52d0004effb8c1e8cb49edc2bf872b6b7877caf766965ae8657302aaed376f94ec00dec0b7b7fa0b
f9bcc672cf57754d05af3d697b717cbb3c64899580bcca2c57db333f58c7eea1651dd81d07cc3bb9
2bcfbe4375bc416cee9fccdddf2df5ad8be318436b8e8c821dd5f8b3ef1afc9c792a17db93e3e19e
db9858480b8ef2af6bf440df8f58bdca5ebffa02195922c45e4cbcfb3b539edb565da7612b38ed2e
fcdb30e844a69dabfe405738d5bf5827f3f907f731a00c29288a13ec02cb0226b0e5e49fadbf9a97
4d541f7a3e333fdef5da4cbf0f97385b3211b38837b45674ee48d104f587a402be16bd10e7a3aff5
8b4993818245668f7b38843f720b04d32f606a433655ad0d1ee6f70e83f64e49ea46df3f846a94e2
575ea333d8ed6d9351f879bd39e3a581b397f99dfbff8b540f901dd402c9effc314619dc57ee42bc
5dcbbd193e9a3d20911a9c146735fb2f7c969b94be0b58a78a380413e04b49a85e2600c115898176
3285ea0ba9c042ec64538c1490484a04e5e5a8ada1c9bce7188cd0d537aab29d10f92741e488ff8b
7419f70f916cce1b23a7a81f2cae3b2594d1b10d81d3deb1a424e53ff94cceed0b19d735a33480f4
263149429e1e9e426711327f318a4c2b1613b4c51a35f3d872e0797710bfa00d80f1f3ada79c8f16
9f6a004d67f6f0ec553d5c1fb7a2d7c076fcc0f3e079f0c5af021a5bad696b9006056c8c2f3a8d07
3b081b820b5a5b23dd93da97f65c4badc9b324fb1af0e63a4e323024c8bda2d57bb4424be549406b
e3e0469ecf41f893a8f29277a9db062149b230b7d95e7c67641c714643976083614a2b013882d709
e538d8783d754f9d4847b297b9762671958d029e3748c6a3bf42998b28285ddaadd1508a55b550ae
1a94a8275080ccc39ca2fe3bb8a35ea22399ceb58b6cb85d9b3f0707608f479753a5c150b1a9e3db
336fa2eb68871982c21e0458f015361778c4ed59adda240ccb5e8bcc1992a670b6bcbc1423560714
e70db7b997a74cdd8741490e8982a98ed222e62c667dde202fae7413958a15cfb9d90a2696e88a6c
0c9f87862c7fe4a768426fa6b32404534183cf8f0c91c8938bceae4a3cf9724a2599badeb2d0b14e
59a3e536599a25951a42804cac4af73f6916061a58af53a941616719e0212d879822c9ad0b4fdab3
b50d168cb1d0549c7754148f251af6e27bfb6ca0a7aae7c2c73903cae3f489ad93303ad11ab1e178
e03ccf25490766a513a473963a4048cbcbf9920b0eef088c9143793aa8bd198934ed6b83a23196f6
7287670e3c57edad5c5808f0b87406134e9c20279dce593f6dd6ac1e15740cde67576f258804e54b
44d681d5c8e81c78c8d459284b6e236a11a5930e3a82ce29c9f48af49488cac1cdadf178eb7f36b3
318a1e03358ca9eba0f82b0c35d02095da70e349be35e297346c477a333d6b2b64b17e0aaa5a34e1
a3337a38b3b9d0cbe807ff87fd6c756760b322f0ca360b71c23e7fdca12b2e5c93d5450c8169a2b9
5b9af6b9ee856a908042327713583eb971608b51245ad3b574a7c243643e5baa4d493b70d8bf1635
ecd7b28c7154fbb07e337d9c57195768f833e2e712380504668c3629efb62537b21ccb96becace78
a610602b4841f4684b988f8f251b9cbb72409b33bb9d51399ef236e9395e78c2d06009f3dfca964f
1c7d7c77dea27dd838625093ce4e6fcdb1b2a752fa5604d82852fe3054b71367af95d6990ac87ec7
f861215d556f906125aaaa02a4e6d42abafec04d24b53d9600a0f2d80fd95fbf09aa73e543ed4b74
9cce14e3df0e7e078cb9274f2146251f48dbcc973596ae4ee3fe7550e149ae0d49141b7ddf3527e8
0e73c3f0967b1249ae031cdd831123b5952200f16760e41cc01d51c783c34af686129b6a5f8aab8a
48e90b68c8883ba1fa24745193da0dd539855bc1d3a7d37a91a949823779fcde52a78d75695b2d6d
0e69a3826740f0aa5329da0d276ff420c65f5e2118dd7bde81aabb9e4b16415efe8375631c825f45
2a473b3ad0d36c4496e1e66b43dc64ad59eb4303ce99caf50ec50fba11a08fe19b0be4b38119e448
f0e4ffaa2ea2e15de9a734771f00ed3a721a4118cd57b6b6cb13e170c681a6c84b8da5419f151dbd
a9e69a1675fef9fe339b9919dc1cc1e3651268aa55ff451e2d28bd0f548022abfff0f8beed2d3cc6
455c398e0603b37de1c918d8d0d7e77d4752ab13a5f87dcff4eb4b3648ea3425a588abecff6fddcd
39870bda8d87f745526a1f966939a06f945eed4cd6228a5df76cec0e64850fca89833230bff2c70e
47c42b55ec730cbcf8357b9f84cab63ad9804e2b04b90faf82634c6672c208d60f8cc4a4a5ab2c47
516bb48c7c260f92cd59a99d53503ad9a09bee0c35e3e18861dcd6dcdce7c05ecc8366c3c9208c16
359b4b895e743c19b99a34dc7c34baadfff5cc265fa4d597ed6e119678abedd4e0a001dbcfd0dbad
3f00dbc231c47a3dc73b92001c35445432a2dee24c2214570875201a1e3cd9c63f234ad01fc9de75
df26198ab6461c347989b7798ac911d69fd8d4a4ab9b4d4fa6407d326d10c5f83ce0fa62292e9dc0
a5019d6d4156d6ec820778415ba9566af6f92b476a74468cfdbf868c1661d00dfe10f95911d36566
b9817193fa34cff13fcc839ba412d26c0bde3549395bec577ddc4643b3c0a7fc296e2eb5ca3a2cb3
6f7016391b5c849d54b7526eef835b75d8c5cfdc38c0984ed4c5016a282212d8ed9f189e2f6ca667
8d6c82df4bbb4fc2b2da39408b7ade4e320e204d3b232929d2e8ecca2f30494e13e9ae3d48e7a1c7
e26ac76ca6bffc09b7f05478f1637f561baaf59f1c702806b3f7a8d50031f5243ea6ede231c10e94
ff0b8a3f151148ccc40a1ccf0f15b5b7d456df6ae9da11dff67328cfb2b6bcbc477bff743bdebbbd
ce10df091ee2206914c9b7fbe8fc4cb99f409324dce43236b31b95fe7d11b997b206a67ac37936e4
5186fc068843775eada7b882fca13e4ad2a3d15b3dd60b9f53ebfa983ad22cf28da7e9b11e5d63cc
af95244c031632c1413e9d5ef3f0e16fa017d6ab3d783360ce73aec13289a7befe4cbd430184f94a
5935242078e71e27426ead639260add346199b63a38109219897ecf60f757c65c7db189df5bf0c17
cfd18f3965d11fae87b8a112f5145b1b9ba4a24ad2ebf1ff86177256f66e263b96dec458f37a427d
4c9d2fd8b43f42eff36d12c03a1a5270c655ec2b7ec862e43a42412dd95763b6e990c5f7f3fe4232
b35047d70530388904ee7a0e6764d975b5934b370917fd8d5dff15f2d9f366a4db4163650bfabbc1
a4b4baa96d006dcc6543ee5e50e37a2fa24e2227e07d228ce2445619dcb254898510052e9c2feccb
db21a06c379ee3f15410e6a533442d3401fbcffc338732d7ef0388a10a096ebd7e12072ea2832111
286c927705e33e44ee9ac5c69adcac0521a7ea63c8c1c101cca5d509cf768207ebccec593c9100bd
2d377df949eb798247c78fe5e15d34fe01556f980e57723aaf9026030148a56cabea354d2ebdd8ce
56a731ea1702fefca9e9eadd51e03d13aceb24511979b6233d58fadcdf942e78d08d8aedb1c39c91
c6df4429f70e1a02d1e95b1cce43e159ac3566e29c2303d7f87f0ec123beb6c7c4fbd211afedf220
4fe8a105493d91216dac7ec23f67f0c84671d20359b18a5e9d807a80e8ce7cb7f4f8d69516be4144
0a94d693149c0c3599af9abd8dd93c0076eb42318bfdf566ba7c871b1f9dc26760faa0894291d25a
fb01f8d1965f83458e121694411bbadedceab55dedf6054291d2011c1166285a456eab3409d9310b
9f09b0874e436c2b1dfe0fdcd60baef281e5a0918c475576101ba971dff6f44e9042ffdf8f4ac883
76ce957461204c59d31ab122ab0b1b63ea182dce94fdea6c03eeb5652706eb26bfac4387ca44d4a1
1dd25364773207f495902038c2a5f78643fa3ef87e849504865d1b1eb16fba8d2bd494d077f928f4
be1a0a26bcf572e4fa503d0aead6743fb0dea4b1451730687da52a34aff88953c7989740a3f9b37e
88dfa2182a83444e0b2ebf44abc87e4d50c19a5d122b4ae0b06eb3be03f6d043e5881adc60e322f1
57dc2349038a5087fa70381e78f8316717dc399aa54ac0bb2a6b4552d03dc8aca5bcd7524062d6a5
7e24e249a5b5139a79bb8f352ca09e6c6e8a9e1f891d48575069b7cbbfcc74d562e05fda74a2fad6
3a68a87b700c983898e54827e7c6794759f41012707467c14bfba9eced41fdd5b2e3527200482dc6
153bd4bdff0807fb303b5de54f76f7bc134e87885e4953d71ae75f934757460b76e2af0db105dbf2
1b81b1ea6dbed1a8c368be714544c763035f6d4580bc748a7dcf5eda798637cddd04d8e6278ee66a
121090310803d106a4578f305f1ae27293b5cf8886cf913ffda6ee50433bdc5e4abc64fae81fa7e2
affe90d2c26ad626c63719cbee3f010ab24e67f6bb00367d6cc7b48537a0b404744a830e814fd510
3562bdd5e45bcac57143394f262639eac41f06f1428d360f62a6ae055ad25e484f7855246c90a53f
82a90130ee355d9ad8b3f7aaaf1c076494dbc670ab96e86d4445b06037cdf81340cd6635337aec04
c59763098848d82d93ffe13a248da064766f9479cf05d333e963a92580f779c3241d7ae809353987
78d30ee34fca5f4729bfbb71f6bfa1b51e036e952196422283dabcf6a9da3e1baa473408da24c36d
2eefed70fb1f93c47a1c0fd49fcba0397a020c5be43e38e041cc11288e794c5b5bb7ae2d829b1893
b4aebbf5d0c689ee4c0eb2d771b03b2dc19cd54c1e430912180af4a867aaab2f286fc403307733f8
d06fc3658104815470d34194dbc0e29de50bf93c66ca599e55b408a48a19f5108768a7d6c2bd327e
a94b12a3b95f48071b3daf0c5bdd5477a383cbdafa886987987072675db3a2b699bdda2b2bd72129
3eb7d6253eb138e1869735fabb255729a0e32896710d9f360c563f6613cfba1bbdd003d9c5a8f1b7
b07fff2bb9e5538dfa317920e84bf802bd0305d20c140a3b62b8b281bc2cd3ec6740c96a9c6c1ac8
3ed1de43cddaeab7e5dfaafa44a002cf8bb4690236e7e57323f470017c891c6c85b12a40a6ad0ed4
770eb0e42175859f5a571aefa91e86c3c53c08809ad0859da84ace83e149bc6e4ee2a2285723d3f7
d71fcafd3c5755732e9e79844681e033f447eb4ae28a557214577a0a0017eff8184e21c0e82527c4
d40064efccd21742c5139dd726d4a4e673e69cecab215e6484f026ef3a8d57d0ca63033b4e212e68
ea63c91312f232fe3c581407bf1ee6082fc01fead6037939cbab9cef48969cef476bf338b3499e97
0703ec033145518c39f0c7ca871f9d2a3e2993cd6b37e59378a5c8ddc3e3e341e899e9badcecca87
917cf06944f4d89820cdedee11841d731743bc94692b91b269d96637b74cd56a7c52d380d5f52161
616d430e1847ec87b2a32e9ce6d05de805f6fcc6e626e862c38309f60c6462bd9afc7df20534533a
fc41428b8fd8a27f2c8f587231a36216a2c9520494e68874a972c834c79de465c03365fc8143b05a
925f0e7d18e439ba72e6e6c53e643989469069c82e75aa7903c7236682a06093ed87f2ac6293c9ca
db94dd059a935f3e22aba4775950573126c9763e115c6e857990097d651e6d2fedee87e3308b8988
d02bc0e9dff0900e29d210c3d365ff14e16562e870377c1b12fb0d8aeb7b713784a21d2613ea2b57
b04d50d5c38387c5187bcfa44642001759efca095f758a7c57de4c752bfe9e95445837dfa435ea1b
831a42b381051f20a0c88d2566c331cb3452ab1c188392f594376c715aee906dcdc6fb9f5141525b
0f306fa163e26f1aa541f3a333589cd506b386fb2197011f9393319479e86856a9d7b08805e10040
c26ae2d21971ea7ef0206bb9ee11c386fad045573c9d19f9b53cac188ff89691ce7b14a234c02e3d
7a709d25f5e2b20679d7513646d14371864c2e4ec583a0ab309b47c9a1b5b93bd7e100769c22cf7f
619228c9ef7b8d275574249fca48c0d103b2e5f6ceb7e68c990c6c92f9ec15c81694fdb330e14f8a
969043706ce7ba4ba6db0e0e84e5a2f336a2bdd5cae5370608a4d61c721aef5612ab02de4f466984
eb7a16e53a9956cb10c29e0d15fc6b7895d322565571c40179c9004374074e727ff53d5f081aaa0e
af3529e96f8ba91ca699484dbe93e9713142304c0f55c31b20ee25385513299128d6faf8fa4c8370
9f76ffad4e7a497e335d40b0b59343d9a0b5719fb560ec79a037ef5c00f680ca9e1ff54e4b3129b7
a052526a5d25f6c68f95e4a996df795ea3d4811b7489198e98d220855db96daf7c168d4edb691ca9
136a4297c6455529cc73d0a4b8200ce346b1e809ffc5572d91fc1d2b1cc2691943d6a35d1e883745
dcd968de1b8781e9a7308433e74fc8d02cc7444586f44deba5f8dab0da3e11fd5af1082ba82d4e04
0517e22719d9925e95e9670d3df8b646cac0a1abc794d97d551e5bd1988d183cd983f7c58216e1ca
06cdb13f5565a0a40669b063daae25c33ed52d55f338e851d5037721b1f6e4a52f05fd3992509f8c
cbe2bda2d1489eef1632ad513c1d036d30d53d315591b388e1fe049a66a1a9bdbf606e009cd939e5
646f806f8c017bb46679484025eef36b877838bfb8288c9493fa6c15da72d1c51a6a7c053eaab934
51e678966e0f7ec5f1f04b9eaead467ffedad5d63ced10c1be5a6b5bf82df63cc614b3d4a244aaa4
769944a60948cb4ddf3913b4484047eb4147a0f7b08c86b4735bb51283a3d292ec11638dd07911ef
ba6b55e70081cd2ed4ec56bafb23a05e8a1eb79c42d6c041c74e58cf47b305f396cc84a2a2a42667
b537e60dc9f589f86197a46e636cfa6f77dc23fcdda9ab21b28811d1206c9b14a3016980c36fc90c
1976d5714543afb3c66b1a03a7c6ba96e8209e5a185549f42ab22d24bea098aa10d256bb9f593ca3
9a6c407e363ff040fd9a0c799e6c9c4bef00a2478dde68666f26950fa98864922e718f53b8dcc4c8
a366b76a976a55790e6bfdd4d283f390dba2ccdcb4e84cc6fecc660e340becc362888be0f3207fce
cbfd42527b0b801f176921a195dfcbf966b95ec50394a86a289a5d5d7a4c0a637eb5d143c04f55bc
ff590ccf1212ea39b6928dd4d2bd876375e2eec8e8dcfaf6e07113cb4903e973ac6d528a436cc3e8
be7817870484fd87a9b2186a268115e4b13b21d191d61a2faa0435367f7ca5e7a9a17be740dfea24
31fa0cfbac6b8c8f8b0ed5a87ec36d666a4fb57f3c1622373cfc7b67770aec191526a0bb7ec1dad5
01f5316735981f9b49b57557652549cb90efe20d824e2fa608ad7ed8de85551d84b61a5ab08ff7b5
2facc7d6fac3723ca74a603b6dbf9abbb1934e767db23922e4bc7728f126c4e4ce0054e09e8720d9
dcf72fa9e1a36706f3d9ac9cb67aeb23347b79440eddce5f261ff01b1af015ebc0bec234cd848c46
447a16f21e7581e3bcd038363b7441c66be224f2c15fbc0f0b3ef0b40670d6fa2dca000b8d4de72c
bce453a509869beb5d47f96fabe7517754b43515f4a273a847ca2848f844c7e5b2c839adcbd2fe59
074e907dd45585c232749d1f39854e343352988da3a25735db9d2f2c561dc767686b946c935393d9
481c064ddaa1c09545882dda765c3001f6a986fdba0490e7a210545420291f30334de303b084f322
7fe0c7b128b7869f10aac24111ac6abac6ab42d627c0e96d001b11cee4435e045812e1ac385fdb92
277fc0ec81d25e8c69d0b44b087906c9da477deb8aadb64fe78974420ca0f4f74d6845a371f53384
d154023f76a01b3ba5a40f21bcd924423f0f2df19543a1819d9b3abb6d46928d46d9b4154c2dae6b
320f79b4c1580af67c294bd52d3e3833733411be168620c442b9457f13cae97eb8f3fae529296a58
325f8e934f6db33572f571b0bc6ed4450f48a3278a0d7c794b3ba7380e5a8d0d7e17fbe24f03d413
668087f648c5207c06e4abe92e06d37357c4dc607e3b034505840e88b5880bc28219fd3cd3fd8aed
2e2538ebb33124e7ffd5802173bdc4590c2155ed2850faaf33faaae3a86d26f1858774f10dc770ed
80d879a52c0f283129c4adfe9353d2aeaad421e745184f5fa562fce49ceee3a9d25e53adf212b2ce
50cb2966ccfe3a39c651730914a1e21b16111520d7fa8e75307d22d54c67a263cb8c36a1b3729105
456acbbeed202a294ee1c8718ee64fadc58eae1814f0eb7bfa8c0a9577d89de900609651fc6d4620
ebe059b08854d618595e85acedf351b81f51c1d86b5fb297742bcc640d602f786e417b160d7548ad
960b7ffd66914a72f4a008d06dcaa6ee5ba009a3ee756692adef511e1184d40248024574ff16452d
32964454bba9860f2079c3b86a7d8343736c0206f1d90b081dbe96b642e27f3215b404685682e3fd
6a2545e5e0c195c6e2b0a728e1b313cccf9ab09e25cfdc95338a8130027e34a73baa66bb73922954
485f2bfc751c3fd4e522078ff06f3d1ae140d9e9bc4fefe9dd36bfb67415d2e362550d811dcac1ad
e819e2240f7c0ea37a7054a32bdc3818d1978dd8be1870824d2925c91a9a59f65e734810e057eeef
489c4b3d7eef7a947eb2963470906f073c671f3346aa110a32c6811220d636c15fcd2f882f679c92
02ad85535a8034ab91235eb6b220f116c349d5e9fa4597ef86d4dbb7cc7899fb71d58ba3be1c7b31
510e5e126d87eab1665862964dbf8fe54190a2324f2a823f1e8d7bbd9c4eb96d196a2ee8725e20f8
1a34ea5aac04952492d7addac94b08cae927902f1850494f167c8af0d98515601cf6db0d9d6bc70c
14a14e4cb8a9098feb09a05edee9011391c73ab1bad880c862819a33fd5dabe11e356584e07db2b9
0e9e77c5a071863e665fa8a5423b35239580e95aa646487b7512e6fef81487a13d58f7dd70bccabe
d8b4133d90a32a4904baff30ca6a81fe38bb150a0ee6dfa74b30d47d7f18072ddcd5a7fb48658d1f
0ff7cea1c122ccca9fb068af9f7941bd7ffd2b780f259ed86b29cf334d60a24633a92eb5ef6347a1
af312a6763d4e57b175f46e166f4bf263e2688f6d1966bbe2d3501527eb4ea4ffa0c4c03e9bfd0c6
579fa15bfa3336f42d260ff485c398e4b2244d1ab18b4da177a0119f665fb813c46a07c0a65ae70c
21d23d9b249a71a9cc3e2485dd
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
	Run	PROGRAM		0	-1
	Glue	PROGRAM		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	C311
RST	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	C311
SET	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	C311
RST	C312
SET	C313
SET	C314
RST	C315

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	C311
RST	C312
RST	C313
SET	C314
SET	C315

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
SET	X18
RST	X19
RST	X21
RST	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
RST	X20
RST	X25
RST	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#2
// Offset 9
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	50	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
ONDTMR	T17	6000	C319

// Rung NewStker#5
// Offset 15
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#6
// Offset 20
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STRN	X32
ORN	X1
ORN	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#7
// Offset 28
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#8
// Offset 32
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#9
// Offset 39
#BEGIN FMT_COMMENT 
"Pre-Run Setup"
#END

STRN	C303
ANDN	C304
OUT	Y4

// Rung NewStker#10
// Offset 42
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17

// Rung NewStker#11
// Offset 54
#BEGIN FMT_COMMENT 
"Machine Stopped State"
#END

STRN	C303
ANDN	C304
ANDN	C319
ANDN	C9
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"

// Rung NewStker#12
// Offset 67
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#13
// Offset 75
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#14
// Offset 81
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355

// Rung stkr_CycleState#3
// Offset 31
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#4
// Offset 50
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"1000"
MATH	D1	"3000"

// Rung stkr_CycleState#5
// Offset 198
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#6
// Offset 213
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
ANDGT	D0	0
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#7
// Offset 224
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
ANDGT	D1	0
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#8
// Offset 235
STR	C317
AND	T101.Done
ANDGT	D1	0
SET	C376

// Rung stkr_CycleState#9
// Offset 242
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#10
// Offset 245
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	C311
ONDTMR	T12	0	Y12

// Rung stkr_BufferY#2
// Offset 4
STR	C312
ONDTMR	T13	0	Y11

// Rung stkr_BufferY#3
// Offset 8
STR	C313
ONDTMR	T14	0	Y10

// Rung stkr_BufferY#4
// Offset 12
STR	C314
ONDTMR	T15	500	Y9

// Rung stkr_BufferY#5
// Offset 16
STR	C315
ONDTMR	T16	0	Y5

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 446
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 450
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 472
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 486
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
RST	X32
RST	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

// Beginning of Code Block Run
$PRGRM	Run

// Rung Run#1
// Offset 0
NOP

// End of Code Block Run
$PGMEND	Run

// Beginning of Code Block Glue
$PRGRM	Glue

// Rung Glue#1
// Offset 0
STR	X106
ANDN	X107
OUT	Y134

// Rung Glue#2
// Offset 3
STRN	X106
AND	X107
AND	C319
AND	X110
OUT	Y135

// Rung Glue#3
// Offset 8
STR	Y134
OR	Y135
OUT	Y69

// Rung Glue#4
// Offset 11
STRN	X16
OFFDTMR	T0	1400	C0

// Rung Glue#5
// Offset 15
STR	X16
AND	C319
OR	Y72
ANDN	T0.Done
OUT	Y72

// End of Code Block Glue
$PGMEND	Glue

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X32","","","Guard Door SW"
"X106","","","Tape Glue Manual"
"X107","","","Tape Glue Auto"
"X110","","","Machine In Run"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y17","","","Machine Stop Interlock"
"Y69","","","Tape Glue Pump On"
"Y72","","","Tape Power Relay"
"Y134","","","Tape Glue SOL Manual"
"Y135","","","Tape Glue SOL Auto"
"C9","","","Stacker Reset Press"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C311","","","Stacker Operation Vertical Bar SOL Buffered"
"C312","","","Stacker Operation Ejection SOL Buffered"
"C313","","","Stacker Operation Compression SOL Buffered"
"C314","","","Stacker Operation Transfer SOL Buffered"
"C315","","","Stacker Operation Load SOL Buffered"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Stacker Start Up Cycle Delay"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
#END

