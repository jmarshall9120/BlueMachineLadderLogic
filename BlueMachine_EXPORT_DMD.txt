// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
2a0c7567b1fd13189d0eac31943f49c358cf0349633d8327a8fac12991d08bfc78ee7d4ae12ceb19
db08b7542896b038d40ea748e84e363689e2bddd23f97e68f9291129ec1e8b4ca0eebb8f983d4caf
01978b31d20416bfa6450018b7b3dce9b4965be062bc89b30015d00854e4aebece74e7ca2e01412b
ff505441a5cc33423ad019b839ca0b5379f9ec160cfb9768aeae1452e66f6f1f7948a85fd6be7586
378db79b777a75a48008575bc76bd98e1242e735185153b14f6e1170f4b806ace59c7cb8f2962412
ab7d9c0a51bfbc98094d0d52ab64968b7a5875c752b95dd29a48274303609c82b5391b9c6a63f2da
0c96bb6fcedf63bf4a2ff7c0ebefe38aa02ba49df446c254f80144f21fa8f81674f4c269922aa36e
df79f92519ea4dd1afc950c8bd635e1f00c0cad408b4370c51682dd401ebf3c735bbc47c30d433f8
6324d8628bba1e1997654d3cfe00ff989287f5b178edb2834ac01da9e3d84d120791b6987c1ac63f
bc8a745fcf0884c141ad1d913476b3b7e836a8fffd83b8ecafadafc396611a15b9cf5aae8d0bf012
a10d9494fd9656b5e9da1e6c5b5d976093f2aea56ba49ee4300617cfd5cba109898fae5badf6253b
bf69317089a8449221604f4b599c0ac8dd60604c853eb9069c1e4dc2621a06093b0605597a77b82d
ba91bc65df8d5b93a1973bc74a691cd570e6b4ac514e869535bb0004bc05c3883e6237606e1d4f73
e71190e75f930ff34d6bd69fd30a7d68a10c3b6d0964d2d2846cd4571703075b4f5929dc0e53451b
b9fab87a9d718a09d7e4b64dbeee36a312e49749a276bc22f863570eef57ef3f32d71598264fe008
6aff205ad7ff80d41165d297321b5eca10e21148c343cb1d2f8ba8a750d0146395aacc3137d0d4ce
e87cf085a0d1c332436f82bb430f8b709f61a68942e632546158e34abde6b8eb348ba4253fd2bfbb
f5129a42fe9929e675be41e4abf51b33bcefc93f3a564733e22021010a9325689d71437691153012
ad3a178b63c395936b2802403f7b4e523a8422efbab5752061ef902a052b34f083522b528a2865ea
8b44881223eaeae9b49e133ca91962bb1de674945d79ba074845147410a94490c296e5e25b3b1a26
c9c78f17280a378c76f4c423934b1de58b1942c8bfb1a2bbcae2476c16ae260e167a849c004d7b47
832649278065e4052288a410db26c4c0226e88d4a2589ff9b7e68e4b1f2363ffdf285266a6224baf
2aa937f91c7bda9492ebb7c2547c2c023f8ad322efa50d0313c41ec7c42027ed73fb587df5e24b54
1c486161ebf23d1a585651e4cfa0c79b3f3e9865b889759c564b93f439f6cc362c4c93609d42dc45
d26ada1a995576e82174a9874a8d2a074283faa7bbae1e2542110041bfbcb324ea6d433b668b0297
846939e7e556420e2a8ec0cf1f2b6ba59f959e818db46375fad3a11fce10e1605201e8cf4886d142
6167182598f03e03ac2cdb26dafd6e25ae1a685354a011c0aaa6e60c6f1f97c3c09402ebcc5e83f0
b5122ee7e321b69b9bd6c34ac7ab2cd8387e1a35a83032f366eebee7cddbb0c5190245dd9e8d7b2b
d0dd08cbd44c61b3b79ba41c6baa56612d33c92fef1822b6fa3d8d3affa2d30112ca8edf3b5e7b3f
fbbb59b8f65074514113746c54e274412f551c61b3987ffac8523befc91b434e0e6a3a36031fd453
7a045f71a7a029477673baf1c52ca019ad65c8347a0fc18e3377fa59fd41e9a9ee4205d6e1ce5ad6
9eae4c1644251cec03ccd3c3e585a40ea5c14e996b53cfc923792b4ab3434cb17e9e60bb09548f2a
5051a1980402e8b2e0811c875d4585daad15f6aaa40cecd9e38c507c7944f319c1b7609a63fb0e21
61044085361cfad25c37e01fbf6cfa00467d814a57e6541d72d0cb4bb5385601afe3fce32d55df5b
ffd050fc6b5c69457f9835817a9543fb15d3d01aefee78e147372164e93f5821d6fbeda2fcc2751c
0a4f0d0d7ddf6b8e48fcc444d12cf725d66fad192e4731e039e28b49960939651ad85f80633ae606
97515234156a8a556d6c6e7ca431f2db895401a38a28b246ee67d5afd20f80947c7ca0a869f7b007
41e65a3706447ba10d4338ee9ceb63547b1fa94c00a0306b385360364c7bf4674904296f60886edf
a023f9d6439153acd9cd9c0e719865821a3ea29f7475310d984f84b84eb155b38ca57d1a63d4d930
88e6401db61ca7c199a8b9130a9784c0dcc10e0d5662c4354411a37c7c50fb408402f003af9df18d
19ed4ac03f81695e14d0a4dedcd1cfe27d5402de9827acdb9458117b7a0c3074da5a3541bf158162
4a65b81f64131daef92166c63995dc73436bd334a3d4d5c9eeeaa5f070165bd19c155c7f47360a02
3c2862ccd61944ca71ed3ac4f35d5bfd85e4300e9af173b5c0bd02c61e72614a9c79c84498a600c6
1dd737f50ac9a5087d807681d84179c1e2cc85c2171631cc0f67b5ec8a4bedd69c13bb7661dbdb2b
3bc12f0a4fda547ce549733a633234dd024982c16abdeb1183da82bdafe8fb6e5ccc0d665085bfd9
31d3f277df8760458e08fa29bd3bad5e82b12559ed1abd385d5ca60033a315c67f8533f858c4cc2b
0e5be28dbbd093029ed5ca823889f4143c34e8669f84a34ba2bd6dff1433169234a1c0d4eef2cc83
f40d80ee5921c19909d9297c9a4209d16b02c5947b255560e64ba4b5440dba9ad1a250ec3f693e95
23bdb69221cee4bfd0b8786d3c794044d188ebb5ce1f95e68e9968c153d66692189a1a4895b4e1b6
c637860b0fb1a27602f1bc62e653ea9ef61718b376a6cce7ad4c17267ef311c06b5eeb3b2ab744d6
9f4a46e0ba751e98c37eca8cef2eb805dc45944f23c9fa8e7728a76cd180017ea1e502056b1bb4cc
82c3bdcdd25ec8eb53f24ea9e473750fab1d71c6c2efe514986a75defc31144fce18a1039e419368
64b387dec5635328333c49a52d67fdc99b62a1f2fdf48b68bce3d9cda5ff7ffb44d688c405f5bc90
961d134ab5739fd4f3ff9e2a7114ae2f3520b3b1912e31696df74417d65fbaa110b2b2e862165b30
988e9a057983c300c0db3e90a216e71dbe2875f5334e00a6feaf74446e74fee07f50d066430b8102
b19f2af221c668d0396b632a50c7393fb6e9f3fb8d14a6da05b2e829998e340b131fe7b4b43e6bba
c3b7f4c57340b72a1a5a21690f8b2d42ae04af990577dd2add8c1ef60d9ad99f7fb9259c720d6987
844b4e12a7a070aa5caf954779f08f551389f6d9900ade580df5041691e1b017d6980808c00ae7ba
432a264d5212bb2e120e90af3c7ebb38ede77af7b8afcfedb4438f9cb474672fa526d1a5c1dd20dd
5578362579b8e733e2b60f12a43a6b0a668753ec9d100c677973c3718070b27258300b3ca7b85dfd
2eb8428f0c64871c961de4a0896ca4dbf24017cd3bc8b289d30b858dc45b93477bbf6d772b8352b7
1f8f118e5246482aa20fa41e07aa5fe1a62cd003c40dc3b8a8ea81026e46689521815de45fa08b6e
5770fa9266a933986d4c5adae04ecb2e90d3b9dce4ea7bc924ec22c1d11fddf457f21faf7d5be197
bdb68d2271acf466fc23c36338a97a4091a97ffb49d5ed79c53d7f49c18857a381d8250eebd24d87
1ce926bc17e302c853ca92801f6e3dc87631557954935a944f5f457b2da618963e77a85c267fee38
a2b3d7bcda85604d3eaca5bfbf0cfdb82525e306942cca42df521d3636cdf039e15a8bcc4ccc2914
fd6d140323479ac250c48102f7490e8aa6c7fd4bad75c4e3760a36e800f076838cd2f2b085631c87
4542ec8438d5021fbf7f08aa64e92cce2ca7eeafe1d7c87ebe80d2b3d85b2423c4239e3ec4232466
6f13e03ba80598f8af0f64c45aa6ef7c6049b8a8b6dd5e32a6287c9d682bb900cf18029a515facb5
e7afc5202d974136945ad396d2d879f42eba4d2003be4e8eae3a867e0b5571c565b900ba85ad4871
b63dede6d61c3102feb06531aeeb9eae47c4c259120b86afa9b3c8282d18ceccc5a93fdd286b79c1
6e14a4028e06fef4c41daf5eb2e363c19740b3d5959f18736496ba7d2c9a3eb8ad6c256424125cbf
8a0d24adb8da60ff728502c70badf7f9e1418433b7c35b2a58d23ec706fa513c84d1574760212510
4b153b8b76ea02d33ab2af2fbb3ce6b53271a36004d334eb0bbf52fa71e20ac7f876d0dcb5ac67ad
a4647bfbe0425e9db47d26958e56483086ce7ab405ecd44d7d0d4a873fdae2c158a3999f910af028
282afa3a9505a543bd538e5d823c0a2516368a8a0fec3baae8b2edf73feed4ef7ba5de3bbf89b24f
8cf369f316aa2b3dec7ce76c73518aca5f0dc79ce8dc04904956e007e71652f3d84d16ef08d6cf7f
b5281bff61a0a9af77d61fb0dfe12bd89fc76a7745a7d90cc5559a6c66ac77b0d575e91bf77cf517
414ebdcbe81d3f8052e8c140dcf5a85985d2d877627adf3871e77c68f3c239db0f3baf6c3a194b74
b722d16066ba5d84de5995fa4ad356b5593c6ef9c018df8cc58412affad7ae3ef683f350978dd3ac
9addcf8afa7b8a32801fa0f52c609a4bb00cab163ae7e543e67a4eee496ea0bd5346f8d7f50f8aa1
8250c28d23f4f41314884e3f1d4b1794e1bf87c3e67da34a242065328e3fd23524b79d99d375e9f6
abf48eb461dbfd2d687f53599fd5a38e9054319b4884d4677a153c438bd1987e254464118e7e1ab5
101c5fad0dfc6f43c85e0207f4ab084066da323b68879b2b97e63b443b4ac2f95ff18fadefd1ab3b
0d8acaa2004ae45a4ffb80ea8a51ba98e58b81c2aad120be933cfae14e25ac7aad6a29430dd3eca6
40f781f1e6671743960b80c49e5c02d0e0e52b55cdae4465a418fd2ec3c690ea411e4562d2fc6819
785c5bf3620eca3235360c9adaa0cb426460c54945a72fe625da7a10945ce9de5f572d6df07a5c58
bdc013a5fdf88b98af05234839419076c3cc1b65e9b634f2be1f19031f5498ff685438a83f4a0a17
b015c626bd84dae78937593258dfcbe489b99548e958b533bd2f36225e8aa7da542ba86d0b627f4c
0893e43042b5a3ed4eb78aec6cf4dbf7590317df786684cded919b955bff61583fdefbbad7d01db6
13e015f508b70f1d64f10770ecea1f2abbb528d18140ed29b23aceb4bd22ecf9b72254717c44fbea
1a9df01916aaa57ca0c97cc1511e0ac6b7132b27cfa69bddb8e65a26f79cff114969ad0d664681e3
892d9105aeb37ebf0a40dbd5f22d31631bec19f6ecaf4c08edae18a3553ee0f3b4eb1cdd7a66f015
72a43d13caec556924e337afc4cc2f960b119df1930d9af851fc54e32912fc5bc6471afbccd692ab
3fbae6011c2c2d3bcbeeb3aceaa74e25b051a5c703b2fae6923f4e1c456b701f296914cc295e9eb5
dfca5c2c5531c4a7725262069f573d039a75dd088564133e5252d4f6fa169efbeb7a90ee5de7f32a
da41fa60e923a7e74ba4316741607543621815e5694cdd9cda5ded10bebcd8b9ff058c2539ba38c6
ba1ae948c392746682f561800f25a964bc0d4fe51d4ea7a5e9cf210ff93d90479a0977dee88e9212
7700a65e086c9d7ec06eb5299db2c2ebabd7517d2e0796624d58b6070d01d684feddabb2760833b3
7c898e4edfde2596dfb97a159f44ebe23b0904d26d5371873e583fca48f324bde9b3fed7879ec056
6053c99d9bf7d426a363d236bd5ac861a000cdf0facd93f5d8d340be667d48e372020af4b4f007f8
573eaa04aafca13ee7a39320cfeea3f4d9f91dc92bb5a0a0e3c2fe7957b187f7af06e832af8f6a48
8359aebe7c641e9820e82deca336035ab4d19a9ccadd42c5f8d062a6b699a23afcec718f222cd6e4
c48d33cfc862c79976fa86fe7beb767a51fecb15b051d57da5d36c95812742c0f8a189a3eba79bd7
c45455283594cb58b4d797d8f5eb0c8066ba462ef51d195cb674a404f9e7c0a1dfe87cf7162ecf9e
153839dcaf49739f8c6060b9dd81e058790d51b8b5da1a47e02ed93abd9cf9e42a6db7b98ebb0af2
a439348e227f36c578d95c45326c1a008b90de96d56803063c2430b167593bf62114080f6081a750
ef490dd88e4afb9817b230530825c847184e87d0bdc022de74138e08a8bfb530e822c9b3e26825c3
0efb0435b9562c4e1fe82f909aea9fd133509b436a5a4866992af8e241ad20b7b97162263dcac59e
16952e7e3d508525cbce4eaf29a712cef20580c5d0bcc2e5ca78eccf3eef83822cf87b46d55d01d2
3fd097a4f83ce8288ba1958689e997b51675fef64373064990ea5f5ad25a62e8f1f0e42b6ae6c52e
498e56f06cb8cacdc957baca689bb570bd8f4b9004fbdd653aa50a381259a2d38d7137dff90d65f0
334178adc264fe31c28664cccb837e5cb0fe5ef796e6b5d3903d001bc462fe640651a33cd1219c83
b5ff0fb5e3a8f18f4ae8da2ccebefc13f5c7b3e73801d5d86f02fe2f45a895bed418cc2f0af7d9fc
6c07f4a700195ef54666df087d62ee1f451ca987ee3e84740b8412af9947b0e25fba90ee98947747
6c3e6a6f31561bcef4fac6dd23b7cdb54acc94baa6a3b8f5b7b57a158359cf0f5466fa8f599a4490
1e1c78bb6c6f9f89316520f5cf7348514471aa201d4075ece281096e6afc0ec309d1776b19f3d62d
5c02a4402f32b64f0b94b32c10f0e2a7f8b8ff573781f6ba49494a3043611be3a28e568560e7f185
7f6daca0f5defabe1d26e6a91ef568826bd6687187c5c183a4bb0f7c1bb214e8e2409712c103280c
ed66b3305042002a24ac26ae1852353ed7a10876e6bc438b06e9d5a9768f89688fa45306d4192bdf
47cd0c4dc7b88f9b5e0ee080865656cfd721c5e2c8af2393750cf300ae6baa5d8b5bac1d9d47148d
35efae7453e70c4b4ce2e35640feebd1bc7f0aee07ce0a9ca158fb81cf9d5c787ccabd9d5e01138a
26dffe6561c4611f7c71580d663204d8c92345c9df4257dab36b2e18d01b3fcdf50b940c72904276
a08ad56228d24d2231c3260648c98a1d30d59706a3dc38339fc0773b407082202c2a54c3b3d6659c
a8beec3a7a2716a5c9efbd4e924b4c00e841e125fc95178cdf004c6a9e4b242696b948fffe82c899
fe0c08269a8df3620628930b9ce028b02c12164216d77d08a4f6b83b20e4e4cb0655c92cdce40b19
779a5f7fad54d2facedef49792228210256fa73086949eac5abdd286d93845cc495e1dc7fad769df
9937bd6362901a89adec5cf7c7af6211df8605bd707aa5587e7ae7ac97ee04721743f12d77710cff
1c453ca07e91bf24d9978e365ca035ed6bbc7f7cf6ad272bb0620cdd659a0a6ec15839b55cf3bc9b
f2fd9f81eb671292d4f2454841013f247ecc56c250f764e345d3ab909cc39e19bd37981089ebb302
2c453880ec7d9cca7c0d64bfd81131c7ab1b7bc2457b61baed287c1019e8329d03ffa13e81e7137a
0a5d8f731dfecab73040637f7e3eaaf1201e8c51ec860475b081bfbdfee0e0f5c0ae0a97089fd33d
0df7ee0ebf5b16e435d4d0e62726154dfe39ddf276c20d725581fd4a84f900e272fc8d3925df226a
77896476d9dfe2b30e5d14a40a0e25ae7065f261eb7baddeba7d1d8c4d1c8171071d54a6387208b4
611ba6b25e8ea967de3a8aee5effdc57f713b13898df72a67c4e6809fd822c1bb1d9b8641547b90d
c47d99294dfd5c6fe444a0028b2b6c4bcdf4158153bf1c19741dc69a7a891eccd02abd7b690d3b9c
2e43d08c092877e68257b9b7231d20f217f4d12831602ab06c083788d7bf1022d75d0d30d8d06d0a
c1a810e64f4dc6822fc7b8d5157c55a237438a96005bcc77bb126aaac63eb64dda3184d970f01c43
0418ed04bd0a3d665bab5e28fc7e9f66496c816c1b9372857c834eb9e04932f7ba9ead8c3090fbc1
fe926c2d1008c6ac0cfd3c8cde53603517dd253c444f15c6be4fba7ae0abec77bbee9c6258d28118
cafee1b956879e13afac0abe47010838c0f1de3e75002c19650e9c0e5b63fed5af86470ae1da04d2
91aae57f1253901c3470b5b24633f4210dd8cf53662ed3deeaa2cd9092c29624f0a1a04c5e82f75b
c83c6c924d917fa3e22f8100f55bd39cf4fc04fe5e29c6501e07c06ed8d331f5700d54c494d28efb
7d1c4df0903a5a8c723c0aa083ef926b9317b7aff53279a61364bf0627ddd91f76ae3a698de27989
863d188ff6608b3ccc73664dfaab5cdb357c8427f0fd6646c4e52a2cc9706a5468beb44f0aed312a
c30669243464b4584b8b800e6a8bb38d65a8d69a722ae2362650eb3470f575f6228b05ea15b1b30a
25dc30ee5a571c02faff8844d0f7105b30b37ac84f4104838c0440d534f95cffb25a3b1dc8edbef3
855ec36d09bdefad62eeff7689e0550ba4b6ef685acd08d7e9613079d64a0da41473affda0ae76fb
e7eec5eb1d21992a05b172bad4a90d4c01decea11e868488af1c93a940defebb96e10eadb6006e36
9d84d9712e019b78864d9de7f4723a692c4dde966a9c324a7df2eee7df80d0f67594a86a2a85d6d7
76bfb341dfa18cea4f8219c8f1552b9ac14153fd9e5beeb96583a6e1147337e2751a201aeea07426
c2df1e6e6672e51e6c25ef2252fb0a94adc5f6fc26ac10619094530ca9ffef07d6e1caf9125180af
71be80af90f7fcd766090cab4f90c3a12d9e1ae91f1cf535bea1244f7f19b0c9e36b705a69eeb180
5cea3db8ede81ede953731eecef35ae7cff7aaacea85176773fc16ae63da9bc20e67d0887fa8b35d
e8b2c176340511f1c415e7e9d0d3781ba5db759c22527d951052bcffe9af31cb099c4ecf96d955cd
95f5b21ddbd6fc5fb7dcd45ce54e9516933feb3f28b823c924e0ce1e772c49b3186c3c2afb42b469
6efee89de905a82b3c5e67dab8362b82b7fc23db1e0a6fad52613c876169aeba556d43decc0c7ab8
c86106ca7536e415e4d7f0f07eb5bb6aab4519a187682b376148e9f74d6145ee39472a8b47841966
50898ac2441aff87449c9e9b95280b077aeb424ff7c60d2c3a929ca35450fc8fce80d00a20dc2174
f1a64fb6d9ff174a3fe5024e10ada96da09e64d6cd4e4e3082757db1b91cf2ec8a6afbbc1ded384f
46723763e8813528bef60db2c9db0d134fec3ec78c3517aa03d4bd7a0486bb94bfc00b839efd7c0f
bed20719ac16dff37db049a44f8b533959e5f9f75811b08e7fdc3d8e278f83fd1ce9933dd54a57f5
1b338ef34ed7ceda54e0650c88ddb8694a37d7ebff2fcde64249d92503c5f741f1889ad2b3c21b25
b3cc4993de31f4ccac9937b668a8b9d18844013bfc2843ec9e5702c782cd0d8ed679d1af68aaaaa2
59a2e981d30b7c6380c5a414916e6617968eadd9a70c39ae0bea51f0e74a008e2b84e9d21cd70391
0ffc20ddd0497fda7fc8870da98863c8fd76ea98e6152e0f8f473dabed13cd5a16499bb2f57896dd
5820f186cba90625e2c18a57056d99014f5f9c270f16306315923ae296034a9afd72a6439514d0c5
7035a4fd61d2202165581162591882e13b8567f31dba1ae382094689042d007ef7a122b780356d61
7bd632a489cdfdb42b1ca4f5f3f565c469fd7d0eb3d6d99b7d21d3de6f8c5c04dc03605091542c84
b1074eabf514f05e371494e87d4760a6211789e4a202ca5a429f45101dbad659caaa1fa8c9f3f617
b4d38bfa4eee8746e62d9b082580a6b2db028bfae798565efeadbac7b36be8a3ad3ed3a4877eca5a
ac92ab4a658eb5df0a2a35fb9c5bd9e50e65b67f17995d1625f4f31c879237c0ae7224ad0f9974cd
2d0840a135b7f9c502a76b9481438965346888879a97e6e8384c9741db50157f8c7065d596ff09ea
0e832b20efbfe9106565f9beba55fc498831cfc993149d7fc2a902356a24681eb1f5eac6c958d767
2d1fb736d5ba245fa13498e59aa69e3085cf3641f8a93b8374b0e5b4427acdf6100ade0152d57ab9
84b055e0ccedbf086ec3f6b1a030a2c959e3171833d873c77e21d2feab1dbbdf675a9b7eac40a423
fdf015a12b432a0951d94fc038cb636ee0d9e940975635905a13b37271556fb36ca746da587b5cef
7811ac2821b5b41f320b9a60e9dd0f688af52a52098f2940e5e18cad79d8099c1cd5ef73af625013
e229bfaa03c3260081933987a93869ca2003b8570a04c1e880ea3e102a2ca2033cc99cad1870573b
65d22127cf8e1dad024865f279baa415049f7a19b112cca944b162e9a0501440f541fc940226bd4c
beaa457161c358d24dbc06da46919da361a46fd89783993c49a7d536708d7a4cbf16d8407d7fbdab
de35c73e9e6811bc7fbb1685941a1135ecb0dfc13ef628744e2ef7e338c2dd1109c546e4727740b7
5699c18642f6c4593fdaffb4a347b917f187e320ccb838eec136e798b2a386069af3a17a3a2c2d84
97b05883e13f7264e8727bc82bd9efec24acc93b21b11a
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Stacker	PROGRAM		0	-1
	StkerStartUp	TASK		0	-1
	StkerFaultCheck	TASK		0	-1
	StkerCycle	TASK		0	-1
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	C311
RST	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	C311
SET	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	C311
RST	C312
SET	C313
SET	C314
RST	C315

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	C311
RST	C312
RST	C313
SET	C314
SET	C315

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
SET	X18
RST	X19
RST	X21
RST	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
RST	X20
RST	X25
RST	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
RUN	Stacker
NOT
SUSPEND	Stacker

// Rung $Main#2
// Offset 5
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#3
// Offset 14
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stacker
$PRGRM	Stacker

// Rung Stacker#1
// Offset 0
#BEGIN FMT_COMMENT 
"///////////////////////////////////////////////////<br>"
"// Globals<br>///////////////////////////////////////////////////"
#END

STR	ST1
OUT	C40

// Rung Stacker#2
// Offset 2
STR	ST1
OUT	C41

// Rung Stacker#3
// Offset 4
STR	ST1
OUT	C42

// Rung Stacker#4
// Offset 6
STR	ST1
OUT	C43

// Rung Stacker#5
// Offset 8
STR	ST1
OUT	C44

// Rung Stacker#6
// Offset 10
STR	C45
ENTASK	StkerFaultCheck	0x0	0	0x1
NOT
ANDPDPF
SUSPEND	StkerFaultCheck

// Rung Stacker#7
// Offset 18
STR	C46
ENTASK	StkerStartUp	0x0	0	0x1
NOT
SUSPEND	StkerStartUp

// Rung Stacker#8
// Offset 25
STR	C47
ENTASK	StkerCycle	0x0	0	0x1
NOT
SUSPEND	StkerCycle

// End of Code Block Stacker
$PGMEND	Stacker

// Beginning of Code Block StkerFaultCheck
$TSK	StkerFaultCheck

// Rung StkerFaultCheck#1
// Offset 0
#BEGIN FMT_COMMENT 
"Pre-run check<br>  "
#END

STR	X1
AND	X33
OUT	C0

// Rung StkerFaultCheck#2
// Offset 3
#BEGIN FMT_COMMENT 
"EnergizeStackerJamLight<br>    * Air pressure dips<br>"
"    * Guard door opens"
#END

STRN	C0
ORN	X2
OUT	Y0

// Rung StkerFaultCheck#3
// Offset 6
#BEGIN FMT_COMMENT 
"Stacker Shutoff Grace Period<br>  - True when:<br>"
"    * Machine is running<br>"
"    * 6s after machin has stopped<br> "
#END

STR	X16
OFFDTMR	T0	6000	C1

// Rung StkerFaultCheck#4
// Offset 10
#BEGIN FMT_COMMENT 
"PassAllChecks<br>    - Air working<br>    - Door closed<br>"
"    - Within grace period<br> "
#END

STR	X2
AND	C0
AND	C1
OUT	C2

// Rung StkerFaultCheck#5
// Offset 14
#BEGIN FMT_COMMENT 
"Jam Timer Detect<br>"
"    - Detects dip in max air pressure<br>      * If air "
"stays at max all th etime it's not being exhausted.<br>"
"         Thus the stacker is jamed."
#END

STR	X2
OFFDTMR	T1	3000	C8

// Rung StkerFaultCheck#6
// Offset 18
#BEGIN FMT_COMMENT 
"Check if jams are detectable:<br>"
"    if: <br>        * In grace period<br>"
"    else if not in grace period<br>"
"        * Not reset pressed<br>        * Not Air has been "
"on for %3E than 3 sec<br>        * Air pressure on<br>"
"    then:<br>        * True"
#END

STRN	X8
ANDN	C8
AND	C0
OR	C1
OUT	C3

// End of Code Block StkerFaultCheck
$TSKEND	StkerFaultCheck

// Beginning of Code Block StkerStartUp
$TSK	StkerStartUp

// Rung StkerStartUp#1
// Offset 0
#BEGIN FMT_COMMENT 
"GraduallyBringUpAirPressure<br>"
"    %3E Holds air valve open till fault occurs.<br>"
"    - All faults ok references<br>"
"        * Guard door is closed<br>        * Air is on<br>"
"    - Air pressure OK refrences<br>"
"        * Air has not stayed at max for more than 3 sec.<br>"
"    - Press button will clear any fault exept:<br>"
"        * Guard door is closed<br>        * Air is on"
#END

STR	Y4
AND	X2
ANDN	C7
OR	X8
AND	C0
OUT	Y4

// Rung StkerStartUp#2
// Offset 6
#BEGIN FMT_COMMENT 
"TurnOnFullAir<br>"
"    # If air is up to pressure, open full air.<br>    - "
"Redundent fault checks.  Could not possibly have changed "
"state <br>"
"      since the last time they were set. <br>        * Air "
"pressure OK<br>        * All faults OK<br>"
"    - Valid Inputs<br>        * Gradual Start Valve"
#END

STR	X2
AND	Y4
AND	C0
OUT	Y16
OUT	Y17

// End of Code Block StkerStartUp
$TSKEND	StkerStartUp

// Beginning of Code Block StkerCycle
$TSK	StkerCycle

// Rung StkerCycle#1
// Offset 0
NOP

// Rung StkerCycle#2
// Offset 1
#BEGIN FMT_COMMENT 
"1. EnergizeVerticalBar<br>"
"/////////////////////////////////////////////////////////////<br>    "
"# Hold itself up till Eject out is tripped.<br>"
"    - Air Presso OK redundant check"
#END

STR	X18
OR	Y12
AND	X2
ANDN	X19
OUT	Y12

// Rung StkerCycle#3
// Offset 6
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>2. Stripper return<br>"
"/////////////////////////////////////////////////////////////////////////<br> "
""
#END

STR	C2
AND	Y11
ANDN	Y12
ANDN	X18
TMR	T20	500

// Rung StkerCycle#4
// Offset 12
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>3. Ejection Arm<br>"
"/////////////////////////////////////////////////////////////////////////<br>    "
"# Latch Start OS is the eye that reads one revolution of "
"the <br>"
"       gear which attaches the stacker to the main drive. <br>"
"    - This is the prime mover that triggers the whole "
"cycle<br> "
#END

STR	C2
ANDPD	X17
OR	Y11
AND	T20.Done
OUT	Y11

// Rung StkerCycle#5
// Offset 18
STR	X18
TMR	T21	65

// Rung StkerCycle#6
// Offset 21
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>4. "
"Compression<br>/////////////////////////////////////////////////////////////////////////"
#END

STRPD	T21.Done
OR	Y10
ANDN	T22.Done
OUT	Y10
TMR	T22	0

// Rung StkerCycle#7
// Offset 28
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>5. "
"Transfer<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	Y10
TMR	T23	9000

// Rung StkerCycle#8
// Offset 31
STRPD	T23.Done
OR	T24.Timing
TMR	T24	1000

// Rung StkerCycle#9
// Offset 36
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>6. "
"Load<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	T24.Timing
OUT	Y9

// Rung StkerCycle#10
// Offset 38
STR	C42
OR	Y5
OUT	C20

// Rung StkerCycle#11
// Offset 41
STR	C43
AND	C20
ANDPDPF
OR	C21
AND	C40
AND	C0
AND	C22
OUT	C21

// Rung StkerCycle#12
// Offset 49
STRN	X27
ANDN	C41
ORN	C44
AND	C20
OUT	C22

// Rung StkerCycle#13
// Offset 54
STR	C21
AND	C20
ANDN	C22
OUT	Y5

// Rung StkerCycle#14
// Offset 58
#BEGIN FMT_COMMENT 
""
"/////////////////////////////////////////////////////////////////////////<br>"
" <br> <br>/////////////////////////////////////////////////////////////////////////"
#END

STR	C42
PD	C4

// Rung StkerCycle#15
// Offset 61
STR	Y9
OR	C5
ANDN	C43
AND	C3
ANDN	C4
OUT	C5
TMR	T2	1000

// Rung StkerCycle#16
// Offset 69
STRN	Y9
OR	C6
ANDN	X21
AND	C3
OUT	C6
TMR	T3	2000

// Rung StkerCycle#17
// Offset 76
STR	Y5
AND	C22
AND	C3
TMR	T4	2000

// Rung StkerCycle#18
// Offset 81
STRN	Y5
ANDN	X25
AND	C3
TMR	T5	1000

// Rung StkerCycle#19
// Offset 86
STR	T2.Done
OR	T3.Done
STR	T5.Done
ANDN	X29
ORSTR
STR	T4.Done
ANDN	X29
ORSTR
OUT	C7

// Rung StkerCycle#20
// Offset 95
STR	C7
OR	Y2
ANDN	X8
OUT	Y2

// End of Code Block StkerCycle
$TSKEND	StkerCycle

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	50	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
OFFDTMR	T102	6000	C319

// Rung NewStker#5
// Offset 15
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#6
// Offset 20
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	X33
ORN	X1
OR	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#7
// Offset 28
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#8
// Offset 32
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#9
// Offset 39
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17
OUT	Y4

// Rung NewStker#10
// Offset 52
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#11
// Offset 60
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#12
// Offset 66
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355

// Rung stkr_CycleState#3
// Offset 31
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#4
// Offset 50
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"2000"
MATH	D1	"3000"

// Rung stkr_CycleState#5
// Offset 198
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#6
// Offset 213
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
ANDGT	D0	0
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#7
// Offset 224
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
ANDGT	D1	0
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#8
// Offset 235
STR	C317
AND	T101.Done
ANDGT	D1	0
SET	C376

// Rung stkr_CycleState#9
// Offset 242
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#10
// Offset 245
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	C311
ONDTMR	T12	0	Y12

// Rung stkr_BufferY#2
// Offset 4
STR	C312
ONDTMR	T13	0	Y11

// Rung stkr_BufferY#3
// Offset 8
STR	C313
ONDTMR	T14	0	Y10

// Rung stkr_BufferY#4
// Offset 12
STR	C314
ONDTMR	T15	250	Y9

// Rung stkr_BufferY#5
// Offset 16
STR	C315
ONDTMR	T16	0	Y5

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 446
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 450
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 472
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 486
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
RST	X33
RST	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X29","","","Product Entering"
"X33","","","Guard Door SW"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y16","","","Full Air Valve"
"Y17","","","Machine Stop Interlock"
"Y65","","","Transfer Left Timing Fault"
"Y66","","","Transfer Right Timing Fault"
"Y67","","","Operator Side Load Out Timing Fault"
"Y68","","","Operator Side Load In Timing Fault"
"C0","","","All Faults OK"
"C1","","","Stacker Run OK"
"C2","","","Stacker Enable"
"C3","","","Jam Detect Enable"
"C4","","","Operator Side OS"
"C5","","","State Bit"
"C6","","","State Bit"
"C7","","","Any Timing Fault"
"C8","","","Alarm For Excess Time at Max Air Pressure"
"C9","","","Stacker Reset Press"
"C20","","","Operator Side Load Enable"
"C21","","","Operator Side Load Single Stack"
"C22","","","Operator Side Mode"
"C40","","","Single Stack Mode Constant"
"C41","","","No Interupt Stroke Mode Constant"
"C42","","","Operator Side Loading Mode Constant"
"C43","","","4 To 5/6 Stacker Adjust for Operator Load Constant"
"C44","","","4 To 5/6 Stacker Adjust For Operator Load"
"C45","","","Run Stacker Check Faults Task"
"C46","","","Run Stacker Start Up Task"
"C47","","","Run Stacker Cycle Task"
"C200","","","Run Stacker Program"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C311","","","Stacker Operation Vertical Bar SOL Buffered"
"C312","","","Stacker Operation Ejection SOL Buffered"
"C313","","","Stacker Operation Compression SOL Buffered"
"C314","","","Stacker Operation Transfer SOL Buffered"
"C315","","","Stacker Operation Load SOL Buffered"
"C316","","","Transition Variables Set"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Machine Run Started + Grace Period"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
"T0","GracePeriodTMR","","Stacker Shutdown Grace Period Timer"
"T1","AirMaxPressTMR","","Alarm for Excess Time at Max Air Pressure"
"T2","OSTransferStrTMR","","Operator Side Transfer Stroke Timer"
"T3","DSTransferTMR","","Drive Side Transfer Stroke Timer"
"T4","OSLoadOutTMR","","Operator Side Load Out Timer"
"T5","OSLoadInTMR","","Operator Side Load In Timer"
"T20","StripperReturTMR","","Stripper Return Timer"
"T21","EjectInTMR","","Eject Arm In Timer"
"T22","CompressDwellTMR","","Compression Dwell Timer"
"T23","TransferEnablTMR","","Transfer Enable Timer"
"T24","TransferDwellTMR","","Operator Side Transfer Dwell Timer"
#END

