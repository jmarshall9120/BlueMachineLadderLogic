// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
77636df65f2f16e4fe286f6cfbb757e2450134f1cc6e69bb394a5dbea7e0abebc34ca205ddc2ba8f
34ff0b0ff9f104e62b0872203b631660ea083ad79c2bb97a05bb9498d8def4f786be63698722033f
08636c75a9942576c4064643a25bb60e45982635c3182462277b2e6810f8444dc350c827c19c5964
c7c6204aac6297be73168145146295f3e567bc00ed9b47513db3d5894de4d8c561306115fb975ab9
7ae4b812e42ce3c969820ec2c37731f216c593f73ae9f7d77301b172574594e459a25f0e14efbb3d
5d58460e03882f1e4b1be39ca8bfd4082824475f7eb5877223797782a7ed89ba422a777c950206b5
661f393f0db02b1a99f1a6e80a056551597b1443511013c25185ea3212adf96a150acb5b34744bb5
aa79d985ed86f214eb24e4cf2ee5893cc5ccdd73be70a8475eb0712f20035e29bb6c082b6bceb489
6d372591badb614b791cdd32a9cd69a9fab34cf311b711b0fc51da456013de8b7042bebec5de4b8d
cdd0d55dd78f1e2ca92a460abe56b548db975d50d039ec9d41b44f19f3c11f8fa2bc96a8b6068e6b
3ec2323248e94dbde439ab0ee79bef525eef5773b3991c8788df60bf2e76adc7afee08cc5d32af30
f8234ba6d5356245c98ee06504a0668416f11304615d6b399292488bfbcee15077e96d3b5d635c1e
411f5343e2019a08373c5232243b4e96e3be5f1034386f419da0ceb030ee3bf1b58a498961b6ce65
1f17ad6dacef738c54cc8bfc664fa4a3ddb62bf76454e4d60012d3ae3fe5c0a8105a4f0f85007e77
d981277cda2b3d4327f7c257c7a393dfa54d8f31bda08fc61e75b23cdfca13ba3062a50d2feb3841
ee8f4ced4959b8162eca35e666bc3a617c0e7c3260d553c1e2dbc6f516240bf8a724c7b726c7abc5
fd21b9a5b3abd4737288c9be2ead1eda76771fa2f6d703a9e4133b3a868aeda8a294c780d613912c
c43b1421c6689a99f71fd8d4da090e0ceb831df5fa99f240c4e3456e78851e8425ec5b4c7b657a6e
1ab0dd43b98be22183c8c6d6f8246214341c4a6afca34adca5c9f06eaeefd3ee5fdd9bc5c67b9101
9210c08e3f7801280b892d027f47ebabb8b70a37a6569a28a5b3c26a2df7af542cc01e0077773acb
397c06b20f97b58dc56ffda9bbb1bc7bfca44955407c0aec971bf3ff98072e61a5dd18ddc70cfb79
eb0f7e83b57c81ac2e5f0c1d1fed356d4b23d883ab4e4c42dd1538732fda3c5cb9ead71b5323215e
1b589888cb4e326fab34801f4f987d0a9e7f3ac2d999e2049e8c7c3bfb935e1b969d67a1ebf82dee
3c1bf02884665d6b3e8097f8157f98e73339c737f160cce9e84ad32cc20bc2e67025245f6d7f5a57
8d94dfbafef3ff1e351a8c7fcf57f89bf2d17348f77496b42e8811c4354764c27ed67dd027636f35
4b8953414285a64fbbf844ffb2cbc413efa0aa83f6956dcdde2637ce43368e892a861fff44aa5422
979e63f3182dad539138b97df92365417357395d3b3f4b94cf50dd14c2092f3cf186d91c972e827c
9d0b7dd9fe5afde051da5cd4a7f53befbc565b547ecb98674af8c4d3208b89689ee6c001d54941b6
f2452acb6900822ca4934cd450888ac42525686d61097c27d84c1015f76a725dd039e78124483f4b
b4d937cf51ac0edbe36768dfec6efbe5541171cd41131e7164e425ff398c0e2dcbd917f563f44034
e6f189825ede5e82a7d1f2bff14a8cebd6d37405daf53318b220b9b7d07f60cd4031336d675c4fd6
5faac08da736302c95fd9cdf77621700b63c003320b930056fc2da9b6da9ab50c6c5ac4ceffa4dc7
fbc8db42cb9a9be31d531a57369c8b6d0973e43bda3026fa8ef2f0e4087d6215bb74828b258980ab
2320865e0f813853683252b7691bc6e18972f077199ebca7a4dcb1868357a043a18aebc1f84217c9
25f818b8fdb58f5d8887725779b6e6b1554dc25ef78806637f82594be8e89d1a6d11904a9575906e
da5468e790400c035c623efb78639e62e3590e754bac789d5bffc7c7a04f8757936501907169231b
f3af622ba847d94202dec49830d5f6d7b8042d996d1ae4cc0b9e4b0cd95266b0767c7cd4e396c7d4
27cd777957678c1d478189ce4942694e12e226eca6bd1ee0ef6eb4d3554ad50f7919cae656284aac
cc5f4746ecbf2467a882af6673e4c49381430f4fcc5108534b0e6e8afc39b28ae5597a1e7210718e
996325f6995ae555da82408c6c8a37ffa9d6c6da986f936981a1a7d920e1ed4758e2096dcb8f1a73
75cdd64c7110945cb794d44fe5da3622bb3bac60676a270207f9c30a2334496d53f0fa11da7121b8
20fc0fe589c7a665d364b356fa80880b0b3952cbce2fc84c5183b9fa687dd949f42dab4362f15636
b247a7cefc972d6d9c98c83078b4c6d38e5ce0e75d0e99ffad166cded5b4cc1ea797afe548c4258b
841641150828dcb8081499e88baee3aad16553cefa420ee909344a3454480a010d6d31b82bbff673
f14adec3f54c692b6038ebccf510e0551ab023897ef52257f4ac87baf3fdabeba471beca6a9af421
63f3baf87379100b28c73f473dacb5a7a073e2300af6cbb102febf1c61ebee9c531585cc41a96279
9b5a36792e45aa504082f2b7d398fe79b1a04b91e49a1375b4670283a4fe9b6a8d89fbb0187fd6f5
2c17724cb1943b70bef3bd5c97d997a838f32227d2f8c5c4a64cf6e92f76e5f772dc0b567e0a0eb8
66d0a0eb888134a88b584f4fe5db5c7bb2805bf37b5d91f95e32f629f99eb80210a0c9331f0a568f
dcbdbcb71e62bd18f8a290530e8eaf0d717267923a96c418e8923ef09477d3a76f551659ca08be07
38a1e19d95af50a1e56a6ac2642614ea7a3e008de475fd56c0603218cf199f7fc96ab325832d8bb4
5c0ed4231fcebec74c79e78fe186e5df881b0c57f5566e8e233eb59021896ecd89d4dbbd1ff5e728
ceb3033056bbd2896ec3dc1d43d1e37555e2c031a7a024dc00dd910743038a3646d25baa9f4a6b4a
8829cba80848fb613ae4b491531acd15f9459b01136713ba51698942f7b93c1e92674db5a99bedad
cea96342a780306a93e91acde7af34e0069f9ee1d81dbb1e416a7b5e8bd6819e3e43b5a3dc429f85
ea87fbfa1013ac84562126ab831ca46d992b83c30e590a35ce05cf7ad1604f215bcb247341d92488
30243f6aee62219d2967f4b7dfc02dfab2da81d80d9776760bd321b0064166088b4d65815fd5dd7d
69265ad6b53e393ef35b59d91cdc0123a5d2a86a953f85deede87dcf9440e26b3f30387e2dedfc06
859cf94ec6c373bd2109d818101727bd87926bd36538bd0f342b8bf6882af4e565486b2c3faf1d0d
f947cb1a4d47378592aadf56a9f960af549e2d8c16e24a9d37ac2ccea445cf0a4943f2f07f3207ce
8704eb952cb3cc7c38f5bb5f440a76fa19408eebc479cf6f42a38ca6b202c816cf4c0464656bec87
91ab744cbce6cf520d99695d9390fa19605b2eccf5232148a11c161c1c27009e0c43a60309e04cd6
f55b8b499eb4fcd9795af41cbcf47a6d3f350ce69f6415572daed156b86b2d142060c11b0f101b6d
ffc01b02f104bafd07fb52c0dcf58494f2621e228ce2d497c8b5e0dadefc1906ffe38a10df091eb5
1fe6d94a7686dcf4b94977b94a09d1165f1814646b5b8d8f6680bdf2add00538fc203aa2e9ee5d00
65c15dad8196162c42c7b8819b6996aa3639eb87aab4864c3d7f464cd6a110cd3ed03999d113a5a6
7941b1533af40f31ff0c435b64d212accb1ef589f99b2c97bd1c86837300673ce9aeee750afaec73
afb0d6f9db9c445d947792ae2f439bb518050f1cf800588e1405c1aae8e2d2182d5fd85eefac66a7
4dac421f8b7b8f02721af9804bba1e8ef2cee08dfbe3e9e912282c0aeff0898ed3296efd88276107
22aa07ac667f3cc9773094b831a3bf96db6a355fdcb0e8c673376815c0f135e4fe662d22f101ce54
3fcb4affd5d1880c04cadc0fcfd5757714961faa291ad11f36b3e80f72767c7c87bb3fb4fb1e7b7d
0ed01fc9de22e0a9d409773b283c8c795f8053e41c24f2f673db553ebdd1795772c666ba03b9f624
91463cc64883b79e6d6778423c61fe8a1263119bfd16cb5f932b3a58fa12ec324d672971de9da30c
6f55e48cc3d6f20181fe5d9e333021af60d7166bfdb8f3a00eb36e01f249677e3e8c7d83c144398a
99f5e4e0b827dee782ae6da352a06d1386d95ba36341c9e158572c36cfb5bca5071bd85d357fccd7
0f114ff9a511df6e477861d235d49bdb5b64628a122b313f46d7b29636aee6fb561e049833ba82bd
8c5def1874ff822f33add200fada92b006952cebbe08a224fa8281ed1997a37629500537333e82f2
73908717c5f0f849c42ebacea7a419b575538bf7c9d73d4d9d3fd5321933a6641b81a3a5cb3a7b01
64747a69adc0ad0ca5832e9e9023baef628ee2e720bde24c228496d91c72944945d0c5ee5cef2c0b
1be160acf75e233194d02665f384edf4c13b0f3cf347f2172fc34861cac9ae7dbed2c7ee6243e1d1
e8ac52b7c523fe842e5a05065a1c6cc5e1672aa3080101c10c6515c90fb642c72b0c2c99fc51c07d
edf7bd39892bb94287074f25219df43ec195af58ce97b2fa6f50e6c3c18865ac6b2af58dee7d180e
9667f12ad7c23e3c69292a1d9120fdd36c2be491d9b976e3fd983a1c1f54eeb8104d4a2d71035c51
061f84e937cedac211299bdc0e8321996cf5a6225ce3c31738bfce01e37e7607043b12d16f2d32e0
8f2861c589fd51e1ad6cbe02ffa7300886b112c399714a9e5d40ba40280ebc7734381655d67e8184
ca541653d45cccf5596f5a7d4d19fcc0b62b82f14b3d35a67abc47dbdf5d02a7a03a60498251129a
3bc13811569f43854ed2d65481db7a1e1c2a759d2d36c5825112c1dcd1a6e89a85ae6bf4c919f1cb
5fc970478e83acebdd3ecf1c16cb6e32412560514c8795b6d0db69b11f36348e50823f1f4f8a0843
b60e55b4a1e08c9913da71e26bcbdba32ad8ed0e543d2aacc32e75a5e7c62be67f6c83470a841461
dd1293a4b7f2c7345550e0f802653746833afe38be4455c4469ddbde71af7a4deb145410b739e834
7edacae67c35b2243a90fdca2a16b4ff701e647185d7f0a8bd65eaf46f38499307585780633973be
481f62d8ea43848ecbee7f846b08be8d90015a9dd2eb8a2070ae737ec33610832548da1ca023e231
971ce389c34a90473ab0f8deb838f1a7d71cf95a658a007beaab859210fd086c657c179280a21665
bee422896575d35ab97b4ff5ec605eacae4a5edf49dd889790a9770b7f0cb415a2209f1ab4623a16
faa868bbb0cc58f8582588e72706b9879934d0d2b0b4a7018b3b692c2d813d15722392b2c088ed06
d5fb147d3fc8c73bf0fb9d258fb6377cd38e47489e899317da279f53879786cbb6226fcd71c51b32
db41712aad7e116803a87eb1858407a3c39fad85407cb44abd0f9e1ab946f70d1dc41826e74e26aa
d2d050f1c8c311c664974ff09fda22b253750f48460f51ff3d662e9083fb1c9e8a7ca43a28df6722
6f3e501202aa16e606f7d90b2effc1ca728ea7367bc0f6bdac077445f76074c4b48a43ce418f15d0
f5a27d15249b0a05b183f98fe6e6f92a04dfc631824df6cfa2666ec59a129e888fb895e4ac5065ff
4269c1f02ef59d5a1873376a6fdcc7a4541b06b06b5628ad848570a0f70d38d3800da6f5f3ba2cc4
0557a3c9488818ed533f21fae44d60a4b6af54b90fc513f329a369e54037b903e4ddba28c9f5f947
b813ce238f0a9f87e97f7bb1367f6175dec3ae55e15682e2431a7c36691afedb6a87f4c81ae403ad
ee2f2db03bdf5304badccf145f0b60f9bac2cc9b24fef820810cd1e84eb98c9b9b776eed425bd853
746e7b351006492e8cce7217b170fbed015c158cde83c9d2d8ca3468a76a6befe8af04c3f0b7f338
10af03a541c44194b01381541b00225d25cb39fca60a995e9574c8644ad935d047a86716027df2be
698bd263799f88c7dbfd6fcc9b1d94b763430b1a3a48a94758b0b2a79d736276597d1aebeb17e1e9
fe7716e5fe71f8214657f53a7be597e96023e856b1cd5ff6cc96ffa6d30f7adb7d10c31905683177
70bf3feb7925934d3af1b9e0288b38c27dc3c512ccd4cafba27872417cec132ca78009aa5cacda08
fe111e830d1a2a77251f6a3a8460c20f4b74a9c2f62725b3e334b0c1bc49dcac4571ea80666dce14
b7ce7024e1b5455f9a97da2f69de460305fcc8405a10455d688a0e4321897cae8e2262e897e31337
17df0a3dfc9795b3ee5eb944864120f334872b8a224a95b2d497bacac0d72f38d88ee10028e5e704
14c0a42f0c12d78205d35d17e6146426b3265c2c6be19ea44430e62ffa4d97100aa3c3fb8ee1eea8
2aa309d3d232f23efc98d4c77fde26c8ef00df2a16c3b9f90b6b5c2f88565c2f87ab33f873895e57
c7c32cc3f185914cf930070a47df5deafee9530dabf72553b865081d032323812859297a1c2c0a47
51bc30a984341858e00d2d2ed144ddb3d7837c54a9eb5172a919a6f7778c15aabc9213401535e1a1
a1ad83ced8872c477263ee5c26109d28c5363c0626e628a20343c936cca4a27d5a3cbd32c5f493fa
3c81824b4f1862bfec4f98b2f163a2d6620992c4542648b469b208f4075d24a500f3a53c4183709a
529fcebdd824f97ab2262605fea4f9498650a908eeb56ab9c307e3a64260a0532d47326ca253090a
1b541dc55a539ffee26b64b7999097f1e609b6fed19cae45b950c9bda5deadef2d2e4723f04b4948
10eb00291f3050cee912d00313a53fd421a5a228b0f7bcdbd23bcd4a2bbbb1f74462dde6d32aeb97
708d901503434705d8bb0f648682c0d7992f0ac99fb54abc971e8cb5eb3e5e558498f71f64f52adb
43da827341c5dfe060084de5a603f10bf4926bdcd843523554f7acb19a2e50ad0d063b5f9181929b
cff0af61a322afda65813363f3985c15c673463be157c1df5353f154b928a89669177048c521c080
02aa2212d9b12abe30e0ab792ed103463a108597fc5dd93975fc6cd84f3856510ebbd462f400eefd
bab05de5352272c6b91791f6861183b1468cee8e0543606bf05b8709617579fb1721c0b65ce20fbf
a152e8092fbb4de795b4e45f0a880011c37225360e77264c59ccac52392cd508d6543d73f0218f4a
565083b0ac277a8b661bcece44256233f6627d150a25f7c6c86416dcb2da2f96d26bc21e8f86a944
2bbad625fa59960bd0025ecdd53cabb85513e29695b104c1b909c083b4c78eb2bf35fd9fc8da6ace
6ff5e929af4b69dc6659888d7e5329b1f182f08ccf9503dbe02ee5f895d3e951e8163a383a8c43b0
5fb63f6d8eba89bef39d8070755383196075b15f75a02cb960f72f9cc036400a5edf358e8bf1e977
609292aa9de536064f552469561fb99e631441dbb449d94e5812e0459d79ad6fbcd64d8e1ba9dc69
d3aa8257068595e90cb3106478e0cc23867128c93f0597ed513cddebdc02a9d98316639dde48f785
1c19a81edb47412967f044f3278f0810ec07848546348d2b65381a701afed13d9a31c8eb68ed8ec4
c5d722e7d919529e5529a7cdfd3876860a00616b075419bd95de9b11584dd8fc1943370542d6210a
c60d71ff95a56064c6a970a31a6ee503fe15ed9533f8289115c3b7e171362465efc53df952905f4c
0b227d6211885e2fd6f26d91fcddc3adf015fdf195517348213ec45aa661697d7fa0aec05c19f925
a4af40af4cc1bb74a6b98880e52e33ab47b8f87f78e84c54533aacd51ab21105daaabcc5fe6a79f4
9126b856aecfbe0531308b5e6e6d86bf3e1a1516fc2dd0017e9aab9b38ed36fc06d4731462846a64
b6598466c9880b8d1ff9d3748880872b81876037704c4674b39b75d2436312522cd1a34d10b9d12f
7aab9527c0410dee142c967a3be3609e4ade775c82160081078e980f8773c533560c44626264e6a7
75f726cd09354938a15764aea3ac3aafb71ce33c1d696be17248d111e0ac5bd463c1a94003af09cc
d9b615b185836f7306abdac367067a5628e05e9ad8958934ea72ede47e60586ad012967b5f99fc63
5aac80bef6ff30803d5accb95eac5c8b2fc062874d1ea8a6afe655cf6948a452eeb14f93781c0408
63a677aa57aa95b9ceab3d14124333501b620c1c74288c063e0ca6cef4cb2c03a2484b2033e0bf0e
0b3d8292bbcb40dfd7a9e161551f0b39a6799e05c35468aae85a9d9dba8ccaa3be751183008f957c
3f99cc0fd2d22af976524d14127d47a3b5222e08281c3a3620b1d30b89c329b36cad924a83ac0328
7eb8d747c4443d476972d8aae641d52471fbe1115116daef6ac4f5f6bfbc65276961bb27801f2ae4
f13acc3b6cab4c4f4bce1568be03ada6aa8f75bffcd6e2f7fc3cbba7b7ca2cd9d5e6607bbe011a15
c135f1a7f558df5b8975b597a5e5890b502f22cd428eef66c86dbe181e4595dd4476da9a704f3775
ef6c07163a03b2fc678aa0fbad7f5a7b71538eb6bd72f9e2247cb7e831e604240ec094205e47e019
1c37ef692163a7c633196c5c76ba2be3f4bbb984ce1d0e9fe6df30dbda30d52b007e02f40d444c86
84bad632deb541237c10f8f6fbb48106ab22e432019f7ccfcbfe3074c6b0163aed0ac0cb4d8d27ec
7c249365c9465b2b9d8739af6b2791b79474f5d53462b368870ae888388407257208f96d0b123e99
c78e50bd14954502f2b45ddff9458ef4f392584d636297f51b5defec96dd07a7a8ab54ac53935319
88dcc68d1a6100558548ed1ab69cf0c13669463d7ac4502762d09494e0e9dff0f38d23c3704433e2
bf200771e877465fd06a0281d16caa7a066b8216e70029adc0dbd10e24839ec498d2216cf89f1b52
e7bf002c41129e4ca910748bc8b9c6091a87bd2b4a6d768f2749b482cc6034378da88563b135f344
1194c2ffb660dbfb6564cfe17c19e482ffcfed31558361415d5bfa7bad86524d861974d58ced6eab
f2cfb9740198ca36bce98b15edfef8f3b3f4d17ed646e004827985bfd30a29be78333a25e9e9aa98
f29f4e538fad73f5b235b1707cae1485cf8863e74acdbcb98bfb67f8ce9a4dcdbed73b228fc314d3
a64047368805e0bcc6246b29eec613b397041ca0befbc385c544ce487548cb0242d93dfc133d4a2d
eee5f82b73f1e4273f1540e1b37d0499cce1952de8903a6ff33a6a2368ade6314547b431cd07b02d
4018b965eccfe8f1e9046d3e5393126e6a14e12785d88f9f65a23c245c2e2369129e936d32d2720e
900be9a60c3efaf90691b3c9d46122dbd6d1d5e0173a4eb5f0bde2158ca762a30b4cf66173b251c5
85aa0b7e2de0eae98e2108b14e268f6d054e6ed8d4302bbb3a4cca55b7185d29c0a056913cad86e0
2b209970489416d8999e456c2d339178df910118ab9f7257b4eb0ca4cda0efb8ae81bbd6cdb5886d
56cbbf3da6518ab23460c810ad0a662e9b60c9632eb5a6526d2f91ded14414c288c285b43fd685ed
f25684947b6946cfe0b90378aabd4383b3acc2c63119cbc8dd7e56768222bff2d574c4a89642233d
aae5852520015506227067e82173d30c0f5a705ee50f1c55f34a41f0c2bef467fb6aa67bb352e994
889feb3cb5dcff1425e2c74f30affdda218019297c8f2f291df67f76b4d51223a295cd41dd0a016d
28d922e4cfbcce63bab09463eb1cf8d811574d187ed8b0428de9e509da5a99369eb388d020972e2f
885c8bfdbe2fba54be7256f4b050afc7fca7dff3866ad1caf20641d2e016f6019f0def48efa75c52
c26d45939a40f46b51e39e7672e031d6038915293a85572f46141b770cb8593bb1154b637edcbbf1
91ce9ed2ad472a71a698a2568d7f4f25815062f28fea42ffde4dbb7d5c8e79add9aaee28b29ee038
daf42a9a6cc455e452176d1a098bc80a29e750efd890898fd6bc4a301945d5a0dc361bcd5dab07cc
d4618e8c7869c94f2bc9609e1e29c1d35107fa717a184008a2415af33d9d6b21def5a54420bd7279
ce5eb70560b146fea69f686582fbf5e35540299a668688bbb5d2263e38d44761fd98371db07c0a7e
1874d3fd5063ea89c47a3ff00aaa413ef87bd5cace261f678bf014bdbfd8c7ed1c15673b88a54ddf
cf370e6101e20c0a5f70a86f5fb9817dbf3debb8cfe55e18abe90ff38da06286f369ee752fa38761
6ff1eaa7a31425bbd79f8621a6347fe6fee648361156ab7eedf5c192be742a8f3acc8cc3297f1006
975f619b3af3f634ede6cf344503582472e48dda714b8d61b760d15fa69f78d304aac700669a27cc
e112fd5be45ab1690cfee4451d
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
	Run	PROGRAM		0	-1
	Glue	PROGRAM		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	C311
RST	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	C311
RST	C312
SET	C313
SET	C314
RST	C315

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	C311
RST	C312
RST	C313
SET	C314
SET	C315

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
SET	X18
RST	X19
RST	X21
RST	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
RST	X20
RST	X25
RST	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung $Main#2
// Offset 5
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung $Main#3
// Offset 10
STR	C200
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
HALT	NewStker
OUT	C700

// Rung $Main#4
// Offset 19
STR	C201
DUPBOOL
ANDPDPF
RUN	Glue
POPBOOL
NOT
HALT	Glue

// Rung $Main#5
// Offset 27
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	5	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
ONDTMR	T17	6000	C319

// Rung NewStker#5
// Offset 15
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#6
// Offset 20
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STRN	X32
ORN	X1
ORN	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#7
// Offset 28
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#8
// Offset 32
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#9
// Offset 39
#BEGIN FMT_COMMENT 
"Pre-Run Setup"
#END

STRN	C303
ANDN	C304
OUT	Y4

// Rung NewStker#10
// Offset 42
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17

// Rung NewStker#11
// Offset 54
#BEGIN FMT_COMMENT 
"Machine Stopped State"
#END

STRN	C303
ANDN	C304
ANDN	C319
ANDN	C9
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"

// Rung NewStker#12
// Offset 67
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#13
// Offset 75
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#14
// Offset 81
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355

// Rung stkr_CycleState#3
// Offset 31
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#4
// Offset 50
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	-1
ANDE	D3	1
AND	ST2
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"1000"
MATH	D1	"5000"

// Rung stkr_CycleState#5
// Offset 199
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#6
// Offset 214
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
ANDGT	D0	0
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#7
// Offset 225
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
ANDGT	D1	0
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#8
// Offset 236
STR	C317
AND	T101.Done
ANDGT	D1	0
SET	C376

// Rung stkr_CycleState#9
// Offset 243
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#10
// Offset 246
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	C311
ONDTMR	T12	0	Y12
OFFDTMR	T1	500	Y12

// Rung stkr_BufferY#2
// Offset 7
STR	C312
ONDTMR	T13	0	Y11

// Rung stkr_BufferY#3
// Offset 11
STR	C313
ONDTMR	T14	500	Y10

// Rung stkr_BufferY#4
// Offset 15
STR	C314
ONDTMR	T15	500	Y9

// Rung stkr_BufferY#5
// Offset 19
STR	C315
ONDTMR	T16	0	Y5

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 446
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 450
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 472
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 486
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
RST	X32
RST	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

// Beginning of Code Block Run
$PRGRM	Run

// Rung Run#1
// Offset 0
NOP

// End of Code Block Run
$PGMEND	Run

// Beginning of Code Block Glue
$PRGRM	Glue

// Rung Glue#1
// Offset 0
STR	X58
ANDN	X59
OUT	Y54

// Rung Glue#2
// Offset 3
STRN	X58
AND	X59
AND	C319
AND	X62
OUT	Y55

// Rung Glue#3
// Offset 8
STR	Y54
OR	Y55
AND	ST2
OUT	Y69

// Rung Glue#4
// Offset 12
STRN	X16
OFFDTMR	T0	1400	C0

// Rung Glue#5
// Offset 16
STR	X16
AND	C319
OR	Y72
ANDN	T0.Done
AND	ST2
OUT	Y72

// End of Code Block Glue
$PGMEND	Glue

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X32","","","Guard Door SW"
"X58","","","Tape Glue Manual"
"X59","","","Tape Glue Auto"
"X62","","","Machine In Run"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y17","","","Machine Stop Interlock"
"Y54","","","Tape Glue SOL Manual"
"Y55","","","Tape Glue SOL Auto"
"Y69","","","Tape Glue Pump On"
"Y72","","","Tape Power Relay"
"C9","","","Stacker Reset Press"
"C200","","","Enable Stacker Program"
"C201","","","Enable Glue Program"
"C203","","","Enable Stacker Test"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C311","","","Stacker Operation Vertical Bar SOL Buffered"
"C312","","","Stacker Operation Ejection SOL Buffered"
"C313","","","Stacker Operation Compression SOL Buffered"
"C314","","","Stacker Operation Transfer SOL Buffered"
"C315","","","Stacker Operation Load SOL Buffered"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Stacker Start Up Cycle Delay"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
#END

