// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
d74d55f484bd4f5583cf2accd51fdaf618934e57a2bb7e668869f469cd9d953dfe133c6a7219a947
941474d0d7d592a9e34cf907f48db2c9cac02cea61a731743aad6e68e0bd6c28f36b1f7b6f32b462
1b6911b2891059bd12feb211859d6a8a4cc7bb9df7d6c303c5d8f95829a04362f9d2b408d3599b30
295f2d2270ff0884503b1ed11e16e2ce66a32dcab34d41ed17f90038fdbc230f3995d6b41a0af412
5ff79e6dc6b003b3240a20303dc2afbf40dc18790e322cdf728cb4ae96bbb63a16ca0752acd957cd
c8f9e66bf223f8db442750b9d794d1c42bb2835a9bbb0586cbcf3efba70a4f98016eb765281538b5
72fa4b14209f3b22e7214d49a240af0ac208b7ea358def7fccc834c4c30c8352abc313afafa92661
a2c1cda8bae1448a0050be2bee5ff81192f81a5175d0772e9937d699d8fabc4870cd1c612487f588
48b0d47d0e4306d5a2f2495cafceed82b89fa7446baae2f7f9302b6cf45e1f1ddd063efeea8711ef
7472338e59a12473d3244895b58ded13dafa1b143ecf65a69d73802f192b7c4c1928693d906bebb2
09f0edc1cf0ad7fab4a5b1884664fdce423c6e8f6467ce9a1c7c8259d10724039e4fad6989e22faf
4d17d1cfe102f454ef07e406d52899c04b1f13976ea441c98b1269d7b844a0d50c9c6da278be8085
a72c1d02bdef3439804c3ace0925720aaaf0c9257f6ef30823831de3e40b5a6d2f9bed288985d6d9
6d5cff3ec387d59106bcb6b9fdef2e094777abedd27f835e52acd00be17496d986360a40cb7d8d5a
a3cebd4e1d184f66d66da2e9e4b275c27d32fb4a4183ab7cde9e6b0567384439493e51bdb7f87a0b
e0c7ac32952e27f8eedb15b0f778990c5341d1fe3495aa0ab3906a9e87f1e4d79bca0b2d4b38db18
239752197d926ae3bd0f22264a0fa77eac8d698bf74997c670a2faa4974b4a064f47845acf3bed39
ceb3480e0053efd0d94360406234183ebcc72be9efeba2f7b7c5b16da73576e0d664bc3c057bac34
eaeb9d79c33f7883041f97b363e650036e3805e6ce0c2ca926e672bb0ea5ecf8c3c11ce38fa18773
07eeeb02c17d71ab7a9363cb966b405231cb329bb516676b6caaa846832d9d89c699089a3b5a3643
41371ac0487b9d37624925373d317671db6308bc7d6c96cf902a97b7df73c2bd8084139f4d213ade
8a619041d373cde45c7fba0e39ec24f15e7a5c1289e1f29f2d828e6f7be99ed10c3e6b2da075cdb8
59a9e3e2f59af666b62f2aaa71576beb3175cbf5052d977d2a1871624b8e5da222db6b57d92ad8c9
542019bc42866fbce458781f94215204bbc717302a67929d63e5bf876a79d0849f5230bcfaaf6521
923ffe515b1e32b3ca965b9adcf392c4927b3565aaf70ba0ce476836a11bef36dc53d28216c10e4e
d4e4ba71e852db6d28bc4ae9a33dcaca63d7efdc180112d53c1860c0c350be616f744cf48d8cff79
d0d1f3e2251e7579bb6629fc089bd6fc009e0ce6347c319f96e5d8e6d641cdb81e98b9ba9e075646
bb69ccfed950a3932e5e83e66166c80fc39231d202c4b6a85fee61de56117a7a3575678baca445f8
65c383f3bb179094b3e6445f0de5ebf3f71743a02c1f0194e780d6257269a50cf72c18506fd30551
79d61f00f607a4194e7664f4aacb2a2a4b5530bd850e60452dc57d68cf9c3abce0880613a5f6dd38
9c173dbdb1908f8e873048283779bc6f28b433a1616209e10750ea83c762586400af576dde202733
7e750c5300b55b6718a99b67403d95361643818e4539ddbbd28dde6b05388753c1dc4a40cf834295
bc1ed0ae4a2c451a49fc5ab1a4bb3655d01d307e15d9c40f5586e2d067f76ecce1d0de05fb169674
1e23dcca7184663afa465540f62697be93cb3e7525fa7511b8609737e4f2f336d7a46d242409bb9c
d85b30d411c9d410b8d6a3c7ec5848d3f90398d09bb697785e02c4b9d4e5f6a46432c23736a0399d
2d7b5f719c04067017898f13e4bf268eb5ad95168e2b5b2536af7129fd7ff4bb322af9e60fb1d57f
e18676cd133151c0bc620d94ce12e22d554fca830c23aba80e6a93bae07466932894c620d57427e9
4a09ac1cc3ad24e7226335b75f6d16c4704f540346a6a91369d40f494a53d12ad7633464117c5bcf
47ddb44b4fe7be2a7cbeebb8dbd58e6f53c695536f9b64807679c0b484106443cbeec2d183c3d5db
c1a1074b6aa30865fb946a55db0bdb2480665871ca7e59070e534063be463e4411772f228c9edafe
76b1f33aae6e55cd2e3a0f5b716686b7249dc60918b205c45713eb826a717e6aea4bba5f7f41d5f8
5e7751c2955544fe3a3752e56da8e719560ba7039194612efc281692879667cebf5a3ee5490b5d40
e0b39a2cee0720e0372280a1a544a327a1ff8b56508a52b4e2f27b85a82db4cc6d7a72d6850f3524
4f7a951d3ec2a6160a87f6a5b6aad67a56374e37ea76e4be17cbb36b1a72c8c8c002f3c6e44c267b
b0b319ce9812217d93a169115481111f00b9227944561112406f03ddd754aeef37fd8929d9af7a98
455c74c3783e87501ab77cd62345d5d896863217df1e5c8b2bb4aa1000bc0d0a57af1ee21ecd5be2
354391600105e877a4b4fdb119da0fc24f3431c6c282505c2f3e936ad624847b51e6f9712b1ebe4b
1800ec46b499f9664b36bcaa8cca2a06afdc7cd2d0065bdb200c4fb0f24f2eb34e151b95457406f0
b383486bb08527e6a4a8888d22746dd8185cedcde7e5de34387d229b4935c8fd48636f16c7397920
b7c976cdea9b60a3f7fb975cc97ead6ab7a9dd365701a369214fd6b9d5a4dc953529dfa22135df26
dec93a814b4942eef78035d3a8c01a1639d6d54c98909cc95119707bdcdffc0e6c8eff1d36a1634e
72de2f1346e32494934ce9863310c15eab2c021b8e08bc70645d09e24d201c36e8e5b8f314c0d8c5
2bf20769ff9df1db8625250a6c658d44ce316aa605fdf4457013c7c11c741faa3fed27237d3c0157
87fa5a020bf1b4ff1127e85c80f7699ddf699336582bc813a678e83826e98099f66f060ff1ef0248
c4494f7c59c6fa96e0a0f677b2f41a331f8fde29d3b4f41887284248a17f9cd674f75714521e61db
56fce2cfb4dba8d4db15b8c0c39afb2a58c9f03cbb34bbb57c8fe6c48ba50d19946661b12de5ee62
9c9875aa2cbc25823f1fc75a4a29daefc0e2299800cb92a1253b95b33380dbf719997c6404112e89
1250fb6d0ad9121a1d0d0f3796e4358cdd82c074115267b6bd638d74114d05bc4849b514aa3235e5
aa937cdd7f23d1d4a04413d11d6f92097ecbdfc98acfb21c59c0c53ece604a0679c3c6d867c3e5be
81d797dadfb7ff201f6ab8adcc2de59aa89d43a09f2532e90976ab2430a6bfe217e992207dffdf69
b908211a33eff5a901fcf806c8deef3e61d91d141303816b0313203c72270b48c63900e9f18f2136
0c90478f41f434506e38b3ad23938f85965e078e0c43b5ff3546e77d7888fa0db892960f8f07ccda
0969707dfedc03a33fe010b0ebba6dcd3d5073ce22e2a0eb3d7086fc375cac63f912e78be2c40d0a
a9c822a0980cb04816143f8949f78c59ea96e6845c8f4916f3defbb9246bbeea45008d4553809008
e365479838a6f9b0273a867e2b75b9a4aebda95125a6e91f15de1d1626ec31025e11c4908fca9fae
47c422f9e93c4bfaebb837df7f37d98edf6305396b8697263325665be6fa7693be1516b7ba67c701
39ef6bd9450d9925dd9fa945595340946d017bcb6d61e8500a6fcbd728c415953761d625d3c39c84
0cdfa8804716a00e08adc675e8ba38a1ff15ef08331917f2ed94bd606a5a83f10afc2e51ec70cbe8
d2088e49cb357750fce1ebf8c0491c9fd02690fbd9d2e228c95b1eac86826b6ec0aa16fb2c339345
5063b5318f93305be87523212690506e12f358245436813aa6535c0202407592ed76b4b2ec773478
a339ba6e19a8396b24cc6c24aabc1661f3ccab836e0495adf83d019a237f1abec2b2f543696d0400
ce0315c656cf64b1c6646afaa552a7195edaf6d7ee58be66d75060b6b4dd3ec35afa00e7d2f8c777
9d5d0f3a4e9e8268f91fcbd15a87610ea5a303a83d1a5d6b6254d993f47dcab65dd7167de6c671e2
cc8eb15270ab3855dde65da820b63fb3f3c8a604d3a230f302e5d738c8e76e108972c8d5ef098534
81208caac47a77e7119fbfb0caa11914bee70011e775f1098a5c6ebf16a04723c186dd68c02ec801
528f18a3b0415212996ba72727de930052c1dbae37c5410f0a2bc8b3c8bff0cf4ac763c13eb4ee50
343eb83385e6224f22d3fbd6b8864c5f1500b15643c4ba5b9e90754dea609858c0f3dd38ce438572
c3e2b0e7df6b7e69e29c12c6154a33665410ace20faaafc66e4d24a7b16ae2fcde0525b6e9c438c6
81ddf1c098d1929eea2510804fb9a329497fc6cfafab1fa83eef0fa75ddf8215ddf83f23326a84da
aa991fb2a52a128cad963be7e10d9466d963769a1fa6d2271b46c12fa5cfcde1488e588e555e53f3
82be1034f750d571d21e7e6cce3ea5c79a53e8443b397ca1b845c2c4162df2bc8ddf1a89ca83a0fe
c102c353ba16aa2c98a2117c4f4ac90d03e1b84fcc22e01825fefcd0d0005e1f7bf4df881dfc1b88
b45884cb02a9dcd3d1bd2d4633dfdcede275cf228afacbcb908abfd04bcec07d9a9a09da30dca955
2f645c12d391a4fd6aede2388ca8b79e051f8297d569aa5d9a57eb27fefa6e44b1c0f9a05e01c8fe
bd26774c313ce9eb9f98475824ee56ab91843210cb1692103cc0d98551866e0b7ac897ecf1f088b9
e335f02644d9b8bfb56f9f675c2dd5725e4ad776a9b1e7a7d5cf5f906c3ab38e5ebd8713055ed6b6
847f3fecc1ccbbe59788a366f9c4d4e1a61112ebfb08d3c541c5d9d2e58b4b60f0ab0e09efd99e29
6a62ad0a01dbef870cc7529f9bff3f8ae0a804c62bc7e35000b0e5207b4b3b3d19839a1690b22d77
abb200536e22604c71103929ff19be371f330e80fe089ea44b66d9b8d81d63c1080c3397438ce4cb
9e56fe6d642f58a5a02c0d7aa9ee86d1c3f85f31e7e5160c330879cb64734b077c8cfa644e324389
9fca4ab65ab6d18486af38fcc6b55c78ba6bb133df7f6103ed799cb563bb0ea788ae7e2e3f16fa34
837fae269a80fa3ff2c8a258b340356abd6c4855ee58221fc6f9f62c88ff8d30b7d06f7379ea8394
e257b8f31f7908a8ae42acbe8804c7d2d19a0e52eed82772c458a969236904b183c026b4cc977a23
23467922e7d03ad9d36f07fe26881ebb377e2d061f3dcb1a15cd59ff66822bf7d636d81f5c5a0f65
2eeccb90ec6fc8ab47737dbdbc8adfd5f3b4354b9e7cebb0bfaebe5fa0fbfcb2d74872d1889eed60
7f76f1d47251df00b427b1a025fcc524fa6e7acef0b7b584f9aaf396e1b1588e38dc2a45a5c09331
7d878fb34f990c1f6cc42ac08715a6e5d8b3edc209577a5aaf8e4baa1544ffd9e4a24a50ea1c826d
3ec175af98a8fd49d8b33684d4b94e3f868460bf5b19a37e75287a357012ca01cd0dac420fd5a89b
585ae0090cb701999b543c06c7f495ef704bb66654cef9784b4ff29cd1a6cdfe37b2b1b4614ca86f
db92f487b0c423819b22a6b2843e228d210f1396f68fd69c449150d04ee460263514e5ad4ef1da50
771752413cecaeefcc79d421fac217c9b4750b90efc48bbe4c00e8aa13bb28f67b1a4160675813cd
d11eff4df2f775ad0ff7a6a6efbbeaacd22d8e217f802680b68ba67283226ca09983cb64e5c4728f
03a2e998e95758c26bf0ea6c587125cf8797c0d7d21ac23ebef7f694f1c2e8233a6d8bc905b8e4a3
9fc72a09499881bee2c8c1a531f2b0fbabb8ec8182168e37bc15ed6fc700d6f2bffac3ba2d266191
e3e0474f4efef2be150df1df49f163f3048ba887277316e0ac1bd766c8096973b1e7c0ef7d59a9ab
ff95efb6a4f16df4fb06555370578a53c1133acfd3eff0ea36bc2b7b5a0e777be67ee3961d494b15
36b7ab42312b19568a98bbd7bcf3d613dfbf4d7888938d94bff43ff954d6d5abda9a82b488b6d75b
589f681b38e0407020c23be4de400bf1b2f56fe7cdcb950811d038a213578240e3951fd621de8f78
e6cc743e0e80498da9429478ad9a9466e53558f520008171c9016f14044ebe352ab17d7e1e5545ad
8375d0918133a17a284c7f38cb59fd729121d920548b530132915ea214be6e0e136197b634ef6cf8
6e3d5bdb21905889798cff972425e86cbac55f046e1917e44c8596e672eb80d58bf159f7052f798e
f86c6b8a6d0516a200eb1a7b8aa6cf7100532459b85b6c8707df0b85ce366b6f2dc0d5e2830cd82c
5c88c4116f9adf57df27a4bf1e23c2f14edf3cee3322c2023485a9e1e100e7c1c2267298698866a6
d7e6aa7194795537e312ff4ed71b386424630b4ec224b7c1cac689fee1103c44f17ad58ace800858
d4ae0e826200fb3131b77bb0d498cb7d5cb96df03f9a3cddf1a170b63c83c733fb023914bdf66ee2
a849bbcb89ffe1eb96e363195466690de336b1d8bf067c826611c2bc797cad16f1a28d5efd22ed6a
3b7e611ea8184e2d89ccdad0ad6aed9533a00e98b4ba508efb24cd19bb58b66af3f41572bc37a1fc
f8ba0dba0a50afeacfe36288a85918829aa15a9340505202e0b36f525ac4df94732aee2c9ac2939c
daa9db71516653443844ff0cda82b926d37f9254e5dc6447d36aabc4b44e378cfde3556316a196a3
1145d72ff38071fd861289523b362a9d15d0dfd45813bfa862f6766b07582bd620684052fb8ad99e
a35c81d108a8f897eedf824437fbea20e756c95219b3995ca6ce624ea71964f297e1a3019019954b
88eecea726e71046126321ef459a3ca088573384b23c83a9f5bfbab5e7a436cd8e4388c9b94027a2
1fb5538ff0f733fe3b4376320a81f051fc77a288eb6a6eb2049ba52f86f674f3d738f4b38a127c29
4cc0ea411ab3f3dbb3fd79eb03f7a82e546e6b819886d17ca1e2445bff8801dfb207df3d5125c5e3
90fd13a457ace8473a4fc276d1b4d22d63bf03d65cea2fcf209e61e160a9d786e9810b0060af4367
1cffa859a2ce0cfc2ba36de96f4057886fed886f9d299ffb04898078df7ac940f8b73a8ca3dc48e6
e9b7d4814fa77285f8930507b1a772fcd8c1d606c36d0687d74536737f417b89b0c6364a02339c79
e009f89afabb97714919fa8ef9ea9b89f40bfd5985dcdc663b837f871a16e087b13acf688ee92772
e4a1c90607affadd41bc03ceb855939455f986e4dd20dfcf45c475e3206392454ca0dd40fa8a82de
0b65b40c1383e734adcc00b1d92ab2dc9a39f0bb6eba957366565b7c616def2ff0c608330c1b5fff
82340ecd1dedbf4f8ce19911a9376c262b2cea26bd92dbdfcf7199942e79d665ea45c41cd802974d
9b39f71a271b686e5544d46e7a26a3aba5dc355488517571a888e5383c59e59117df0e8f01c556ff
b4f28ad9ce5f0eed6f51125f2242c23cfa6194d88370c4074126fc3eec803409de2be6339cc0481c
10bd8fda0eb4e80a1137a202ff2449b9dbaf8bbe41cd0a2a91110a2707e5de5b313a200dd4e523fe
98448c84799a62eb2971a07761b58a10e3d83dcfd3f5eb9936182f1d360edb509b40872e4300adc6
488ad203d4c21639a3506b8e7c6046d2f2be43c6477480fe2f274fb520cf49c80bb65a20538414c6
6814d45797cd2ede097ae1f3761bf96cf2ade9a31c386ee56ad1894daea7bb2faf397816216ea873
d9030d8e3b28f06b8112d1ddae613dd652756338d532c4cca67a1ecff0d71898b3393fc418847955
cdd6580dd5d1406e4fae08a132cbb6ae32b129d8be655beb692a86c23de186524cb7c3999958801c
5626c9db3966d305c486e1246af6961c79c88cf43f92bd721bb98304e52a0c244e6e00ef86dfcb29
4712be40da171fc1a2e63b33ab5ef1b450700c333f31a1f53af7109ec5aeec808114b44a07498b4c
5cb8b061b090e0ca97cf1b4f6456ea83cea819f0d9802efc8fbc6f53e214359b5e5c82294020342b
1e9fd33cb0b31abd40ecf1d656e47d61d6991a5c9d5910f3a1a93d4cbdcd8f2a1cc7eb672633b082
7fa2929c5a85d91eb32253821d10de810c94256eeb6b5b38ec285599a44f18012f8ca496c108e60a
14fc06d6d4fe747026ece5df3bb505f9ab83c8cd6f7ef487dabc08b2363c80cbeb2c755153cfafd5
77140e5f5e5d52f991ed87ba78ecc8e75c4e77401c255e2c492389059e5ca7982d371f8566d382e4
8c0e5ee1e64d737198ce66ed02991fe72adc09aa7eafad51e20bfccf5b8a3ece5cf3e973c751ac94
fe34fa8ba86789aad6fc980de3d9b3aa7ed0e8dc48aa73bdd08791a3b04db9b67308c5c4a6ec4f7e
03b9346f85a8432f4788f75e835889d48804cbe3270162dd5c9a092298d9be8011075b5e309ae5ee
9ac4e2f6c85468fe1cc645e0b449c5f701c62074993c6d68409efacbc03570af39db675a70c88842
86906a12bfeb0b651c0fd6e4ec830a04f4818d35f3a1a7a2fee47e2dfeb0d5051da06854ec1831e8
90bd7943dee312d391d1913b9002e463802932e2dbff66a997b90c8b12da9a7e004d90d0d918cb08
3ccad8e1ccd3920d3bbdb7d8e712c0b76f53d92597eda0fe6981c90e267bfd0370e6b644bd559b63
c335b62848f8940a0c7d9c8c2eca151adb59ab8fb13ba961f0542ff338d0f83167f91b1b4abdef16
52d3f60d8b5b06df0322353f7ecab50f7511b9daf2632d7785cd81589dea987902662fb17d0fed52
ddd88fb96085f19e72d32ec6f07457af50fa5844843793bc45d27c960367cde2eda263cd467248af
1e07535fa08f6b197fd7dba4de289149fd6aa55c422ed66a258c6f4dc4f449b8a3eadd174a9c0d24
addda1867973342eefeb011535437f8a7685b92d09ac31876f139b30824fea2435acc7b87ff9441d
a4a51d6e3f4cf20795dd49ac56409a42e902cedb56faa0f6ce1ecef0aee6d99f26badfecd60db4ec
4a1e9aa5e14fa09fcabbd9787c2dbd57a2d2f3b1531cdce479da371a16461169b50ae52361eb3a87
bd853a5a042411c936d5b2b6d36553dba7aec93bd0c2dc56e60ce9e3a9dfbe1c17751d59ce649238
2e34932c522d7d39dd89cba8aa6c6f3c1d4a09c5973e095623d73c435539e53ad9ab00c0d0dc196f
57b9b6dc9a4f444bd6696d8de94ce70799d4f46287362e50229f8ba88042f41b1c9d20fe551fbe97
80024e0f5d3f7bc54de2b2b46c9489b940d4cd6363946c90e323d0b08c35d410afcbf467d77dc1b9
bbd9117d16bead00f8d01ef9dc1f45bce134e2a328ba74f0a652a7083d0b412517701bb442d8202d
88e100173a8e9181153b7baf1393e5026ce88b82603bb410a4c01aae06a3302c3c85bef0acf99a82
40b91142faaaac961778e087ec7f1461c3cfbd8bc4e9911ab8d7c12a412cf555efed5ee5ec38c2b0
1fb6f27b08cd07a3ebded6a9077e0be7e41ab0c51d2b79fb90249aa8e5d3ad9cc835d0746baa81d4
e137f91c962f61d9ea8749c83492b7a55a8efa67d2f135cda5bcab06e0a2654e66bf2590f0b48e09
2617ad16f82a62c43a8592896af740d82c698c229bcc8c4f7008b1f82ed8e663b7ad9c691aad21b9
ffb11983c414ec356b9b06e379ae30ed32418cbfd29323eb6cc459543dd589f1678234bef1f2b334
0e79f6ae60160883c27a75dc4efe60ef99eeae6ec2641dcd42995523c74b7dd8f05811c5644c9a89
ed013ad7c3dcfed3b9c52dc9b4d1f57a73b0db77069880ad39a81ea3ffc6d0d223c7eac5c5760aed
9696d2bc736c947172f905af6335a264b41594e170f47b99f6fd45fa557fcedd6b39457cd1b5f110
da8c72d68e54257ffd78e8f1e083fc009fc3014b0c631cb219d96a337485e3cf2ca38b52bbe5e3f7
09879514e81f8e790917ac05d9bc4fa7db7417018ff90e48ff80a166e710dc6675db5a38bf1fb488
c93f4d0e5b106aa2c97c2135ac1f0d50155a8317df07cdc161ad0aebe7371a326beb839666a94611
c2fa6418c4fb786a458b9e4bef1900bbe3286d67dffb2b930c38b25677a557316e5645e6f6b8507d
41c9d4c5200863ac5b00d90d8876e88c45e5d0c157392f600f5bd6ba0a123bc3a6fa53bd286d8674
c48b6577e73ea7ebb48ceaf4c7cb6e1800d704ed52f4a75461c8ac5d7245f05ed01068c4a2722bd9
b47df1359e7affb3ade02025ef3785104f16607329eb6b699886835c166a5a6c1ef5590f367c5b43
1dcb407d4014068418e0b4b27dc6e4f4fd6c4715d03602cd3be075b12d7f1cc34851152e6e50fb22
e4d8a13a96ce49e52b6373e0bb0c112335fa59ec486fd4efd8b335e3448e9e83ad1c2d18b8739333
56a4be1d3f
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Stacker	PROGRAM		0	-1
	StkerStartUp	TASK		0	-1
	StkerFaultCheck	TASK		0	-1
	StkerCycle	TASK		0	-1
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	Y12
RST	Y11
RST	Y10
RST	Y9
RST	Y5

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	Y12
SET	Y11
RST	Y10
RST	Y9
RST	Y5

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	Y12
SET	Y11
SET	Y10
RST	Y9
RST	Y5

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	Y12
SET	Y11
SET	Y10
SET	Y9
RST	Y5

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	Y12
RST	Y11
RST	Y10
SET	Y9
SET	Y5

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STRN	C305
AND	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
RST	X20
SET	X25
RST	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
RST	X20
SET	X25
RST	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
RST	X20
SET	X25
RST	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
RST	X18
SET	X19
RST	X21
SET	X20
SET	X25
RST	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
SET	X20
RST	X25
SET	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
RUN	Stacker
NOT
SUSPEND	Stacker

// Rung $Main#2
// Offset 5
STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung $Main#3
// Offset 10
#BEGIN FMT_COMMENT 
"Test Fire"
#END

STR	C701
CALL	Stkr_SetState	0x1	DST511	"3 D52 D3 1"	"3"

// Rung $Main#4
// Offset 20
STR	C701
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung $Main#5
// Offset 28
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#6
// Offset 37
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stacker
$PRGRM	Stacker

// Rung Stacker#1
// Offset 0
#BEGIN FMT_COMMENT 
"///////////////////////////////////////////////////<br>"
"// Globals<br>///////////////////////////////////////////////////"
#END

STR	ST1
OUT	C40

// Rung Stacker#2
// Offset 2
STR	ST1
OUT	C41

// Rung Stacker#3
// Offset 4
STR	ST1
OUT	C42

// Rung Stacker#4
// Offset 6
STR	ST1
OUT	C43

// Rung Stacker#5
// Offset 8
STR	ST1
OUT	C44

// Rung Stacker#6
// Offset 10
STR	C45
ENTASK	StkerFaultCheck	0x0	0	0x1
NOT
ANDPDPF
SUSPEND	StkerFaultCheck

// Rung Stacker#7
// Offset 18
STR	C46
ENTASK	StkerStartUp	0x0	0	0x1
NOT
SUSPEND	StkerStartUp

// Rung Stacker#8
// Offset 25
STR	C47
ENTASK	StkerCycle	0x0	0	0x1
NOT
SUSPEND	StkerCycle

// End of Code Block Stacker
$PGMEND	Stacker

// Beginning of Code Block StkerFaultCheck
$TSK	StkerFaultCheck

// Rung StkerFaultCheck#1
// Offset 0
#BEGIN FMT_COMMENT 
"Pre-run check<br>  "
#END

STR	X1
AND	X33
OUT	C0

// Rung StkerFaultCheck#2
// Offset 3
#BEGIN FMT_COMMENT 
"EnergizeStackerJamLight<br>    * Air pressure dips<br>"
"    * Guard door opens"
#END

STRN	C0
ORN	X2
OUT	Y1049

// Rung StkerFaultCheck#3
// Offset 6
#BEGIN FMT_COMMENT 
"Stacker Shutoff Grace Period<br>  - True when:<br>"
"    * Machine is running<br>"
"    * 6s after machin has stopped<br> "
#END

STR	X16
OFFDTMR	T0	6000	C1

// Rung StkerFaultCheck#4
// Offset 10
#BEGIN FMT_COMMENT 
"PassAllChecks<br>    - Air working<br>    - Door closed<br>"
"    - Within grace period<br> "
#END

STR	X2
AND	C0
AND	C1
OUT	C2

// Rung StkerFaultCheck#5
// Offset 14
#BEGIN FMT_COMMENT 
"Jam Timer Detect<br>"
"    - Detects dip in max air pressure<br>      * If air "
"stays at max all th etime it's not being exhausted.<br>"
"         Thus the stacker is jamed."
#END

STR	X2
OFFDTMR	T1	3000	C8

// Rung StkerFaultCheck#6
// Offset 18
#BEGIN FMT_COMMENT 
"Check if jams are detectable:<br>"
"    if: <br>        * In grace period<br>"
"    else if not in grace period<br>"
"        * Not reset pressed<br>        * Not Air has been "
"on for %3E than 3 sec<br>        * Air pressure on<br>"
"    then:<br>        * True"
#END

STRN	X8
ANDN	C8
AND	C0
OR	C1
OUT	C3

// End of Code Block StkerFaultCheck
$TSKEND	StkerFaultCheck

// Beginning of Code Block StkerStartUp
$TSK	StkerStartUp

// Rung StkerStartUp#1
// Offset 0
#BEGIN FMT_COMMENT 
"GraduallyBringUpAirPressure<br>"
"    %3E Holds air valve open till fault occurs.<br>"
"    - All faults ok references<br>"
"        * Guard door is closed<br>        * Air is on<br>"
"    - Air pressure OK refrences<br>"
"        * Air has not stayed at max for more than 3 sec.<br>"
"    - Press button will clear any fault exept:<br>"
"        * Guard door is closed<br>        * Air is on"
#END

STR	Y4
AND	X2
ANDN	C7
OR	X8
AND	C0
OUT	Y4

// Rung StkerStartUp#2
// Offset 6
#BEGIN FMT_COMMENT 
"TurnOnFullAir<br>"
"    # If air is up to pressure, open full air.<br>    - "
"Redundent fault checks.  Could not possibly have changed "
"state <br>"
"      since the last time they were set. <br>        * Air "
"pressure OK<br>        * All faults OK<br>"
"    - Valid Inputs<br>        * Gradual Start Valve"
#END

STR	X2
AND	Y4
AND	C0
OUT	Y16
OUT	Y17

// End of Code Block StkerStartUp
$TSKEND	StkerStartUp

// Beginning of Code Block StkerCycle
$TSK	StkerCycle

// Rung StkerCycle#1
// Offset 0
NOP

// Rung StkerCycle#2
// Offset 1
#BEGIN FMT_COMMENT 
"1. EnergizeVerticalBar<br>"
"/////////////////////////////////////////////////////////////<br>    "
"# Hold itself up till Eject out is tripped.<br>"
"    - Air Presso OK redundant check"
#END

STR	X18
OR	Y12
AND	X2
ANDN	X19
OUT	Y12

// Rung StkerCycle#3
// Offset 6
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>2. Stripper return<br>"
"/////////////////////////////////////////////////////////////////////////<br> "
""
#END

STR	C2
AND	Y11
ANDN	Y12
ANDN	X18
TMR	T20	500

// Rung StkerCycle#4
// Offset 12
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>3. Ejection Arm<br>"
"/////////////////////////////////////////////////////////////////////////<br>    "
"# Latch Start OS is the eye that reads one revolution of "
"the <br>"
"       gear which attaches the stacker to the main drive. <br>"
"    - This is the prime mover that triggers the whole "
"cycle<br> "
#END

STR	C2
ANDPD	X17
OR	Y11
AND	T20.Done
OUT	Y11

// Rung StkerCycle#5
// Offset 18
STR	X18
TMR	T21	65

// Rung StkerCycle#6
// Offset 21
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>4. "
"Compression<br>/////////////////////////////////////////////////////////////////////////"
#END

STRPD	T21.Done
OR	Y10
ANDN	T22.Done
OUT	Y10
TMR	T22	0

// Rung StkerCycle#7
// Offset 28
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>5. "
"Transfer<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	Y10
TMR	T23	9000

// Rung StkerCycle#8
// Offset 31
STRPD	T23.Done
OR	T24.Timing
TMR	T24	1000

// Rung StkerCycle#9
// Offset 36
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>6. "
"Load<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	T24.Timing
OUT	Y9

// Rung StkerCycle#10
// Offset 38
STR	C42
OR	Y5
OUT	C20

// Rung StkerCycle#11
// Offset 41
STR	C43
AND	C20
ANDPDPF
OR	C21
AND	C40
AND	C0
AND	C22
OUT	C21

// Rung StkerCycle#12
// Offset 49
STRN	X27
ANDN	C41
ORN	C44
AND	C20
OUT	C22

// Rung StkerCycle#13
// Offset 54
STR	C21
AND	C20
ANDN	C22
OUT	Y5

// Rung StkerCycle#14
// Offset 58
#BEGIN FMT_COMMENT 
""
"/////////////////////////////////////////////////////////////////////////<br>"
" <br> <br>/////////////////////////////////////////////////////////////////////////"
#END

STR	C42
PD	C4

// Rung StkerCycle#15
// Offset 61
STR	Y9
OR	C5
ANDN	C43
AND	C3
ANDN	C4
OUT	C5
TMR	T2	1000

// Rung StkerCycle#16
// Offset 69
STRN	Y9
OR	C6
ANDN	X21
AND	C3
OUT	C6
TMR	T3	2000

// Rung StkerCycle#17
// Offset 76
STR	Y5
AND	C22
AND	C3
TMR	T4	2000

// Rung StkerCycle#18
// Offset 81
STRN	Y5
ANDN	X25
AND	C3
TMR	T5	1000

// Rung StkerCycle#19
// Offset 86
STR	T2.Done
OR	T3.Done
STR	T5.Done
ANDN	X29
ORSTR
STR	T4.Done
ANDN	X29
ORSTR
OUT	C7

// Rung StkerCycle#20
// Offset 95
STR	C7
OR	Y2
ANDN	X8
OUT	Y2

// Rung StkerCycle#21
// Offset 99
STR	T5.Done
OUT	Y68

// Rung StkerCycle#22
// Offset 101
STR	T4.Done
OUT	Y67

// Rung StkerCycle#23
// Offset 103
STR	T3.Done
OUT	Y66

// Rung StkerCycle#24
// Offset 105
STR	T2.Done
OUT	Y65

// End of Code Block StkerCycle
$TSKEND	StkerCycle

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	50	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
OFFDTMR	T102	6000	C319

// Rung NewStker#4
// Offset 10
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#5
// Offset 15
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	X33
ORN	X1
OR	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#6
// Offset 23
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#7
// Offset 27
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#8
// Offset 34
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17
OUT	Y4

// Rung NewStker#9
// Offset 47
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#10
// Offset 55
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#11
// Offset 61
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355
RSTR	C320	C322

// Rung stkr_CycleState#3
// Offset 33
STRE	D5	0
SET	C314

// Rung stkr_CycleState#4
// Offset 38
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#5
// Offset 57
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"2000"
MATH	D1	"3000"

// Rung stkr_CycleState#6
// Offset 205
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#7
// Offset 220
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#8
// Offset 227
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#9
// Offset 234
STR	C317
AND	T101.Done
SET	C376

// Rung stkr_CycleState#10
// Offset 237
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#11
// Offset 240
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
AND	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
TMR	T201	2000
AND	T201.Done
SET	C406

// Rung TestNewStker#29
// Offset 420
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 424
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 446
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
SET	X33
SET	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X29","","","Product Entering"
"X33","","","Guard Door SW"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y16","","","Full Air Valve"
"Y17","","","Machine Stop Interlock"
"Y65","","","Transfer Left Timing Fault"
"Y66","","","Transfer Right Timing Fault"
"Y67","","","Operator Side Load Out Timing Fault"
"Y68","","","Operator Side Load In Timing Fault"
"C0","","","All Faults OK"
"C1","","","Stacker Run OK"
"C2","","","Stacker Enable"
"C3","","","Jam Detect Enable"
"C4","","","Operator Side OS"
"C5","","","State Bit"
"C6","","","State Bit"
"C7","","","Any Timing Fault"
"C8","","","Alarm For Excess Time at Max Air Pressure"
"C9","","","Stacker Reset Press"
"C20","","","Operator Side Load Enable"
"C21","","","Operator Side Load Single Stack"
"C22","","","Operator Side Mode"
"C40","","","Single Stack Mode Constant"
"C41","","","No Interupt Stroke Mode Constant"
"C42","","","Operator Side Loading Mode Constant"
"C43","","","4 To 5/6 Stacker Adjust for Operator Load Constant"
"C44","","","4 To 5/6 Stacker Adjust For Operator Load"
"C45","","","Run Stacker Check Faults Task"
"C46","","","Run Stacker Start Up Task"
"C47","","","Run Stacker Cycle Task"
"C200","","","Run Stacker Program"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C316","","","Transition Variables Set"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Machine Run Started + Grace Period"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
"T0","GracePeriodTMR","","Stacker Shutdown Grace Period Timer"
"T1","AirMaxPressTMR","","Alarm for Excess Time at Max Air Pressure"
"T2","OSTransferStrTMR","","Operator Side Transfer Stroke Timer"
"T3","DSTransferTMR","","Drive Side Transfer Stroke Timer"
"T4","OSLoadOutTMR","","Operator Side Load Out Timer"
"T5","OSLoadInTMR","","Operator Side Load In Timer"
"T20","StripperReturTMR","","Stripper Return Timer"
"T21","EjectInTMR","","Eject Arm In Timer"
"T22","CompressDwellTMR","","Compression Dwell Timer"
"T23","TransferEnablTMR","","Transfer Enable Timer"
"T24","TransferDwellTMR","","Operator Side Transfer Dwell Timer"
#END

