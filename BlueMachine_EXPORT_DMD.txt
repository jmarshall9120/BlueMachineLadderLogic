// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
e9cfb6a4723ed0db5ecd6ff257fc8a009b0cc08aa0fe40e46b3902ea5213483fbb2dbe8922ef28da
18cb7497eb5573fb17cd648b2b8df5f54a217e1ee03abdab3aead2ea2fdd488f632d784c5bfe8f6c
c25448f211c7d57c6586c3db74701f2a77559823a17f4a70c3d613cb97276d7d0db72409edc282e8
3c939782660ff081f913da7bfa09c890ba3a2fd5cf3854ab6d6dd79125acacdcba8b6b9c157db645
f44e7458b4b9b66743cb949804a81a4dd18124f6db9290728cadd2b3377bc56f265fbf7b3155e7d1
68be5fc9927c7f5bca8ece9168a75548b99bb604917a9e11598be480c0a35f4176fad85fa9a03119
cf5578ac0d1ca07c89ec3403282c204963e8675e378501973bc28731dc6b3bd5b73701aa51e960ad
1cba3ae6da298e126c0a930b7ea09ddcc3030917cb77f4cf92abee17c2283004f67807bff317f03b
a0e71ba14879ddda54a68eff3dc33c5b51443672bb2e71408903de6a201b8ed1c452755bbfd905fc
7f49b79c0ccb4702826ede52f7b570742bf56b3c3e407b2f6c6e6c0055a2d9d67a0c996d4ec833d1
62ce57573e5595762a19ddaf989e54a350316d66a8675d27f3c5d40c160862ca4a4c6d986e35e6f8
7caaf2b34a6b8751e2a38c889a5fc90b1ea3a38f46fd7ac55fdd8e01a1d9c5caf8c5c69ab9b47bee
79527fa61c4e98506254f80489aadf16b325776f928d4556f678c3c77fc6004bfda1f4a3adde8cb0
24d253249c50cc308ea8155c10c9beab62cff8aecaa7111147af1794d4c0c4988c9aea1fcd9086d8
7a397bb95eb249ca1427758e7d2df560d127548a61b57fe13ba094cd2c942cfcf114d65be58c23cb
a93ce399143c4317d2a61154f1d89d09d321d28b008008deec486b649313d7a056690ff2f413170d
2bbf3346631200f180ac417880cc48b35ca2654a8125f197a29b20897e257b28f74867e6fc117c78
36d159813d5aea25b67d82276836d8f07f2c0afcf99584f021e3e2c2c950e6ab5eb280b552d6f3d1
6ef9d448a0005650a8ebc183fcb88d91f947e12c7976b6e3a22c53e9c6e8f7334091e89149eba629
48874bd1e029292a775dd0ff6adaa178de25b7579eba79c48b86d7b7d36a87530155262198f8d9e5
0a044cd4ebc9f44fb53707e05088de2648da810b7c726178092184afd56de5cdd5b9475fc38eb884
40e58ae443a627c6e14b67d318e50703e1ad4b17619b5c3a74254d88dce0a03c1ceb91a565e1886c
e96af43adfb819575128740197bfefc1fc4910e12c66cec0d007dd0407e3e42eb0389bbe36218897
df8ba2a22831fed99b9592270c630458fcfd5ba67b4ab65f95885037fa350ff5ef8f50a35e811f86
11a919d95a96b52be2b76a44894ee9c481403964786ddde681d2c3827c7f70e729ae80f8a548c154
47aafa24269581cde94d030cdce8a8665c565d424e77a0b6391062dc0dd322a391c22b0c8b451281
a2a4dbe65b33fdc06fef18e5193eade66dd9ab909763d203696525cfacdc54000357c1280f9d4033
76d1ed2420e27558581500890468ef1bfbbdd9f66bf3f130a52d7d240e187306dac1861e5d4eb8e8
131ecb08178fa270745867dfa86995a2eef00aec2cdbe17539fe4ef93c6110c2d1094d1cf89db8fc
38789a7b3593b79282d0b7af9721b782ec96dfa2705bbc390b91f82c0ad8808dcda9f9f5c0dc1790
b9c79cb26463ea84b5b0793206ef63da6ea60bf7b9cc024df0b4399a3e822a6a2d81c615220d9915
5d6d8fd587e6df2fc00f1000264667cd66028d5aa8900c0ae0bae88970808f72bd5da378ca974ce9
9392625bc7c12b712342df449e8646196ed6356967cf2f1a204f93bfba8730da0274a359a038cde2
a2c78346f5df39119ff423dc7caf39c385be4289942597deb113088876fb95c26c203f20ee961c98
3c13933fa89faa86bc5bf642b9568038d61013d92c2dbb2284f4e2a72afc9be215382e613f01b6df
c98ccecebe1ca84d8b3f078712ef34e615ac6edaed84f223fa21488a55cafaa6d91b9c43a0f925c5
549291f7d6a94996aeafadbf67f231184a97c26049eb71852da4166c11cc4357bfbf636baa3473c4
822599f4c587b862ce80fb2d5f28a097b8dc6a8fc363f3a8fb90a3f58fb837a48ac7eaaca34bad1c
63e03a158052906f1a0e5fcdb25ba641d9fd615cb7b6f2ce5b8c477b8d7296704f66bed9a0171af3
4b2583de75df64025a6b7ad0c95447031f02cdce95a107f687d260bfbf93388347c133c06c5e324e
da2e8903fc42aa9dd713671d1f120c21be97c11d5be46f18579bd2b8b9cff3b71999f6827cd642a1
89a67bdca7d0de6d3ae2a505fa561fb080a810f76017160a2d296633b3d598125fd69fbc84f5c9c1
ffeba10f15da8709b22ef907309e983e4627f3cd5932b076037ec105ddb1a2895fba0b875b65c305
de14f436c90a66cbbe43b5421b82ba02210f4601d4d5f20fcca4762f49882e155fd078b5a21818e8
f802ecc98c1997bf268ab0f9a0f1f71ec18a4102a97e28d24019417e6c2b38ad9f0fcea593467c1a
f21031b41c44a3864dcb39ea7ef86e9d4172e69a2ed97efb9e9f65c3f060d605bc46f03b9b070fe8
cd98214e781350c15d160941fb4a37d7fff72ba55c476088617eae3cd7f0d551f76203172d310f40
37ce432d9ae2025aca1aeabf5981ca12a8c10657b8e696a32588677687ce79591261932ffcaafd56
e07e7551e20d277c137bbbaeffba8387124b28760ddc56254d5aab029015a551db59d98b56772275
05f445c8cc7261b5c1327fa12590295d35d4db70b5650f246e8fd4e5bd30d203a89d28f8e9748715
5c89852379b6dd5b00bd094f2ced7bc61f86578ce00a394db4eb64af1243c2bd6226c1c6a8d8770f
41007e0e119d0b2890318d6a27b0b6cc68deb205012c26d75ba9b61d3ff2d78c0ddb62c05d8250ab
a770441d06a090ebf0ff8a66eea43e0a58a162313e3748ab7f201a0e663cbc3887154b07c6367f53
55ded08976b05c17303c5de9b2d76decf6e3707252edf2aaae3487d4159c7962d371712ba1d598f3
5b4d59c6ba4000c30318fd5361d524de7debb636f08dc3653d6cb787adb73d23bc9313a580c842c1
725ce931e205ab13faa8a0e99304fafc752a30384ed76519c6712bea5a4df7c8d0dc247777fda879
00743706b08374e9d999e2aacc48ee816dc76c5ac6b41ee91e4fdd35ce591a5cbc7ae65fb1ceaa44
47888dd16463b3699f6c5684ba334c96d04a351a53c91d9bce36c7d5522273d4155bcbcb03c92479
80e9e58e91d178edd1cd536cffbd78fb2e24b9347b6c0c2e77804c5f77b7a4ec66e51266021ee31e
96bbf5e6ba7b24f02175ccd167f9a8c9a544902f5ed3cfa4bab000b243b371b19bf3c8ff647b9e3e
ed7b814ccfa744df55de27634aaf67183183d40ef80b714a10c8464e07985084b87caeb4e8409174
dc4cd24d91858be961cc67ddc4699c2265ef13c007ce007b6b2942c1ad85ab56e2429e279c6348ad
94b33951a56af05bae8f9919238d08ed53107a1f2729b80ae72fe10212dc1e379431dc6cbe982254
7e754ee1b26f37a53fe000a0fb6ab983526abc388a162eba06febc8a024b9460421be6cd28118e44
df2ae57fd420c10b90095143dcadfe0bb5f296ba975099578c9c86b8ee65db55fdb46b9fe5bc2dfb
6170147f1946a38efd6f667c7ccf3e7be6e620c557ef09811c91def5f50e33fa2299480f8f0fead7
3eaed7c0e0845901930742c1348acd4965043e886eb60720b5c9f52bc333b5404f11317346a0df44
86812f47fb16c1dc7cbccb69a72aef0def642d6c22140bbd7d4311701b98e7e007e05dfd07e0e7a5
acd023f86bc65b3b6ccca70799652cbfa38a7b6b751e9df165ebbf5eabe87ac30cdbc159929c6f76
246c06e3ee5482f557991055111bba37ed798ee3c07d8d4d6df945bdc896b206a67ac379466e8bb2
75fe2e2515dff2c13d73a6f26d285d6d8407019ad1c8456c6a700bebeedb0d0f066afc1eeba8ba02
add767c14dc53d3707de6c9d7120a00254837016565cdbb0a75579beef59fd7b6eafe6a7e7d19f7c
49cee76e7b19a33cb146c104c86e343a228247f0740098e99b11fd04c53992ff47129484a3e2e6d3
88d6f848b529c110f9716cec78ff2576f1b260a3c710f728c87c9139b221c9043bb5131f766fa46e
67a7b83823819d5e77bee5564d958bf3450db977c62f178ebece8944fc1921029b605a5c52c933eb
ebe939f956c666807e904d9e41ffc9e6d5f54949cc2ff8692b712e34fc2d172cb8661df87c4a718c
4f30aa30d569e8fe2fbf24afb09249099cce045f2b1fc7538a9523c424d591301b8ed52ccb150cbc
76ebd83ca2636a6cb415dc731c22e81b5c04a9b486641acf069659afa56fb47316b62ad834bf36d4
828d7e082bdefc43912b02831f366b9a46111bb4a1b91cfbb224bfab3001fa18ccf86caff9da88b7
74e112a3a5799e471d9a5639891095769affad3a03db1c4f0647d16c39146dfd35403093544e106f
591e0c4939b849f143dc6336efa3598873cf68d5f924268025b98d2d8aad637e90853b1436cc4962
4193014ee03737d0d74b8dfcde88d457227c440025be6089e7e3a6f14dfc11f6e7745e5a10b62a35
68374d77a2183eeeabbc909a5c16604d5397f2588b4717a4b9d6ff8048125bbde687a7d24dbdd976
d3df9c6ece3fac800b9dc1c43768cb83a519f1f8ab4458e85425f887f889013a9c324c6e2c1268f8
ce490961c38927998c3843294992795b264842016912e37d50ff39228de66fb96ea9ea80ce102f65
8334423225a4d48055c843075d9fc1132326e8960e6d87a667db3eed0005532982dd86a1113fabda
bb9f9830a1cd09f1f6f5cf5919630881a7a3068a8664ec25e619b9d3579f2a1d9c94eeae33b99f9b
7e03d0663e3b485b6cc6e08bfa8253b5000fd8a62a75f7317ddcdac0dc975b3cab97fb6bfc89c9d4
73d605e57e4719244af49af19b1c08274a7a568b2a9b76f07eecf5e19d49641997e86baec8a1bc8f
cb5027f38176602e8d74492faf3718349ac0d41cbba5470e2e525856983ca29bfc1d38791413de75
d023d636cb74ccdea732c4b32f29dce97876eb1242832eea71f90d777ee12f3a74e197b2bf873829
d95e33dad56966bf630abf0292ddc90574d0e8e40c65581e7b2599e5345f3cd28aaa6ecea5854220
4aee52c66d70bd7cc983181631eef2a0d82fda352f6c8fcb2e6ddb6096fd23307728df1eb9a533d6
b167fed0092f96aae720f46c070fec55c8d25e3250ce593b923f9720ead13f980584d9380f155168
fc7925c2dfefeef8082d706f29648de673926604c071392551fc8ddf86a8b3dceaaad70fea9d5d76
1c099fef96f20764b191a1c55c94fec059b61ecb46a7d0fd9191173539d55d3828b9532d9e2430e9
198239a32ae064248867f2a482a3b680a1dbd626aa8f1e5f199e2ed37d7f1b7a3cc64fe6fa79fb05
79d92a8b0051b7a54136a243cce66aa77fce8c26de8d64662a0ce2cc3afe538459cab41d2b4d51d1
b4c3659dcbaf5ebd03ad76ea5e710128681492beedc455a18e9b75c4cec215473d1e6871b5cbf070
bf4a4d8d1c1de6551c7ab9d65c872821f8cac711ae90b244fd9bfc098b30e77e2a703d14445d0395
a3900a5e583417e560a011f57e990ba263c30e33390e50361b10837da5be8b20b1c1c9377733c43b
94fd69c7693f62fd246050e30c2d60371a3ade0ae876636320013dba947244346cc52bf16c4ca98b
409a6d7dbfa7dd5be32bee2f60f5c0997712595f091e81063b13a165755a61f93f2fb24ce1ef1527
074ef00c0ba1045ab539453db828b5b9923d08d6739216be6610af5642e481033b624a6028645814
079796ebf657089b7714541b3628cf43a57985ed36deda9f75b767c73a2403621c2bbf34d5ed0c5d
d6fbfa1f6c8ab05c4fa3a37a1e42239bbace927b7619d98423ed1af97e5f3a27e9ae747a4d78c931
67faf74de1bcf506bb1a9f86f1afd9c348531d5516abc0c5ffe7f372a49af835e2d7cbcca3426493
2c8ace1b4d89385bd471f390cbe60b84db8d44137e03e11db7d04dcb6b7c76f32be10a7021abe600
cd38c7f67a95ef8ddc2bec5359295c12f0935880a9998ba55ae93b21826ee3747ab2a1e5fe09065d
d556edbdfe9346e6080d8d6cea64d10d31c64306137f012609bb2f0cfd2c4041ef3bb885169ec211
fc1354673bff2beb486256454a2a5476d5b63d3580b0c58a53299c991199a12b323327e8a92506ed
8a4d9533af7b090e0a947909ab5876b37e4c8853c7381ea6f966c9fbd19a61104eb2f41c3acea633
f082bb6e01a73df20145a70f0840bd9f733d9d345525761053fec3d807a13da7c59260ff12e25f40
763ccc76206b324c892b19ef0d7d3fd036047024fbc2161bacc13dec866b567d17db0fecc9341a3f
afc43764c3da9d3685a51ccbbea12ddc86df6a442dfd47b7c847d16c5a8473219c79532d5b57b484
affda9acf295d80d3739051ee0740e76890f577965607b367476b9d6409a0ccc97a5394c9a598753
dddfbb78afac5c4af2a6e3360cb08b9287b269e3de83b62f2142caada93fcd00ca12b4a8da3015ee
9fc16783ecf1758cc85770efd33321643b7b3c94f44235798a8a89f380a2d820614d9546a3243246
bcae6f63361d397ddee5256add36ab41a815abb2440602406778ccbfd871d72b218354d102c0ebcf
2ea570f39381c3e9e76fe56ddb91f6fd1462cbb5257f8048c52a166ab54c4aab4c6790c517dae81c
840ecf8e047b4c589dcd23434595950c14e206210b6ce050b6cf30c36da8699e48986fde5e84d74e
f62c6db79024cf888f212095833d28127fbcc92dc40dc95f629b38420c5e9fbbbf097e5e9dc2d049
e51c3da6a207a2dcbfb29bcea5f1c71b0ae0860a1c81941970a8eddb13d8fc0e36c857cfb15381b5
634916a1eb118ee1f200e5c58b0a49def31654c5601ffbf05c03b4f883b341e3efe997007015a65f
6b7d2ff9b9e4d5660a2c7e8d51888fc32b8222e63f56d44f1cc38fa95d88e7e5557a8b3c3d410b5a
3dcfcbe5594e30a1c5eb50c85f23eb73efd1d581d514becb67357bf8e3272708c5960aef1f27c8da
b4599cbc6e9711390d1d375451e141d3e6ac64f345575d6f997e11451afb860f8a9dde043914aa1c
5af47ea0a153d94a6e2f9f34046ca1d21c45c67eb3b9669bbdb9246f542dc7b1d48032eeb4b2cf3c
df86ff63bd527ce71a544df59f63f62ea87fbcbf356ee4e873a1cf1ea659c9ad029bfa769f307f58
313e5c4228a4d1511731868b82c2fce7bd0f95019334a720861068535f005dda7ef45bd34a2870c1
ef86fb432fbe5f09bfcea77c1bd2f20468d8b80186b8a2792eebbfd3da2bf15ec03c62fd4224d0b9
c99e4cb0de3d0974f383a0bcbdfd6932e3dd4f922f45c7b673427c7e3d232336036dc954cb5c10fe
ce342dcd7c98d527f6171325e4e5d68e3dfa1e31b501ceb196423e89473ac321b13f4efae61ce1a9
b44aa7b51a1c2170cd9ed767c9cde66db3a631a228b86e1d79bede4f8edf42b2c4de9765fbb1cb77
a2d865719d4d6aa41df9492d9d3c1f9434d072fb5b1cb165bf8dabca3e41efd8721a7ba7d6847ace
07be5aea8e3e9fac278763c148e8af880e37d642907cdfdab7de0559b94add0f13e97eb8aacef85f
ed80134fcaebb42541947a74e0dee331d43712ebf2a3e973afcbf44b147cd3e1149ecef31b13aec9
026bd3258c8e0541ec047b16d6bf9661f4804955c3980fb478d1a96905fd758e19f2471ab333df80
c7db2ec77ec9fea598689deb3fbd5ca58aaf42afd850b146bf408d7a238af134795d6e4ff3533802
3d51afeed3cb056fcf3eff4f1d90a3f6d41ee6ff878cd6057d8c79b923682fb4782d5fa19b1142db
093d227a95445dd06c6fc97d84c2cbfb03321dfdb6c3efdaa6cd5fcd98a03d166c4584c92219c711
526926bcd19053dff7b3767185f037e2ce1b0c90a5ed101d29610e53510155e73362638f9d413498
0bffaf518e52bc6021ec42c33698105f373fc73d9dea0593ddc403ad1b10f236b3ce970757114d38
bedf8e3353f9994fb1ffc963402c51a850d4746c36f1ba65d0a77cc5e41e1adcb56df9aa4e21ba4a
45fedb4c35a348ff0fb0a58e39689f18f6bf47e4333ea5850726e9ef0ab3a997ab7d778cc92ef2e9
00c5aae7f7a7779b884843cda948704ea66b1559b1e921f5e59328f7b336b635e148c629d67270c9
e61ff32d9994dfc1393c4b871334d398f370b90b8c82c7404fc78316f73a9f3c7199f8de0b2e7d30
469d00aeca7e2c6ea12d3cb54a2396c867752cab990ecb142aa2f3ba1589ce67d7b06c3e636db538
242d0628dee25ae9c672b179176ace8fc21d0d62dd45474b6cdf506a831d3d785522cd6e75c3adf5
5e471ab2edc258bb458e5e2437b1f9aaef8e1d55a95ff189be312d241c431335b6576ba9e9461514
b57c70821c624f298c41da0b3296e8590282903e5d982d7aa6406522d7b0f421b6d9e3d92d63b7e5
011cddada5b126ddafe62ce19138c9576e06353fe56fd3a2535790cf6a3c2cc41522093ad192436c
b27d436c53343f14a5cacf688c530062ee5dd92adcdf36f67d62e78cbcda730a20a8b399aa2d7243
9f29fe7b2e2bdd1d56f4f22d0d3099240c34696f2946d4a4b03fd56da0195801cda4134bbc6b709e
2b7102b5f7c6d23207d6242a1310bbd86618b65fe191be56d3917f3c2a6cf208ca5f8d0c551a960e
563671de18153f9c741f179f268d56d550fc28fceb7be00ae7230dddb4ef8a70dbafffe9388177aa
ad3d2b5e2ac66be8ff9da4197bf5e841743fe018ddc9ac6e91a2ff44a2aa6d7996ae801d0fcfb97b
0ba2c509b6f527d627143333bd7678a96886da6244abe8f4a28b2a348ea2862dfa84e9488447daa5
934a490187d93c44875f5d5856ebc8c4b928818c3405ceeff9515f6097933f4c0d4313c9e31fe2b7
32658c751a3cd489fc26c18dd36e6aae635da7150e8d8df341b6be727adf312f49a9387fde2efb8c
85b1f4a02b42f6eb7d35ce710a18ced08c2ffd044ff6d469c0177eb9c74578577c03c8405d3ebfcc
7d11c4da6fd51c30be738a678c4890fa9a263a349bd2734dbc1ffe4de44c403edf2a50fe16899436
d8f04d308d140d199723a6cf4b1e7baa89f414283cec0e25818a1ae6c0063482324b59117001d8e6
700f8a501df2370f6f5af475ab6b7a124b87c2f83feb802f5d94c104410ece4d15ba126cab696961
9a612a4210c8bfa0430667d752ada5d4554d6e1a64cffa6dc82992332489c34de8472a11df14c052
cc3fe31e138abc19bc0b44ce6a4ba00b3eb5295b25d6edcc4c84fe682ed00e99d58a587136bb551e
9be33245086ac5e621024994c6ae5ac28c9c5fe4ccd5f3a0d651f92155c089593eb1658056d71306
b3f6673ea211e3e2a69bd2a19adb4122f846a430de79d92041ca854ac7eec3bd3462e17443f6aea2
b815f1674a0e3e77e8df67363036a607aa3ebecd70151a58bee2101dac4f9fc71fc0a3935297ef47
72c48d6836d7339df4d7572bbe84a365e2d44a2761c10999815c86d3de79159a0969dc6b0a3035d4
771048398d2d448525ee58cbe643657118c14839245b959d3d6e790470a82b606efd106744bd0999
6f516889a64d761cc9e9f6385f981a26cda675bcd45a9ed5e63730df4451f4036db1e76ecc5ab70e
eecb8362f6743a06c164a85742804aa6f7ab4b445954252bfb8f54821893d6bc4fb3a616553cca29
cd40e8e32c7c2ad3a6a63a7d79963f8a4bf20c0a50d75ebc016ac1f6a9e7abdd723629050a9b14a4
eedc74f51679e79c62f75b2659655df3460cf5823b6af840b773267781b90e35d3c91dc29116b97a
477396230f2e7ccbad00357263f3610a9a20d4dbf01bb004bde2113d68de781ca49958bd6f8367e0
3e33d662e880e9ca921a8c03fb08a0ad231a2a835495f65399d070b1b296ac70af6485199bb89f2c
bbd26febe27677dcf1c859a32a1eccab4936e991ca4cea8326224f6eba1bca5fdf162cb06ca193d0
21ea7c69c000e5c34250fa446afbaa09e3c07b94c9c7022b4329fdd3e9ef61c0ff0a5f6edbb394f8
a611e2e40c4dde6ec18ba631ba7967d6c75cb9da72d10f6a8772a12a6393d78336823f57c1e57e8f
7d6986b2a2009b118e7fc51985525e60a267ac1b54405aff8a6416f5b34eb98f7cd51b83bebc7e68
1df604fd5dabd27fbc78d54657d9d2f62f731c02fd35ebb78ded3420fb011ed2ca068527b1b48374
955a02458135079afc193c7760847ad4324420e30f7bfb2d02f5245b716045c5593062b9f9efee47
54739b4022fcb1a72bb1b80be81a2c2fe76f0af8e272d9
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Stacker	PROGRAM		0	-1
	StkerStartUp	TASK		0	-1
	StkerFaultCheck	TASK		0	-1
	StkerCycle	TASK		0	-1
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	C311
RST	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	C311
SET	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	C311
RST	C312
SET	C313
SET	C314
RST	C315

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	C311
RST	C312
RST	C313
SET	C314
SET	C315

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
SET	X18
RST	X19
RST	X21
RST	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
RST	X20
RST	X25
RST	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
RUN	Stacker
NOT
SUSPEND	Stacker

// Rung $Main#2
// Offset 5
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#3
// Offset 14
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stacker
$PRGRM	Stacker

// Rung Stacker#1
// Offset 0
#BEGIN FMT_COMMENT 
"///////////////////////////////////////////////////<br>"
"// Globals<br>///////////////////////////////////////////////////"
#END

STR	ST1
OUT	C40

// Rung Stacker#2
// Offset 2
STR	ST1
OUT	C41

// Rung Stacker#3
// Offset 4
STR	ST1
OUT	C42

// Rung Stacker#4
// Offset 6
STR	ST1
OUT	C43

// Rung Stacker#5
// Offset 8
STR	ST1
OUT	C44

// Rung Stacker#6
// Offset 10
STR	C45
ENTASK	StkerFaultCheck	0x0	0	0x1
NOT
ANDPDPF
SUSPEND	StkerFaultCheck

// Rung Stacker#7
// Offset 18
STR	C46
ENTASK	StkerStartUp	0x0	0	0x1
NOT
SUSPEND	StkerStartUp

// Rung Stacker#8
// Offset 25
STR	C47
ENTASK	StkerCycle	0x0	0	0x1
NOT
SUSPEND	StkerCycle

// End of Code Block Stacker
$PGMEND	Stacker

// Beginning of Code Block StkerFaultCheck
$TSK	StkerFaultCheck

// Rung StkerFaultCheck#1
// Offset 0
#BEGIN FMT_COMMENT 
"Pre-run check<br>  "
#END

STR	X1
AND	X33
OUT	C0

// Rung StkerFaultCheck#2
// Offset 3
#BEGIN FMT_COMMENT 
"EnergizeStackerJamLight<br>    * Air pressure dips<br>"
"    * Guard door opens"
#END

STRN	C0
ORN	X2
OUT	Y0

// Rung StkerFaultCheck#3
// Offset 6
#BEGIN FMT_COMMENT 
"Stacker Shutoff Grace Period<br>  - True when:<br>"
"    * Machine is running<br>"
"    * 6s after machin has stopped<br> "
#END

STR	X16
OFFDTMR	T0	6000	C1

// Rung StkerFaultCheck#4
// Offset 10
#BEGIN FMT_COMMENT 
"PassAllChecks<br>    - Air working<br>    - Door closed<br>"
"    - Within grace period<br> "
#END

STR	X2
AND	C0
AND	C1
OUT	C2

// Rung StkerFaultCheck#5
// Offset 14
#BEGIN FMT_COMMENT 
"Jam Timer Detect<br>"
"    - Detects dip in max air pressure<br>      * If air "
"stays at max all th etime it's not being exhausted.<br>"
"         Thus the stacker is jamed."
#END

STR	X2
OFFDTMR	T1	3000	C8

// Rung StkerFaultCheck#6
// Offset 18
#BEGIN FMT_COMMENT 
"Check if jams are detectable:<br>"
"    if: <br>        * In grace period<br>"
"    else if not in grace period<br>"
"        * Not reset pressed<br>        * Not Air has been "
"on for %3E than 3 sec<br>        * Air pressure on<br>"
"    then:<br>        * True"
#END

STRN	X8
ANDN	C8
AND	C0
OR	C1
OUT	C3

// End of Code Block StkerFaultCheck
$TSKEND	StkerFaultCheck

// Beginning of Code Block StkerStartUp
$TSK	StkerStartUp

// Rung StkerStartUp#1
// Offset 0
#BEGIN FMT_COMMENT 
"GraduallyBringUpAirPressure<br>"
"    %3E Holds air valve open till fault occurs.<br>"
"    - All faults ok references<br>"
"        * Guard door is closed<br>        * Air is on<br>"
"    - Air pressure OK refrences<br>"
"        * Air has not stayed at max for more than 3 sec.<br>"
"    - Press button will clear any fault exept:<br>"
"        * Guard door is closed<br>        * Air is on"
#END

STR	Y4
AND	X2
ANDN	C7
OR	X8
AND	C0
OUT	Y4

// Rung StkerStartUp#2
// Offset 6
#BEGIN FMT_COMMENT 
"TurnOnFullAir<br>"
"    # If air is up to pressure, open full air.<br>    - "
"Redundent fault checks.  Could not possibly have changed "
"state <br>"
"      since the last time they were set. <br>        * Air "
"pressure OK<br>        * All faults OK<br>"
"    - Valid Inputs<br>        * Gradual Start Valve"
#END

STR	X2
AND	Y4
AND	C0
OUT	Y16
OUT	Y17

// End of Code Block StkerStartUp
$TSKEND	StkerStartUp

// Beginning of Code Block StkerCycle
$TSK	StkerCycle

// Rung StkerCycle#1
// Offset 0
NOP

// Rung StkerCycle#2
// Offset 1
#BEGIN FMT_COMMENT 
"1. EnergizeVerticalBar<br>"
"/////////////////////////////////////////////////////////////<br>    "
"# Hold itself up till Eject out is tripped.<br>"
"    - Air Presso OK redundant check"
#END

STR	X18
OR	Y12
AND	X2
ANDN	X19
OUT	Y12

// Rung StkerCycle#3
// Offset 6
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>2. Stripper return<br>"
"/////////////////////////////////////////////////////////////////////////<br> "
""
#END

STR	C2
AND	Y11
ANDN	Y12
ANDN	X18
TMR	T20	500

// Rung StkerCycle#4
// Offset 12
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>3. Ejection Arm<br>"
"/////////////////////////////////////////////////////////////////////////<br>    "
"# Latch Start OS is the eye that reads one revolution of "
"the <br>"
"       gear which attaches the stacker to the main drive. <br>"
"    - This is the prime mover that triggers the whole "
"cycle<br> "
#END

STR	C2
ANDPD	X17
OR	Y11
AND	T20.Done
OUT	Y11

// Rung StkerCycle#5
// Offset 18
STR	X18
TMR	T21	65

// Rung StkerCycle#6
// Offset 21
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>4. "
"Compression<br>/////////////////////////////////////////////////////////////////////////"
#END

STRPD	T21.Done
OR	Y10
ANDN	T22.Done
OUT	Y10
TMR	T22	0

// Rung StkerCycle#7
// Offset 28
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>5. "
"Transfer<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	Y10
TMR	T23	9000

// Rung StkerCycle#8
// Offset 31
STRPD	T23.Done
OR	T24.Timing
TMR	T24	1000

// Rung StkerCycle#9
// Offset 36
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>6. "
"Load<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	T24.Timing
OUT	Y9

// Rung StkerCycle#10
// Offset 38
STR	C42
OR	Y5
OUT	C20

// Rung StkerCycle#11
// Offset 41
STR	C43
AND	C20
ANDPDPF
OR	C21
AND	C40
AND	C0
AND	C22
OUT	C21

// Rung StkerCycle#12
// Offset 49
STRN	X27
ANDN	C41
ORN	C44
AND	C20
OUT	C22

// Rung StkerCycle#13
// Offset 54
STR	C21
AND	C20
ANDN	C22
OUT	Y5

// Rung StkerCycle#14
// Offset 58
#BEGIN FMT_COMMENT 
""
"/////////////////////////////////////////////////////////////////////////<br>"
" <br> <br>/////////////////////////////////////////////////////////////////////////"
#END

STR	C42
PD	C4

// Rung StkerCycle#15
// Offset 61
STR	Y9
OR	C5
ANDN	C43
AND	C3
ANDN	C4
OUT	C5
TMR	T2	1000

// Rung StkerCycle#16
// Offset 69
STRN	Y9
OR	C6
ANDN	X21
AND	C3
OUT	C6
TMR	T3	2000

// Rung StkerCycle#17
// Offset 76
STR	Y5
AND	C22
AND	C3
TMR	T4	2000

// Rung StkerCycle#18
// Offset 81
STRN	Y5
ANDN	X25
AND	C3
TMR	T5	1000

// Rung StkerCycle#19
// Offset 86
STR	T2.Done
OR	T3.Done
STR	T5.Done
ANDN	X29
ORSTR
STR	T4.Done
ANDN	X29
ORSTR
OUT	C7

// Rung StkerCycle#20
// Offset 95
STR	C7
OR	Y2
ANDN	X8
OUT	Y2

// End of Code Block StkerCycle
$TSKEND	StkerCycle

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	50	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
OFFDTMR	T102	6000	C319

// Rung NewStker#5
// Offset 15
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#6
// Offset 20
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	X33
ORN	X1
OR	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#7
// Offset 28
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#8
// Offset 32
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#9
// Offset 39
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17
OUT	Y4

// Rung NewStker#10
// Offset 52
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#11
// Offset 60
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#12
// Offset 66
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355

// Rung stkr_CycleState#3
// Offset 31
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#4
// Offset 50
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"2000"
MATH	D1	"3000"

// Rung stkr_CycleState#5
// Offset 198
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#6
// Offset 213
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
ANDGT	D0	0
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#7
// Offset 224
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
ANDGT	D1	0
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#8
// Offset 235
STR	C317
AND	T101.Done
ANDGT	D1	0
AND	ST2
SET	C376

// Rung stkr_CycleState#9
// Offset 243
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#10
// Offset 246
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	C311
ONDTMR	T12	0	Y12

// Rung stkr_BufferY#2
// Offset 4
STR	C312
ONDTMR	T13	0	Y11

// Rung stkr_BufferY#3
// Offset 8
STR	C313
ONDTMR	T14	0	Y10

// Rung stkr_BufferY#4
// Offset 12
STR	C314
ONDTMR	T15	250	Y9

// Rung stkr_BufferY#5
// Offset 16
STR	C315
ONDTMR	T16	0	Y5

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
DUPBOOL
AND	ST1
TMR	T201	2000
POPBOOL
DUPBOOL
AND	ST1
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
AND	T201.Done
AND	ST1
SET	C406

// Rung TestNewStker#29
// Offset 446
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 450
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 472
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// Rung TestNewStker#32
// Offset 486
STR	ST1
STR	ST0
CNT	CT6	D80

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
RST	X33
RST	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X29","","","Product Entering"
"X33","","","Guard Door SW"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y16","","","Full Air Valve"
"Y17","","","Machine Stop Interlock"
"Y65","","","Transfer Left Timing Fault"
"Y66","","","Transfer Right Timing Fault"
"Y67","","","Operator Side Load Out Timing Fault"
"Y68","","","Operator Side Load In Timing Fault"
"C0","","","All Faults OK"
"C1","","","Stacker Run OK"
"C2","","","Stacker Enable"
"C3","","","Jam Detect Enable"
"C4","","","Operator Side OS"
"C5","","","State Bit"
"C6","","","State Bit"
"C7","","","Any Timing Fault"
"C8","","","Alarm For Excess Time at Max Air Pressure"
"C9","","","Stacker Reset Press"
"C20","","","Operator Side Load Enable"
"C21","","","Operator Side Load Single Stack"
"C22","","","Operator Side Mode"
"C40","","","Single Stack Mode Constant"
"C41","","","No Interupt Stroke Mode Constant"
"C42","","","Operator Side Loading Mode Constant"
"C43","","","4 To 5/6 Stacker Adjust for Operator Load Constant"
"C44","","","4 To 5/6 Stacker Adjust For Operator Load"
"C45","","","Run Stacker Check Faults Task"
"C46","","","Run Stacker Start Up Task"
"C47","","","Run Stacker Cycle Task"
"C200","","","Run Stacker Program"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C311","","","Stacker Operation Vertical Bar SOL Buffered"
"C312","","","Stacker Operation Ejection SOL Buffered"
"C313","","","Stacker Operation Compression SOL Buffered"
"C314","","","Stacker Operation Transfer SOL Buffered"
"C315","","","Stacker Operation Load SOL Buffered"
"C316","","","Transition Variables Set"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Machine Run Started + Grace Period"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
"T0","GracePeriodTMR","","Stacker Shutdown Grace Period Timer"
"T1","AirMaxPressTMR","","Alarm for Excess Time at Max Air Pressure"
"T2","OSTransferStrTMR","","Operator Side Transfer Stroke Timer"
"T3","DSTransferTMR","","Drive Side Transfer Stroke Timer"
"T4","OSLoadOutTMR","","Operator Side Load Out Timer"
"T5","OSLoadInTMR","","Operator Side Load In Timer"
"T20","StripperReturTMR","","Stripper Return Timer"
"T21","EjectInTMR","","Eject Arm In Timer"
"T22","CompressDwellTMR","","Compression Dwell Timer"
"T23","TransferEnablTMR","","Transfer Enable Timer"
"T24","TransferDwellTMR","","Operator Side Transfer Dwell Timer"
#END

