// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with Built-In Types and User Add-Ons;
// use Element names (no NickNames); rung/address annotations;
// <TAB> parameter delimiter; 
// Write/overwrite file C:\Users\jmarshall\source\BlueMachinePLC\BlueMachine_EXPORT_DMD.txt

PLC H2-DM1E

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
c1e79e8c5a16f8f376e547da7fd4a228b324e8a288d668cc43112ac27a3b6017930596a10ac700f2
30e35cbfc37d5bd33fe54ca303a5dddd62095636c812958312c2fac207f560a74b05506473d6a744
ea7c60da39effd544daeebf35c5837025f7db00b89576258ebfe3be3bf0f4555259f0c21c5eaaac0
14bbbfaa4e27d8a9d13bf253d221e0b8921207fde7107c834545ffb90d8484f492a343b43d559e6d
dc665c709c919e4f6be3bcb02c803265f9a90cdef3bab85aa485fa9b1f53ed470e779753197dcff9
409677e1ba545773e2a6e6b9408f7d6091b39e2cb952b63971a3cca8e88b77695ed2f07781881931
e77d508425348854a1c41c2b000408614bc04f761fad29bf13eaaf19f44313fd9f1f298279c14885
349212cef201a63a4422bb235688b5f4eb2b213fe35fdce7ba83c63fea00182cde502f97db3fd813
88cf33896051f5f27c8ea6d715eb1473796c1e5a93065968a12bf6420833a6f9ec7a5d7397f12dd4
57619fb424e36f2aaa46f67adf9d585c03dd431416685307444644287d8af1fe5224b14566e01bf9
4ae67f7f167dbd5e0231f587b0b67c8b7819454e804f750fdbedfc243e204ae2626445b0461dced0
5482da9b6243af79ca8ba4a0b277e123368b8ba76ed552ed77f5a62989f1ede2d0edeeb2919c53c6
517a578e3466b0784a7cd02ca182f73e9b0d5f47baa56d7ede50ebef57ee2863d589dc8b85f6a498
0cfa7b0cb478e418a6803d7438e196834ae7d086e28f39396f873fbcfce8ecb0a4b2c237e5b8aef0
52115391769a61e23c0f5da65505dd48f90f7ca2499d57c91388bce504bc04d4d93cfe73cda40be3
8114cbb13c146b3ffa8e397cd9f0b521fb09faa328a820f6c460434cbb3bff887e4127dadc3b3f25
03971b6e4b3a28d9a8846950a8e4609b748a4d62a90dd9bf8ab308a1560d5300df604fced4395450
1ef971a91572c20d9e55aa0f401ef0d8570422d4d1bdacd809cbcaeae178ce83769aa89d7afedbf9
46d1fc6088287e7880c3e9abd490a5b9d16fc904515e9ecb8a047bc1eec0df1b68b9c0b961c38e01
60af63f9c80101025f75f8d742f28950f60d9f7fb69251eca3aeff9ffb42af7b297d0e09b0d0f1cd
222c64fcc3e1dc679d1f2fc878a0f60e60f2a923545a49502109ac87fd45cde5fd916f77eba690ac
68cda2cc6b8e0feec9634ffb30cd2f2bc985633f49b374125c0d65a0f4c8881434c3b98d4dc9a044
c142dc12f790317f79005c29bf97c7e9d46138c9044ee6e8f82ff52c2fcbcc069810b3961e09a0bf
f7a38a8a0019d6f1b3bdba0f244b2c70d4d5738e53629e77bda0781fd21d27ddc7a7788b76a937ae
398131f172be9d03ca9f426ca166c1eca968114c5045f5cea9faebaa545758cf0186a8d08d60e97c
6f82d20c0ebda9e5c1652b24f4c0804e747e756a665f889e11384af425fb0a8bb9ea0324a36d3aa9
8a8cf3ce731bd5e847c730cd311685ce45f183b8bf4bfa2b414d0de784f47c282b7fe90027b5681b
5ef9c50c08ca5d70703d28a12c40c733d395f1de43dbd9188d05550c26305b2ef2e9ae36756690c0
3b36e3203fa78a585c704ff78041bd8ac6d822c404f3c95d11d666d1144938eaf9216534d0b590d4
1050b2531dbb9fbaaaf89f87bf099faac4bef78a5873941123b9d00422f0a8a5e581d1dde8f43fb8
91efb49a4c4bc2ac9d98511a2ec74bf2468e23df91e42a65d89c11b216aa024205a9ee3d0a25b13d
7545a7fdafcef707e82738280e6e4fe54e2aa57280b82422c892c0a158a8a75a95758b50e2bf64c1
bbba4a73efe903590b6af76cb6ae6e3146fe1d414fe707320867bb9792af18f22a5c8b718810e5ca
8aefab6eddf71139b7dc0bf4548711ebad966aa1bc0dbff6993b20a05ed3bdea44081708c6be34b0
143bbb1780b782ae9473de6a917ea810fe383bf10405930aacdcca8f02d4b3ca3d10064917299ef7
e1a4e6e696348065a3172faf3ac71cce3d8446f2c5acda0bd20960a27de2d28ef133b46b88d10ded
7cbab9dffe8161be868785974fda193062bfea4861c359ad058c3e4439e46b7f97974b43821c5bec
aa0db1dcedaf904ae6a8d305770088bf90f442a7eb4bdb80d3b88bdda7901f8ca2efc2848b638534
4bc8123da87ab847322677e59a738e69f1d549749f9edae673a46f53a55abe58674e96f1883f32db
630dabf65df74c2a724352f8e17c6f2b372ae5e6bd892fdeaffa489797bb10ab6fe91be844761a66
f206a12bd46a82b5ff3b4f35373a240996bfe93573cc47307fb3fa9091e7db9f31b1deaa54fe6a89
a18e53f48ff8f64512ca8d2dd27e3798a88038df483f3e2205014e1b9bfdb03a77feb794acdde1e9
d7c389273df2af219a06d12f18b6b0166e0fdbe5711a985e2b56e92df5998aa1779223af734deb2d
f63cdc1ee1224ee3966b9d6a33aa922a09276e29fcfdda27e48c5e0761a0063d77f8509d8a3030c0
d02ac4e1a431bf970ea298d188d9df36e9a2692a815600fa6831695644031085b727e68dbb6e5432
da38199c346c8bae65e311c256d046b5695aceb206f156d3b6b74debd848fe2d946ed813b32f27c0
e5b00966503b78e9753e2169d3621fffd7df038d746f48a049568614ffd8fd79df4a2b3f05192768
1fe66b05b2ca2a72e232c29771a9e23a80e92e7f90cebe8b0da04f5eafe651713a49bb07d482d57e
c8565d79ca250f543b539386d792abaf3a63005e25f47e0d6572832ab83d8d79f371f1a37e5f0a5d
2ddc6de0e45a499de91a57890db801751dfcf3589d4d270c46a7fccd9518fa2b80b500d0c15caf3d
74a1ad0b519ef5732895216704c553ee37ae7fa4c82211659cc34c873a6bea954a0ee9ee80f05f27
6928562639b52300b819a5420f989ee440f69a2d29040eff73819e3517daffa425f34ae875aa7883
8f586c352e88b8c3d8d7a24ec68c162270894a19161f6083570832264e149410af3d632fee1e577b
7df6f8a15e98743f181475c19aff45c4decb585a7ac5da82861caffc3db4514afb59590389fdb0db
736571ee926828eb2b30d57b49fd0cf655c39e1ed8a5eb4d15449faf859f150b94bb3b8da8e06ae9
5a74c119ca2d833bd28088c1bb2cd2d45d02181066ff4d31ee5903c27265dfe0f8f40c5f5fd58051
285c1f2e98ab5cc1f1b1ca82e460c6a945ef4472ee9c36c13667f51de67132749452ce7799e6826c
6fa0a5f94c4b9b41b7447eac921b64bef8621d327be135b3e61eeffd7a0a5bfc3d73e3e32be10c51
a8c1cda6b9f950c5f9e57b44d79550d3060c911c534424065fa864775f9f8cc44ecd3a4e2a36cb36
be93ddce92530cd8095de4f94fd180e18d6cb80776fbe78c9298289a6b9b5999b3dbe0d74c53b616
c553a964e78f6cf77df60f4b62874f3019abfc26d023596238e06e662fb078ac9054869cc068b95c
f464fa65b9ada3c149e44ff5ec41b40a4dc73be82fe6285343016ae985ad837eca6ab60fb44b6085
bc9b11798d42d87386a7b1310ba520c57b3852370f019022cf07c92a3af4361fbc19f44496b00a7c
565d66c99a471f8d17c82888d34291ab7a429410a23e06922ed694a22a63bc486a33cee50039a66c
f702cd57fc08e923b821796bf485d6239ddabe92bf78b17fa4b4ae90c64df37dd59c43b7cd9405d3
49583c57316e8ba6d5474e5454e71653cece08ed7fc721a934b9f6dddd261bd20ab16027a727c2ff
1686ffe8c8ac7129bb2f6ae91ca2e5614d2c16a0469e2f089de1dd03eb1b9d686739195b6e88f76c
aea9076fd33ee9f45494e3418f02c725c74c05440a3c2395556b395833b0cfc82fc875d52fc8cf8d
84f80bd043ee731344e48f2fb14d04978ba253435d36b5d94dc3977683c052eb24f3e971bab4475e
0c442ecbc67caadd7fb1387d3933921fc551a6cbe855a56545d16d95e0be9a2e8e52eb516e46a39a
5dd6060d3df7dae9155b8eda45007545ac2f29b2f9e06d44425823c3c6f325272e42d436c380922a
85ff4fe965ed151f2ff644b55908882a7cab583e7e74f3988f7d5196c771d5534687ce8fcff9b754
61e6cf4653318b14996ee92ce0461c120aaa6fd85c28b0c1b339d52ced11bad76f3abcac8bcacefb
a0fed0609d01e938d15944c450d70d5ed99a488bef38df00e054b9119a09e12c139d3b375e478c46
4f8f90100ba9b5765f96cd7e65bda3db6d25915fee073fa696e6a16cd431092ab34872747ae11bc3
c3c111d17eee4ea856b865b669d7e1cefddd6161e407d0410359061cd4053f04904e35d0546259a4
67188218fd41c0d607970c8798ba6121b4e62c770337ef7ba2bd0bec0cfdb91833a6fd04e33d2494
5ec3f0148a4b42449c3df45b340ac033742c819cae4c32e72ebe71878d479c5b3e9e02f01c971efc
aaa5562003f6d46bb9032aab371e43b26e39339c899134d39a0c97831829d230e4d04487d1f2a09f
5cc93a8b8d51b66f35b27e11a138bd5eb2d785122bf334672e6ff944113c45d51d6818bb7c663847
71362461119061d96bf44b1ec78b71a05be740fdd10c0ea80d91a505a2854b56b8ad133c1ee4614a
69bb2966c81f1ff8ff63a5d4f6a0fc7f0a546c280d9648a1cfcb8ed965d439decf5c7672389e021d
401f655f8a3016c68394b8b2743e48657bbfda70a36f3f8c91fed7a8603a7395ceaf8ffa6595f15e
fbf7b446e61784a823b5e9ec1f40e3ab8d31d9d0836c70c07c0dd0afd0a12912b41a6446043a40d0
e6612149eba10fb1a4106b0161ba51730e606a29413acb5578d7110aa5ce47914681c2a8e638074d
ab1c6a1a0d8cfca87de06b2f75b7e93b0b0ec0be2645af8e4ff316c5282d7b01aaf5ae89391783f2
93b7b01889e521d9dedde771314b20a98f8b2ea2ae4cc40dce3191fb7fb70235b4bcc6861b91b7b3
562bf84e1613607344eec8a3d2aa7b9d2827f08e025ddf1955f4f2e8f4bf731483bfd343d4a1e1fc
5bfe2dcd566f310c62dcb2d9b334200f62527ea302b35ed856c4ddc9b5614c31bfc04386e08994a7
e3780fdba95e4806a55c6107871f301cb2e8fc34938d6f26067a707eb0148ab3d43510513c3bf65d
f80bfe1ee35ce4f68f1aec9b0701f4c1505ec33a6aab06c259d1255f56c907125cc9bf9a97af1001
f1761bf2fd414e974b22972abaf5e12d5cf8c0cc244d7036530db1cd1c7714faa28246e68dad6a08
62c67aee45589554e1ab303e19c6da88f007f21d0744a7e30645f348bed50b185f00f736918d1bfe
994fd6f82107be82cf08dc442f27c47de0fa761a78e67113ba17bf08c2f917b02dacf110273d7940
d4510deaf7c7c6d020055847014ca5ce5bba4e2ce859110d79d4a5f7ae809bf4c282ff27c2b5755e
3421b7c7beda2f4c99b989ed74bcd6e8719e36e36e8ff8d5b9b93f1d11fd751000917b05b60c18c1
31aa118b02c84c0ca04fda8caa8b9ea889f3fe0e82a7367731b606fb5557335214ee67ced251d32d
51f102a328799f8d691e8a6be4ce428f57e6a40ef6a54c4e0224cae412d67bac71e29c35036579f9
9ceb4db5e38776952b855ec276592900403cba96c5ec7d89a6b35dece6ea3d6f153640599de3d858
976265a53435ce7d345291fe74af0009d0e2ef3986b89a6cd5b3d421a318cf560258153c6c752bbd
8bb82276701c3fcd488839dd56b1238a4beb261b1126781e3338ab558d96a30899e9e11f5f1bec13
bcd541ef41174ad50c4878cb2405481f3212f622c05e4b4b08291592bc5a6c1c44ed03d9446481a3
68b24555978ff573cb03c60748dde8b15f3a71772136a92e133b894d5d7249d117079a64c9c73d0f
2f66d82423892c729d116d1590009d91ba1520fe5bba3e964e38877e6acca92b134a6248004c703c
2fbfbec3de7f20b35f3c7c331e00e76b8d51adc51ef6f2b75d9f4fef120c2b4a3403971cfdc52475
fed3d23744a29874678b8b52366a0bb392e6ba535e31f1ac0bc532d15677120fc1865c526550e119
4fd2df65c994dd2e9332b7aed987f1eb607b357d3e83e8edd7cfdb5a8cb2d01dcaffe3e48b6a4cbb
04a2e63365a11073fc59dbb8e3ce23acf3a56c3b562bc9359ff865e343545edb03c922580983ce28
e510efde52bdc7a5f403c47b7101743ad8bb70a881b1a38d72c11309aa46cb5c529a89cdd6212e75
fd7ec595d6bb6ece2025a544c24cf92519ee6b2e3b57290e21930724d5046869c71390ad3eb6ea39
d43b7c4f13d703c3604a7e6d62027c5efd9e151da898eda27b01b4b139b189031a1b0fc0810d2ec5
a265bd1b8753212622bc512183705e9b5664a07bef10368ed14ee1d3f9b24938669adc3412e68e1b
d8aa9346298f15da296d8f27206895b75b15b51c7d0d5e387bd6ebf02f89158fedba48d73aca7768
5e14e45e08431a64a10331c7255517f81e2c580cd3ea3e3384e915c4ae437e553ff327c4e11c3217
87ec1f4cebf2b51ead8d34e3968905f4aef7426c05d56f9fe06ff94472ac5b09b4517b05737f9cac
87d58184dabdf0251f112d36c85c265ea1277f514d48531e5c5e91fe68b224e4bf8d1164b271af7b
f5f7935087847462da8ecb1e2498a3baaf9a41cbf6ab9e07096ae2858117e528e23a9c80f2183dc6
b7e94fabc4d95da4e07f58c7fb1b094c135314bcdc6a1d51a2a2a1dba88af0084965bd6e8b0c1a6e
9486474b1e351155f6cd0d42f51e8369803d839a6c2e2a684f50e497f059ff0309ab7cf92ae8c3e7
068d58dbbba9ebc1cf47cd45f3b9ded53c4ae39d0d57a860ed023e429d646283644fb8ed3ff2c034
ac26e7a62c536470b5e50b6b6dbdbd243cca2e092344c8789ee718eb458041b660b047f676acff66
de04459fb80ce7a0a70908bdab15003a5794e105ec25e1774ab3106a2476b79397215676b5eaf861
cd34158e8a2f8af4979ab3e68dd9ef3322c8ae2234a9bc315880c5f33bf0d4261ee07fe7997ba99d
4b613e89c339a6c9da28cdeda32261f6db3e7ced4837d3d8742b9cd0ab9b69cbc7c1bf28583d8e77
435507d191ccfd4e220456a579a0a7eb03aa0ace177efc6734eba78175a0cfcd7d52a31415692372
15e7e3cd71661889edc378e0770bc35bc7f9fda9fd3c96e34f1d53d0cb0f0f20edbe22c7370fe0f2
9c71b49446bf391125351f7c79c969fbce844cdb6d7f7547b156396d32d3ae27a2b5f62c113c8234
72dc5688897bf1624607b71c2c4489fa346dee569b914eb395910c477c05ef99fca81ac69c9ae714
f7aed74b957a54cf327c65ddb74bde06805794971d46ccc05b89e7368e71e1852ab3d25eb7185770
1916746a008cf9793f19aea3aaead4cf9527bd29bb1c8f08ae38407b772875f256dc73fb620058e9
c7aed36b0796772197e68f5433fada2c40f09029ae908a5106c397fbf203d976e8144ad56a0cf891
e1b66498f615215cdbab889495d5411acbf567ba076def9e5b6a5456150b0b1e2b45e17ce37438d6
e61c05e554b0fd0fde3f3b0dcccdfea615d236199d29e699be6a16a16f12eb09991766d2ce34c981
9c628f9d32340958e5b6ff4fe1e5ce459b8e198a009046355196f667a6f76a9aecf6bf4dd399e35f
8af04d59b565428c35d16105b51437bc1cf85ad37334994d97a583e21669c7f05a32538ffeac52e6
2f9672c2a616b7840faf4be960c087a0261ffe6ab854f7f29ff62d719162f5273bc1569082e6d077
c5a83b67e2c39c0d69bc525cc8f6cb19fc1f3ac3da8bc15b87e3dc633c54fbc93cb6e6db333b86e1
2a43fb0da4a62d69c42c533efe97be49dca8617debb0279c50f981412dd55da631da6f329b1bf7a8
eff306ef56e1d68db040b5c31795748da2876a87f078996e9768a5520ba2d91c51754667db7b102a
157987c6fbe32d47e716d76735b88bdefc36ced7afa4fe2d55a451910b40079c50057789b3396af3
21150a52bd6c75f84447e155aceae3d32b1a35d59eebc7f28ee577e5b088153e446dace10a31ef39
7a410e94f9b87bf7df9b5e59add81fcae63324b88dc538350149267b79297dcf1b4a4ba7b5691cb0
23d78779a67a944809c46aeb1eb038771f17ef15b5c22dbbf5ec2b853338da1e9be6bf2f7f396510
96f7a61b7bd1b16799d7e14b6804798078fc5c441ed9924df88f54edcc3632f49d45d18266099262
6dd6f3641d8b60d727988da61140b730de976fcc1b168dad2f0ec1c7229b81bf83555fa4e106dac1
28ed82cfdf8f5fb3a0606be5816058668e433d7199c109ddcdbb00df9b1e9e1dc960ee01fe5a58e1
ce37db05b1bcf7e9111463af3b1cfbb0db589123a4aaef6867efab3edf12b71459b1d0f623065518
6eb52886e25604468905149d620bbee04f5d0483b126e33c028adb923da1e64fff9844164b459d10
0c052e00f6ca72c1ee5a99513f42e6a7ea35254af56d6f6344f77842ab3515507d0ae5465deb85dd
766f329ac5ea70936da6760c1f99d182c7a6357d8177d9a19619050c346b3b1d9e7f4381c16e3d3c
9d5458aa344a6701a469f2231abec0712aaab81675b005528e684d0aff98dc099ef1cbf1054b9fcd
2934f5858d990ef587ce04c9b910e17f462e1d17cd47fb8a7b7fb8e7421404ec3d0a2112f9ba6b44
9a556b447b1c173c8de2e740a47b284ac675f102f4f71ede554acfa494f25b2208809bb182055a6b
b701d6530603f5357edcda052518b10c241c4147016efc8c9817fd4588317029e58c3b63944358b6
03592a9ddfeefa1a2ffe0c023b3893f04e309e77c9b9967efbb957140244da20e277a5247d32be26
7e1e59f6303d17b45c373fb70ea57efd78d400d4c353c822cf0b25f59cc7a258f387d7c110a95f82
8515037602ee43c0d7b58c3153ddc0695c17c830f5e18446b98ad76c8a824551be86a83527e79153
238aed219edd0ffe0f3c1b1b955e508140aef24a6c83c0dc8aa3021ca68aae05d2acc160ac6ff28d
bb626129aff1146caf7775707ec3e0ec9100a9a41c2de6c7d1797748bfbb1764256b3be1cb37ca9f
1a4da45d3214fca1d40ee9a5fb4642864b758f3d26a5a5db699e965a52f7190761811057f606d3a4
ad99dc88036adec3551de6592230e6f8a407d52c67defc41e83f5691ef6d507f542be068751697e4
5539ecf247fd3418965ba24fa460b8d2b20e121cb3fa5b659437d665cc646816f70278d63ea1bc1e
f0d86518a53c2531bf0b8ee763365382a1dc3c0014c4260da9a232cee82e1caa1a6371395829f0ce
5827a27835da1f274772dc5d8343523a63afead017c3a80775bce92c6926e6653d923a4483414149
b249026a38e097886b2e4fff7a858dfc7d6546324ce7d245e001ba1b0ca1eb65c06f0239f73ce87a
e417cb363ba2943194236ce642638823169d01730dfec5e464acd64006f826b1fda270591e937d36
b3cb1a6d2042edce092a61bcee8672eaa4b477cce4fddb88fe79d1097de8a17116994da87eff3b2e
9bde4f168a39cbca8eb3fa89b2f3690ad06e8c18f651f10869e2ad62efc6eb951c4ac95c6bde868a
903dd94f6226165fc0f74f1e181e8e2f821696e5583d327096ca38358467b7ef37e88bbb7abfc76f
5aeca5401eff1bb5dcff7f0396ac8b4dcafc620f49e921b1a974aefbf6513db22141f44322181dfc
5f386011a5056cad0dc670e3ce6b4d5930e960110c73bdb51546512c5880034846d5384f6c9521b1
477940a18e655e34e1c1de1077b0320ee58e5d94fc72b6fdce1f18f76c79dc2b4599cf46e4729f26
c6e3ab4ade5c122ee94c807f6aa8628edf83636c717c0d03d3a77caa30bbfe94679b8e3e7d14e201
e568c0cb045402fb8e8e125551be17a263da242278ff76942942e9de81cf83f55a1e012d22b33c8c
c6f45cdd3e51cfb44adf730e714d75db6e24ddaa1342d0689f5b0e5fa991261dfbe135eab93e9152
6f5bbe0b270654e385281d5a4bdb4922b208fcf3d833982c95ca391540f650348cb1709547ab4fc8
161bfe4ac0a8c1e2ba32a42bd32088850b3202ab7cbdde7bb1f858999abe8458874cad31b390b704
93fa47c3ca5e5ff4d9e0718b0236e483611ec1b9e264c2ab0e0a67469233e277f73e04984489bbf8
09c25441e828cdeb6a78d26c42d38221cbe853bce1ef2a036b01d5fbc1c749e8d7227746f39bbcd0
8e39cacc2465f646e9a38e1992514ffeef7491f25af92742af5a89024bbbffab1eaa177fe9cd56a7
5541ae9a8a28b339a657ed31ad7a76488a4f84337c6872d7a24c3edd9b6691a754fd33ab96945640
35de2cd57583fa579450fd6e7ff1fade075b342ad51dc39fa5c51c08d32936fae22ead0f999cab5c
bd722a6da91d2fb2d431145f48ac52fc1a6c08cb2753d3052add0c7359486ded71184a91d1c7c66f
7c5bb3680ad4998f03999023c0320407cf4722d0ca5af1
#END

#BEGIN DEVICE
	@LocalIOMaster, 12, 27
	@RamFS, 1, 1
	@UserLog, 7, 11
	@IntEthernet, 4, 2
	@DMLogger, 5, 10
	@IntModTCPClient, 9, 14, 1000, 2, 60
	@IntEIPClient, 22, 31, 1000, 2, 60
	@IntEthDMPPClient, 23, 32, 50, 250, 2
	@IntSerial, 10, 15
#END

#BEGIN MEM_CONFIG
	X	BIT	decimal	2048	-1
	Y	BIT	decimal	2048	-1
	WX	SWORD	decimal	256	-1
	WY	SWORD	decimal	256	-1
	C	BIT	decimal	2048
	V	UWORD	decimal	4096
	N	SWORD	decimal	4096
	D	SDWORD	decimal	4096
	R	REAL	decimal	4096
	T	TIMER	decimal	256
	CT	COUNTER	decimal	256
	SS	STRING	decimal	128
	SL	STRING	decimal	64
	UDT	DATETIME	decimal	32
	PL	UWORD	decimal	256
	DLX	BIT	octal	01000	-1
	DLY	BIT	octal	01000	-1
	DLC	BIT	octal	01000
	DLV	UWORD	octal	04000
	MI	BIT	decimal	1024
	MC	BIT	decimal	1024
	MIR	SWORD	decimal	2048
	MHR	SWORD	decimal	2048
	RX	REAL	decimal	256	-1
	RY	REAL	decimal	256	-1
	MSG	STRING		0
	ERR	STRING		0
	SysName	STRING		0
	SysDesc	STRING		0
	SerialNum	STRING		0
	PartNum	STRING		0
	Stacker	PROGRAM		0	-1
	StkerStartUp	TASK		0	-1
	StkerFaultCheck	TASK		0	-1
	StkerCycle	TASK		0	-1
	NewStker	PROGRAM		0	-1
	TestNewStker	PROGRAM		0	-1
	Stkr_SetState	<Virtual>		0
	Stkr_DetectState	<Virtual>		0
	stkr_CycleState	TASK		0	-1
	tst_mock_stkr	<Virtual>		0
	mock_stkrStart	TASK		0	-1
	Stkr_BufferX	TASK		0	-1
	mock_stkrCycle	TASK		0	-1
	stkr_BufferY	TASK		0	-1
#END

// Beginning of Code Block Stkr_SetState
$LGCMOD	Stkr_SetState

// Rung Stkr_SetState#1
// Offset 0
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set Stacker States<br>"
"#########################################<br> <br>Set Rest "
"State"
#END

STRE	D3	0
SET	C311
RST	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#2
// Offset 9
#BEGIN FMT_COMMENT 
"Set Ejection State"
#END

STRE	D3	1
SET	C311
SET	C312
RST	C313
RST	C314
RST	C315

// Rung Stkr_SetState#3
// Offset 18
#BEGIN FMT_COMMENT 
"Set Compression State"
#END

STRE	D3	2
RST	C311
SET	C312
SET	C313
RST	C314
RST	C315

// Rung Stkr_SetState#4
// Offset 27
#BEGIN FMT_COMMENT 
"Set Transfer State"
#END

STRE	D3	3
RST	C311
RST	C312
SET	C313
SET	C314
RST	C315

// Rung Stkr_SetState#5
// Offset 36
#BEGIN FMT_COMMENT 
"Set Load State"
#END

STRE	D3	4
SET	C311
RST	C312
RST	C313
SET	C314
SET	C315

// Rung Stkr_SetState#6
// Offset 45
NOP

// Rung Stkr_SetState#7
// Offset 46
NOP

// Rung Stkr_SetState#8
// Offset 47
RET

// End of Code Block Stkr_SetState
$LGCEND	Stkr_SetState

// Beginning of Code Block Stkr_DetectState
$LGCMOD	Stkr_DetectState

// Rung Stkr_DetectState#1
// Offset 0
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Operational States #######################<br>"
"#########################################<br> <br>Detect "
"States<br>#########################################<br> <br>"
"Trasition State"
#END

STR	ST1
MATH	D4	"-1"

// Rung Stkr_DetectState#2
// Offset 8
#BEGIN FMT_COMMENT 
" Reset State"
#END

STR	X18
ANDN	X19
AND	X21
AND	X20
AND	X25
AND	X27
MATH	D4	"0"

// Rung Stkr_DetectState#3
// Offset 20
#BEGIN FMT_COMMENT 
"Ejection / Compression State"
#END

STRN	C305
AND	C306
AND	C307
AND	C308
AND	C309
AND	C310
MATH	D4	"1"

// Rung Stkr_DetectState#4
// Offset 32
#BEGIN FMT_COMMENT 
"Transfer State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
AND	C309
AND	C310
MATH	D4	"2"

// Rung Stkr_DetectState#5
// Offset 44
#BEGIN FMT_COMMENT 
"Load State"
#END

STR	C305
ANDN	C306
ANDN	C307
ANDN	C308
ANDN	C309
ANDN	C310
MATH	D4	"3"

// Rung Stkr_DetectState#6
// Offset 56
NOP

// Rung Stkr_DetectState#7
// Offset 57
NOP

// Rung Stkr_DetectState#8
// Offset 58
NOP

// Rung Stkr_DetectState#9
// Offset 59
RET

// End of Code Block Stkr_DetectState
$LGCEND	Stkr_DetectState

// Beginning of Code Block tst_mock_stkr
$LGCMOD	tst_mock_stkr

// Rung tst_mock_stkr#1
// Offset 0
#BEGIN FMT_COMMENT 
"##################################################<br>"
"##  MOCKS  #######################################<br>"
"##################################################<br> "
"<br>Mock Stacker Operation Reset State"
#END

STRE	D50	0
SET	X18
RST	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#2
// Offset 10
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Ejection"
#END

STRE	D50	1
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#3
// Offset 20
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Compression State"
#END

STRE	D50	2
RST	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#4
// Offset 30
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Transfer State"
#END

STRE	D50	3
SET	X18
RST	X19
RST	X21
RST	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#5
// Offset 40
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Load State"
#END

STRE	D50	4
SET	X18
RST	X19
RST	X21
RST	X20
RST	X25
RST	X27

// Rung tst_mock_stkr#6
// Offset 50
#BEGIN FMT_COMMENT 
"Mock Stacker Operation Broken State"
#END

STRE	D50	5
SET	X18
SET	X19
SET	X21
SET	X20
SET	X25
SET	X27

// Rung tst_mock_stkr#7
// Offset 60
NOP

// Rung tst_mock_stkr#8
// Offset 61
RET

// End of Code Block tst_mock_stkr
$LGCEND	tst_mock_stkr

// Beginning of Code Block $Main
$PRGRM	$Main

// Rung $Main#1
// Offset 0
STR	C200
RUN	Stacker
NOT
SUSPEND	Stacker

// Rung $Main#2
// Offset 5
#BEGIN FMT_COMMENT 
"Test Fire"
#END

STR	C701
CALL	Stkr_SetState	0x1	DST511	"3 D52 D3 1"	"3"

// Rung $Main#3
// Offset 15
STR	C701
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung $Main#4
// Offset 23
STR	C201
DUPBOOL
ANDPDPF
RUN	NewStker
POPBOOL
NOT
SUSPEND	NewStker
OUT	C700

// Rung $Main#5
// Offset 32
STR	C203
DUPBOOL
ANDPDPF
RUN	TestNewStker
POPBOOL
NOT
HALT	TestNewStker

// End of Code Block $Main
$PGMEND	$Main

// Beginning of Code Block Stacker
$PRGRM	Stacker

// Rung Stacker#1
// Offset 0
#BEGIN FMT_COMMENT 
"///////////////////////////////////////////////////<br>"
"// Globals<br>///////////////////////////////////////////////////"
#END

STR	ST1
OUT	C40

// Rung Stacker#2
// Offset 2
STR	ST1
OUT	C41

// Rung Stacker#3
// Offset 4
STR	ST1
OUT	C42

// Rung Stacker#4
// Offset 6
STR	ST1
OUT	C43

// Rung Stacker#5
// Offset 8
STR	ST1
OUT	C44

// Rung Stacker#6
// Offset 10
STR	C45
ENTASK	StkerFaultCheck	0x0	0	0x1
NOT
ANDPDPF
SUSPEND	StkerFaultCheck

// Rung Stacker#7
// Offset 18
STR	C46
ENTASK	StkerStartUp	0x0	0	0x1
NOT
SUSPEND	StkerStartUp

// Rung Stacker#8
// Offset 25
STR	C47
ENTASK	StkerCycle	0x0	0	0x1
NOT
SUSPEND	StkerCycle

// End of Code Block Stacker
$PGMEND	Stacker

// Beginning of Code Block StkerFaultCheck
$TSK	StkerFaultCheck

// Rung StkerFaultCheck#1
// Offset 0
#BEGIN FMT_COMMENT 
"Pre-run check<br>  "
#END

STR	X1
AND	X33
OUT	C0

// Rung StkerFaultCheck#2
// Offset 3
#BEGIN FMT_COMMENT 
"EnergizeStackerJamLight<br>    * Air pressure dips<br>"
"    * Guard door opens"
#END

STRN	C0
ORN	X2
OUT	Y0

// Rung StkerFaultCheck#3
// Offset 6
#BEGIN FMT_COMMENT 
"Stacker Shutoff Grace Period<br>  - True when:<br>"
"    * Machine is running<br>"
"    * 6s after machin has stopped<br> "
#END

STR	X16
OFFDTMR	T0	6000	C1

// Rung StkerFaultCheck#4
// Offset 10
#BEGIN FMT_COMMENT 
"PassAllChecks<br>    - Air working<br>    - Door closed<br>"
"    - Within grace period<br> "
#END

STR	X2
AND	C0
AND	C1
OUT	C2

// Rung StkerFaultCheck#5
// Offset 14
#BEGIN FMT_COMMENT 
"Jam Timer Detect<br>"
"    - Detects dip in max air pressure<br>      * If air "
"stays at max all th etime it's not being exhausted.<br>"
"         Thus the stacker is jamed."
#END

STR	X2
OFFDTMR	T1	3000	C8

// Rung StkerFaultCheck#6
// Offset 18
#BEGIN FMT_COMMENT 
"Check if jams are detectable:<br>"
"    if: <br>        * In grace period<br>"
"    else if not in grace period<br>"
"        * Not reset pressed<br>        * Not Air has been "
"on for %3E than 3 sec<br>        * Air pressure on<br>"
"    then:<br>        * True"
#END

STRN	X8
ANDN	C8
AND	C0
OR	C1
OUT	C3

// End of Code Block StkerFaultCheck
$TSKEND	StkerFaultCheck

// Beginning of Code Block StkerStartUp
$TSK	StkerStartUp

// Rung StkerStartUp#1
// Offset 0
#BEGIN FMT_COMMENT 
"GraduallyBringUpAirPressure<br>"
"    %3E Holds air valve open till fault occurs.<br>"
"    - All faults ok references<br>"
"        * Guard door is closed<br>        * Air is on<br>"
"    - Air pressure OK refrences<br>"
"        * Air has not stayed at max for more than 3 sec.<br>"
"    - Press button will clear any fault exept:<br>"
"        * Guard door is closed<br>        * Air is on"
#END

STR	Y4
AND	X2
ANDN	C7
OR	X8
AND	C0
OUT	Y4

// Rung StkerStartUp#2
// Offset 6
#BEGIN FMT_COMMENT 
"TurnOnFullAir<br>"
"    # If air is up to pressure, open full air.<br>    - "
"Redundent fault checks.  Could not possibly have changed "
"state <br>"
"      since the last time they were set. <br>        * Air "
"pressure OK<br>        * All faults OK<br>"
"    - Valid Inputs<br>        * Gradual Start Valve"
#END

STR	X2
AND	Y4
AND	C0
OUT	Y16
OUT	Y17

// End of Code Block StkerStartUp
$TSKEND	StkerStartUp

// Beginning of Code Block StkerCycle
$TSK	StkerCycle

// Rung StkerCycle#1
// Offset 0
NOP

// Rung StkerCycle#2
// Offset 1
#BEGIN FMT_COMMENT 
"1. EnergizeVerticalBar<br>"
"/////////////////////////////////////////////////////////////<br>    "
"# Hold itself up till Eject out is tripped.<br>"
"    - Air Presso OK redundant check"
#END

STR	X18
OR	Y12
AND	X2
ANDN	X19
OUT	Y12

// Rung StkerCycle#3
// Offset 6
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>2. Stripper return<br>"
"/////////////////////////////////////////////////////////////////////////<br> "
""
#END

STR	C2
AND	Y11
ANDN	Y12
ANDN	X18
TMR	T20	500

// Rung StkerCycle#4
// Offset 12
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>3. Ejection Arm<br>"
"/////////////////////////////////////////////////////////////////////////<br>    "
"# Latch Start OS is the eye that reads one revolution of "
"the <br>"
"       gear which attaches the stacker to the main drive. <br>"
"    - This is the prime mover that triggers the whole "
"cycle<br> "
#END

STR	C2
ANDPD	X17
OR	Y11
AND	T20.Done
OUT	Y11

// Rung StkerCycle#5
// Offset 18
STR	X18
TMR	T21	65

// Rung StkerCycle#6
// Offset 21
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>4. "
"Compression<br>/////////////////////////////////////////////////////////////////////////"
#END

STRPD	T21.Done
OR	Y10
ANDN	T22.Done
OUT	Y10
TMR	T22	0

// Rung StkerCycle#7
// Offset 28
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>5. "
"Transfer<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	Y10
TMR	T23	9000

// Rung StkerCycle#8
// Offset 31
STRPD	T23.Done
OR	T24.Timing
TMR	T24	1000

// Rung StkerCycle#9
// Offset 36
#BEGIN FMT_COMMENT 
"/////////////////////////////////////////////////////////////////////////<br>"
" <br>6. "
"Load<br>/////////////////////////////////////////////////////////////////////////"
#END

STR	T24.Timing
OUT	Y9

// Rung StkerCycle#10
// Offset 38
STR	C42
OR	Y5
OUT	C20

// Rung StkerCycle#11
// Offset 41
STR	C43
AND	C20
ANDPDPF
OR	C21
AND	C40
AND	C0
AND	C22
OUT	C21

// Rung StkerCycle#12
// Offset 49
STRN	X27
ANDN	C41
ORN	C44
AND	C20
OUT	C22

// Rung StkerCycle#13
// Offset 54
STR	C21
AND	C20
ANDN	C22
OUT	Y5

// Rung StkerCycle#14
// Offset 58
#BEGIN FMT_COMMENT 
""
"/////////////////////////////////////////////////////////////////////////<br>"
" <br> <br>/////////////////////////////////////////////////////////////////////////"
#END

STR	C42
PD	C4

// Rung StkerCycle#15
// Offset 61
STR	Y9
OR	C5
ANDN	C43
AND	C3
ANDN	C4
OUT	C5
TMR	T2	1000

// Rung StkerCycle#16
// Offset 69
STRN	Y9
OR	C6
ANDN	X21
AND	C3
OUT	C6
TMR	T3	2000

// Rung StkerCycle#17
// Offset 76
STR	Y5
AND	C22
AND	C3
TMR	T4	2000

// Rung StkerCycle#18
// Offset 81
STRN	Y5
ANDN	X25
AND	C3
TMR	T5	1000

// Rung StkerCycle#19
// Offset 86
STR	T2.Done
OR	T3.Done
STR	T5.Done
ANDN	X29
ORSTR
STR	T4.Done
ANDN	X29
ORSTR
OUT	C7

// Rung StkerCycle#20
// Offset 95
STR	C7
OR	Y2
ANDN	X8
OUT	Y2

// End of Code Block StkerCycle
$TSKEND	StkerCycle

// Beginning of Code Block Stkr_BufferX
$TSK	Stkr_BufferX

// Rung Stkr_BufferX#1
// Offset 0
STR	X18
ONDTMR	T6	50	C305

// Rung Stkr_BufferX#2
// Offset 4
STR	X19
ONDTMR	T7	50	C306

// Rung Stkr_BufferX#3
// Offset 8
STR	X21
ONDTMR	T8	50	C307

// Rung Stkr_BufferX#4
// Offset 12
STR	X20
ONDTMR	T9	50	C308

// Rung Stkr_BufferX#5
// Offset 16
STR	X25
ONDTMR	T10	50	C309

// Rung Stkr_BufferX#6
// Offset 20
STR	X27
ONDTMR	T11	50	C310

// End of Code Block Stkr_BufferX
$TSKEND	Stkr_BufferX

// Beginning of Code Block NewStker
$PRGRM	NewStker

// Rung NewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"#########################################<br>"
"##  RUN STATES  ##########################<br>#########################################"
#END

NOP

// Rung NewStker#2
// Offset 1
#BEGIN FMT_COMMENT 
"Begin Buffering Air Cylinder Outputs"
#END

STR	ST1
ENTASK	stkr_BufferY	0x0	0	0x1

// Rung NewStker#3
// Offset 6
#BEGIN FMT_COMMENT 
"Begin Buffering Eye inputs"
#END

STR	ST1
ENTASK	Stkr_BufferX	0x0	0	0x1

// Rung NewStker#4
// Offset 11
#BEGIN FMT_COMMENT 
"Shut Off Grace Period<br> "
#END

STR	X16
OFFDTMR	T102	6000	C319

// Rung NewStker#5
// Offset 15
STR	X8
TIMEDOUT	500	C9	0x1

// Rung NewStker#6
// Offset 20
#BEGIN FMT_COMMENT 
"Machine Pre-Run Error"
#END

STR	X33
ORN	X1
OR	X2
STR	Y0
ANDN	C9
ORSTR
OUT	C303
OUT	Y0

// Rung NewStker#7
// Offset 28
#BEGIN FMT_COMMENT 
"Machine Runtime Error"
#END

STR	C376
OR	C377
OUT	C304
OUT	Y2

// Rung NewStker#8
// Offset 32
STR	C9
ANDE	D4	0
RST	C376
RST	C377

// Rung NewStker#9
// Offset 39
#BEGIN FMT_COMMENT 
"Machine On State"
#END

STRN	C303
ANDN	C304
AND	C319
ANDN	C9
STR	C301
ORE	D4	0
ANDSTR
OUT	C301
OUT	Y17
OUT	Y4

// Rung NewStker#10
// Offset 52
#BEGIN FMT_COMMENT 
"#########################################<br> <br> <br>"
"Set States<br>#########################################<br>"
" <br>Detect State"
#END

STR	ST1
CALL	Stkr_DetectState	0x1	DST511	"3"	"3"

// Rung NewStker#11
// Offset 60
STR	C301
ANDN	C302
ENTASK	stkr_CycleState	0x0	0	0x1

// Rung NewStker#12
// Offset 66
STRN	C301
STR	C302
ANDNE	D4	0
ORSTR
HALT	stkr_CycleState

// End of Code Block NewStker
$PGMEND	NewStker

// Beginning of Code Block stkr_CycleState
$TSK	stkr_CycleState

// Rung stkr_CycleState#1
// Offset 0
#BEGIN FMT_COMMENT 
"Reset variables for first cycle"
#END

STRPD	ST1
RST	C317
RST	C318
MATH	D5	"0"
MATH	D0	"0"
MATH	D1	"0"
MATH	D2	"0"

// Rung stkr_CycleState#2
// Offset 28
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Transition States #########################<br>"
"#########################################<br> <br>Cycle "
"States<br>#########################################<br> <br>"
" <br>    1. Set a bit for every latch cam cycle.  If this "
"bit is not <br>        reset by the end of the scan it "
"means the cam<br>"
"        cam cycle was missed (our cycle is taking too long)"
#END

STRPD	X17
SET	C355
RSTR	C320	C322

// Rung stkr_CycleState#3
// Offset 33
#BEGIN FMT_COMMENT 
"    2. Determine if stacker should transition state.<br>"
"        * If stacker is in Reset State only cycle if<br>"
"           the latch cam is detected.<br>"
"        * If the cycle is not between state and not "
"<br>           in the reset state.<br>"
"        * aditionally the timers must not have started "
"<br>           yet (its the first scan), or the lockout "
"timer <br>           for the current Cycle State must be "
"expired."
#END

STRNE	D4	-1
ANDNE	D4	0
STRE	D4	0
AND	X17
ORSTR
STR	T100.Done
ORN	C317
ANDSTR
SET	C318
SET	C317

// Rung stkr_CycleState#4
// Offset 52
#BEGIN FMT_COMMENT 
"    3.  Get variables for state transition<br>"
"        * Each Cycle State as three variables associated "
"<br>           with it:<br>"
"            - Stacker Operation Next Cycle State:<br>"
"                    the next state to cycle to.<br>"
"            - Stacker Operation Lockout ms<br>"
"                    time after transition before a "
"transition <br>"
"                    can be considered again.  Minimum "
"<br>                    transition time.<br>"
"            - Stacker Operation Timout ms<br>"
"                    time after transition before an error "
"is<br>                    thrown.  Maximum transition "
"time.<br>         * Note: Transitioning from Reset State to "
"Ejection State<br>"
"            must reset the Latch Cam Open bit or it is "
"assumed<br>            we missed the cycle and a Missed "
"Latch Cam Cycle <br>            error will be thrown at the "
"end.<br>         * Note: There is no way to detect the "
"trasition between            <br>            Ejection State "
"and Compression State, so we must <br>            also test "
"those states agains the Stacker Operation <br>            "
"State Set to determine the expected state."
#END

STR	C318
DUPBOOL
ANDE	D5	0
ANDE	D4	0
MATH	D5	"1"
MATH	D0	"1000"
MATH	D1	"1500"
RST	C355
POPBOOL
DUPBOOL
ANDE	D5	1
ANDE	D4	1
ANDE	D3	1
MATH	D5	"2"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	2
ANDE	D4	1
ANDE	D3	2
MATH	D5	"3"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
DUPBOOL
ANDE	D5	3
ANDE	D4	2
MATH	D5	"4"
MATH	D0	"1000"
MATH	D1	"1500"
POPBOOL
ANDE	D5	4
ANDE	D4	3
MATH	D5	"0"
MATH	D0	"2000"
MATH	D1	"3000"

// Rung stkr_CycleState#5
// Offset 200
#BEGIN FMT_COMMENT 
"    4. Set the new Cycle State"
#END

STRNE	D2	D5
CALL	Stkr_SetState	0x0	DST511	"3 D5 D3 1"	"3"
RST	C318

// Rung stkr_CycleState#6
// Offset 215
#BEGIN FMT_COMMENT 
"    5. Start lockout time for transition<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection.<br>"
"        * Transitioning is not allowed while lockout<br>"
"           timer is powered and != Done."
#END

STR	C317
STRNE	D2	D5
TMRA	T100	D0

// Rung stkr_CycleState#7
// Offset 222
#BEGIN FMT_COMMENT 
"##############################################################<br>"
" <br>#########################################<br>"
"##  Error Trapping ###########################<br>"
"#########################################<br> <br>    6. "
"Test for timeout on state transition<br>"
"        * If the machine takes too long between transitions "
"it is <br>          considered in a broken state.<br>"
"        * Begin Timers bit prevents the timer<br>"
"           from running before the machine starts<br>"
"           it is triggered by the first Latch Cam Cycle<br>"
"           detection."
#END

STR	C317
STRNE	D2	D5
TMRA	T101	D1

// Rung stkr_CycleState#8
// Offset 229
STR	C317
AND	T101.Done
SET	C376

// Rung stkr_CycleState#9
// Offset 232
#BEGIN FMT_COMMENT 
" <br>    7. Test for mised Latch Cam Cycle.<br>"
"        * If the Latch Cam Cycle Open bit is still set<br>"
"          that means the latch came cycle was not<br>"
"          handled (our cycle was too slow)"
#END

STR	C355
SET	C377
RST	C355

// Rung stkr_CycleState#10
// Offset 235
#BEGIN FMT_COMMENT 
" "
#END

STR	ST1
MATH	D2	"D5"

// End of Code Block stkr_CycleState
$TSKEND	stkr_CycleState

// Beginning of Code Block stkr_BufferY
$TSK	stkr_BufferY

// Rung stkr_BufferY#1
// Offset 0
STR	C311
ONDTMR	T12	0	Y12

// Rung stkr_BufferY#2
// Offset 4
STR	C312
ONDTMR	T13	0	Y11

// Rung stkr_BufferY#3
// Offset 8
STR	C313
ONDTMR	T14	0	Y10

// Rung stkr_BufferY#4
// Offset 12
STR	C314
ONDTMR	T15	250	Y9

// Rung stkr_BufferY#5
// Offset 16
STR	C315
ONDTMR	T16	0	Y5

// End of Code Block stkr_BufferY
$TSKEND	stkr_BufferY

// Beginning of Code Block TestNewStker
$PRGRM	TestNewStker

// Rung TestNewStker#1
// Offset 0
#BEGIN FMT_COMMENT 
""
"##################################################<br>"
"## Tests  ##########################################<br>"
"##################################################<br> "
"<br>##################################################<br> "
"<br>Initialize Variables<br>##################################################"
#END

STRPD	ST1
RSTR	C400	C449
RSTR	C600	C649
SET	C302

// Rung TestNewStker#2
// Offset 7
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Set Up Mocks<br>"
"#################################################<br> "
"<br>    Mock Stacker Start"
#END

STR	C408
ENTASK	mock_stkrStart	0x0	0	0x1
NOT
HALT	mock_stkrStart

// Rung TestNewStker#3
// Offset 14
STR	C301
RST	C408

// Rung TestNewStker#4
// Offset 16
#BEGIN FMT_COMMENT 
"    Mock Stacker Cycle"
#END

STR	C406
ENTASK	mock_stkrCycle	0x0	0	0x1
NOT
HALT	mock_stkrCycle

// Rung TestNewStker#5
// Offset 23
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Run Tests<br>"
"#################################################<br> "
"<br>    1. Mock Stacker Reset State"
#END

STRPD	ST1
ANDN	C600
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"

// Rung TestNewStker#6
// Offset 35
#BEGIN FMT_COMMENT 
"    2. Mock Turn on Stacker"
#END

STRPD	ST1
ANDN	C600
SET	C408

// Rung TestNewStker#7
// Offset 39
STR	C301
SET	C600

// Rung TestNewStker#8
// Offset 41
NOP

// Rung TestNewStker#9
// Offset 42
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Pre-Run Error<br>"
"#################################################<br> "
"<br>    2. Make sure Run State stopped and error was raised "
"before restarting<br>"
"        * Mock restart stacker already clears errors."
#END

STR	C600
ANDN	C601
ANDN	C301
AND	C303
SET	C408

// Rung TestNewStker#10
// Offset 47
#BEGIN FMT_COMMENT 
"    1. Mock Pre-run error<br>"
"        * make sure stacker is running for this test"
#END

STR	C600
ANDN	C601
ANDN	C409
AND	C301
RST	X1
SET	C409

// Rung TestNewStker#11
// Offset 53
#BEGIN FMT_COMMENT 
"     3. Confirm error cleared and stacker restarted"
#END

STR	C600
ANDN	C601
AND	X1
AND	C409
AND	C301
SET	C601
RST	C409

// Rung TestNewStker#12
// Offset 60
#BEGIN FMT_COMMENT 
"#################################################<br> <br>"
"Test Stacker Run-Time Error<br>"
"#################################################<br> "
"<br>    2. Clear error and attemp restart, which should "
"fail due<br>"
"         the stacker not being a Reset State.  Use a timer "
"to<br>         confirm the Mock Start Up had time to try "
"and start."
#END

STR	C601
ANDN	C602
AND	C409
RST	C377
ANDN	C377
SET	C408
TMR	T200	1000

// Rung TestNewStker#13
// Offset 68
#BEGIN FMT_COMMENT 
"    1. Set cycle state to something other than reset<br>"
"        so stacker error can't be cleared.  Then mock error."
#END

STR	C601
ANDN	C602
DUPBOOL
ANDPDPF
ANDNE	D50	3
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
ANDE	D50	3
SET	C377
SET	C409

// Rung TestNewStker#14
// Offset 92
#BEGIN FMT_COMMENT 
"    3. If the timer experied and the stacker still hasn't "
"started<br>        we can be confident it won't start in "
"when the cycle is<br>        not in a Reset State."
#END

STR	C601
ANDN	C602
AND	T200.Done
ANDN	C301
SET	C410

// Rung TestNewStker#15
// Offset 97
#BEGIN FMT_COMMENT 
"    5. Confirm the Stacker Cycle is now in a Reset State "
"and <br>        attempt to start again."
#END

STR	C601
ANDN	C602
AND	C410
ANDE	D50	0
SET	C408

// Rung TestNewStker#16
// Offset 105
#BEGIN FMT_COMMENT 
"    4. Mock setting the Cycle State to the Reset State.<br>"
"        Stop the Mock Restart from running."
#END

STR	C601
ANDN	C602
AND	C410
ANDNE	D50	0
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
RST	C408

// Rung TestNewStker#17
// Offset 122
#BEGIN FMT_COMMENT 
"    6. Confirm start was successful this time."
#END

STR	C601
ANDN	C602
ANDN	C377
AND	C410
AND	C301
SET	C602
RSTR	C409	C410

// Rung TestNewStker#18
// Offset 130
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Detect States Test<br>"
"#################################################<br> "
"<br>     1. Mock each Cycle State one by one."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	tst_mock_stkr	0x1	DST511	"3 1 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	tst_mock_stkr	0x1	DST511	"3 2 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
CALL	tst_mock_stkr	0x1	DST511	"3 4 D50 1"	"3"
POPBOOL
AND	C413
ANDN	C414
CALL	tst_mock_stkr	0x1	DST511	"3 5 D50 1"	"3"

// Rung TestNewStker#19
// Offset 207
#BEGIN FMT_COMMENT 
"    2. Test every scan to confirm the Cycle State was "
"changed to the <br>         next state."
#END

STR	C602
ANDN	C603
DUPBOOL
ANDN	C409
ANDE	D12	0
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
ANDE	D12	1
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDE	D12	1
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDE	D12	2
SET	C412
POPBOOL
DUPBOOL
AND	C412
ANDN	C413
ANDE	D12	3
SET	C413
POPBOOL
AND	C413
ANDN	C414
ANDE	D12	-1
SET	C414

// Rung TestNewStker#20
// Offset 260
#BEGIN FMT_COMMENT 
"    3. Detect the state so it can be tested next scan."
#END

STR	C602
ANDN	C603
CALL	Stkr_DetectState	0x1	DST511	"3"	"3 D4 D12 1"

// Rung TestNewStker#21
// Offset 271
#BEGIN FMT_COMMENT 
"    4. Confirm all states have been detected once."
#END

STR	C602
ANDN	C603
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
AND	C414
SET	C603
RSTR	C409	C414

// Rung TestNewStker#22
// Offset 282
NOP

// Rung TestNewStker#23
// Offset 283
NOP

// Rung TestNewStker#24
// Offset 284
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Set States Test<br>"
"#################################################<br> "
"<br>    1. Set each Cycle State one by one after each state "
"has been<br>        confirmed."
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
CALL	Stkr_SetState	0x0	DST511	"3 0 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
CALL	Stkr_SetState	0x0	DST511	"3 1 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
CALL	Stkr_SetState	0x0	DST511	"3 2 D3 1"	"3"
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
CALL	Stkr_SetState	0x0	DST511	"3 3 D3 1"	"3"
POPBOOL
AND	C412
ANDN	C413
CALL	Stkr_SetState	0x0	DST511	"3 4 D3 1"	"3"

// Rung TestNewStker#25
// Offset 353
#BEGIN FMT_COMMENT 
"    2. Test each cycle to see a state has been "
"successfully set"
#END

STR	C603
ANDN	C604
DUPBOOL
ANDN	C409
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C409
POPBOOL
DUPBOOL
AND	C409
ANDN	C410
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
SET	C410
POPBOOL
DUPBOOL
AND	C410
ANDN	C411
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
SET	C411
POPBOOL
DUPBOOL
AND	C411
ANDN	C412
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
SET	C412
POPBOOL
AND	C412
ANDN	C413
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
SET	C413

// Rung TestNewStker#26
// Offset 402
#BEGIN FMT_COMMENT 
"    3. Confirm all states have been set at least once."
#END

STR	C603
ANDN	C604
AND	C409
AND	C410
AND	C411
AND	C412
AND	C413
SET	C604
RSTR	C409	C413

// Rung TestNewStker#27
// Offset 412
#BEGIN FMT_COMMENT 
" ################################################# <br> "
"<br> <br> <br>"
" ################################################# <br>"
"Cycle State<br>"
"#################################################<br> <br> "
#END

NOP

// Rung TestNewStker#28
// Offset 413
#BEGIN FMT_COMMENT 
"    2. Delay starting the Cycle Mock to test that the "
"Cycle Task<br>"
"        can run without the machine on.  In production the "
"Task<br>        will always turn on before the machine and "
"will wait for the first <br>        Latch Cam Cycle to "
"trigger its logic."
#END

STR	C604
ANDN	C605
ANDN	C302
TMR	T201	2000
AND	T201.Done
SET	C406

// Rung TestNewStker#29
// Offset 420
#BEGIN FMT_COMMENT 
"    1. Turn on the stkr_CycleState state task for testing"
#END

STR	C604
ANDN	C605
AND	C302
RST	C302

// Rung TestNewStker#30
// Offset 424
STR	C604
ANDN	C605
MATH	D6	"(CT0.Acc == CT1.Acc) && (CT0.Acc == CT2.Acc) && (CT0.Acc == CT3.Acc) && (CT0.Acc == CT4.Acc)"

// Rung TestNewStker#31
// Offset 446
#BEGIN FMT_COMMENT 
" "
#END

STR	C604
ANDN	C605
AND	C301
ANDE	CT0.Acc	4
ANDE	D6	1
SET	C605
RST	C420
RST	C406

// End of Code Block TestNewStker
$PGMEND	TestNewStker

// Beginning of Code Block mock_stkrStart
$TSK	mock_stkrStart

// Rung mock_stkrStart#1
// Offset 0
STR	C407
RST	X8

// Rung mock_stkrStart#2
// Offset 2
#BEGIN FMT_COMMENT 
"Turn On Stacker"
#END

STRPD	ST1
SET	X1
RST	X33
RST	X2
SET	X8
OUT	C407
SET	X16

// End of Code Block mock_stkrStart
$TSKEND	mock_stkrStart

// Beginning of Code Block mock_stkrCycle
$TSK	mock_stkrCycle

// Rung mock_stkrCycle#1
// Offset 0
#BEGIN FMT_COMMENT 
"1. Initialize stacker Cycle State to the Reset State"
#END

STRPD	ST1
DUPBOOL
ANDNE	D4	0
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 0 D50 1"	"3"
POPBOOL
DUPBOOL
ANDNE	D3	0
ANDPDPF
CALL	Stkr_SetState	0x1	DST511	"3 0 D3 1"	"3"
POPBOOL
AND	ST1
MATH	D27	"6000"
RST	C427

// Rung mock_stkrCycle#2
// Offset 42
#BEGIN FMT_COMMENT 
"2. Mock the cam cycling"
#END

STR	ST1
FLASHER	100	D27	C420

// Rung mock_stkrCycle#3
// Offset 47
STR	ST1
DUPBOOL
AND	C420
SET	X17
POPBOOL
ANDN	C420
RST	X17

// Rung mock_stkrCycle#4
// Offset 54
#BEGIN FMT_COMMENT 
"3. Mock the input values for each Cycle State after the "
"<br>        outputs reach the corrosponding Cycle State."
#END

STR	ST1
DUPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 0 D50 1"	"3"
OUT	C421
POPBOOL
DUPBOOL
AND	Y12
AND	Y11
ANDN	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 1 D50 1"	"3"
OUT	C422
POPBOOL
DUPBOOL
ANDN	Y12
AND	Y11
AND	Y10
ANDN	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 2 D50 1"	"3"
OUT	C423
POPBOOL
DUPBOOL
ANDN	Y12
ANDN	Y11
AND	Y10
AND	Y9
ANDN	Y5
ANDPDPF
CALL	tst_mock_stkr	0x1	DST511	"3 3 D50 1"	"3"
OUT	C424
POPBOOL
AND	Y12
ANDN	Y11
ANDN	Y10
AND	Y9
AND	Y5
ANDPDPF
CALL	tst_mock_stkr	0x0	DST511	"3 4 D50 1"	"3"
OUT	C425

// Rung mock_stkrCycle#5
// Offset 147
#BEGIN FMT_COMMENT 
"    4. Count each new state set for testing.<br>"
"        <br>        * Count Reset State Set"
#END

STR	C421
STRPD	ST1
CNT	CT0	D20

// Rung mock_stkrCycle#6
// Offset 152
#BEGIN FMT_COMMENT 
"        * Count Ejection State Set"
#END

STR	C422
STRPD	ST1
CNT	CT1	D21

// Rung mock_stkrCycle#7
// Offset 157
#BEGIN FMT_COMMENT 
"        * Count Compression State Set"
#END

STR	C423
STRPD	ST1
CNT	CT2	D22

// Rung mock_stkrCycle#8
// Offset 162
#BEGIN FMT_COMMENT 
"        * Count Transition State Set"
#END

STR	C424
STRPD	ST1
CNT	CT3	D23

// Rung mock_stkrCycle#9
// Offset 167
#BEGIN FMT_COMMENT 
"        * Count Load State Set"
#END

STR	C425
STRPD	ST1
CNT	CT4	D24

// Rung mock_stkrCycle#10
// Offset 172
#BEGIN FMT_COMMENT 
"    5. Count each transition for testing."
#END

STR	C413
STRPD	ST1
CNT	CT5	D25

// Rung mock_stkrCycle#11
// Offset 177
#BEGIN FMT_COMMENT 
"    6. Random Transition Offset"
#END

STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
ANDGT	D0	0
ANDPDPF
MATH	D26	"(((D1 - 5) - D0) * RANDREAL()) + D0"
SET	C427

// Rung mock_stkrCycle#12
// Offset 202
STR	ST1
STR	C421
OR	C422
OR	C423
OR	C424
OR	C425
TMRA	T202	D26

// End of Code Block mock_stkrCycle
$TSKEND	mock_stkrCycle

#BEGIN ELEMENT_DOC
"X1","","","Air SW on Stacker"
"X2","","","Air Pressure OK"
"X8","","","Stacker Reset PB"
"X16","","","Machine Run Started"
"X17","","","Latch Cam Start Cycle"
"X18","","","Eject In"
"X19","","","Eject Out"
"X20","","","Transfer Operator Side"
"X21","","","Transfer Drive Side"
"X25","","","Operator Side Load In"
"X27","","","Operator Side Load Out"
"X29","","","Product Entering"
"X33","","","Guard Door SW"
"Y0","","","Stacker Jam Light"
"Y2","","","Timing Fault Light"
"Y4","","","Gradual Start Valve"
"Y5","","","Operator Side Load Sol"
"Y9","","","Transfer Sol"
"Y10","","","Compression Sol"
"Y11","","","Ejection Sol"
"Y12","","","Vertical Bar Sol"
"Y16","","","Full Air Valve"
"Y17","","","Machine Stop Interlock"
"Y65","","","Transfer Left Timing Fault"
"Y66","","","Transfer Right Timing Fault"
"Y67","","","Operator Side Load Out Timing Fault"
"Y68","","","Operator Side Load In Timing Fault"
"C0","","","All Faults OK"
"C1","","","Stacker Run OK"
"C2","","","Stacker Enable"
"C3","","","Jam Detect Enable"
"C4","","","Operator Side OS"
"C5","","","State Bit"
"C6","","","State Bit"
"C7","","","Any Timing Fault"
"C8","","","Alarm For Excess Time at Max Air Pressure"
"C9","","","Stacker Reset Press"
"C20","","","Operator Side Load Enable"
"C21","","","Operator Side Load Single Stack"
"C22","","","Operator Side Mode"
"C40","","","Single Stack Mode Constant"
"C41","","","No Interupt Stroke Mode Constant"
"C42","","","Operator Side Loading Mode Constant"
"C43","","","4 To 5/6 Stacker Adjust for Operator Load Constant"
"C44","","","4 To 5/6 Stacker Adjust For Operator Load"
"C45","","","Run Stacker Check Faults Task"
"C46","","","Run Stacker Start Up Task"
"C47","","","Run Stacker Cycle Task"
"C200","","","Run Stacker Program"
"C301","","","Stacker Run State"
"C302","","","Stacker Cycle Disconnect"
"C303","","","Stacker Pre Run Error State"
"C304","","","Stacker Run Time Error State"
"C305","","","Eject In Eye Buffer"
"C306","","","Eject Out Eye Buffer"
"C307","","","Transfer Drive Side Eye Buffer"
"C308","","","Transfer Operator Side Eye Buffer"
"C309","","","Load In Eye Buffer"
"C310","","","Load Out Eye Buffer"
"C311","","","Stacker Operation Vertical Bar SOL Buffered"
"C312","","","Stacker Operation Ejection SOL Buffered"
"C313","","","Stacker Operation Compression SOL Buffered"
"C314","","","Stacker Operation Transfer SOL Buffered"
"C315","","","Stacker Operation Load SOL Buffered"
"C316","","","Transition Variables Set"
"C317","","","Begin Timers"
"C318","","","Transition State"
"C319","","","Machine Run Started + Grace Period"
"C355","","","Latch Cycle Open"
"C376","","","Stacker Operation Transition State Timeout Error"
"C377","","","Stacker Operation Missed Cam Latch Cycle Error"
"C400","","","Mock Stacker Operation Pre-Run State"
"C401","","","Mock Stacker Operation Reset State"
"C402","","","Mock Stacker Operation Ejection State"
"C403","","","Mock Stacker Operation Compression State"
"C404","","","Mock Stacker Operation Transfer State"
"C405","","","Mock Stacker Operation Load State"
"C406","","","Mock Stacker Operation Cycle"
"C407","","","Mock Turn On Stacker"
"C408","","","Mock Restart Stacker"
"C600","","","Passed Stacker On Test"
"C601","","","Passed Stacker Pre- Run Error Test"
"C602","","","Passed Stacker Runtime Error Test"
"C603","","","Passed Stacker Detect State Test"
"C604","","","Passed Stacker Set State"
"C605","","","Passed Stacker Set State"
"D0","","","Stacker Operation Transition Lock Out ms"
"D1","","","Stacker Opertation Transition Time Out ms"
"D3","","","Stacker Operation State Set"
"D4","","","Stacker Operation Detected State"
"D5","","","Stacker Operation Next Cycle State"
"D50","","","Stacker Operation Mock State"
"T0","GracePeriodTMR","","Stacker Shutdown Grace Period Timer"
"T1","AirMaxPressTMR","","Alarm for Excess Time at Max Air Pressure"
"T2","OSTransferStrTMR","","Operator Side Transfer Stroke Timer"
"T3","DSTransferTMR","","Drive Side Transfer Stroke Timer"
"T4","OSLoadOutTMR","","Operator Side Load Out Timer"
"T5","OSLoadInTMR","","Operator Side Load In Timer"
"T20","StripperReturTMR","","Stripper Return Timer"
"T21","EjectInTMR","","Eject Arm In Timer"
"T22","CompressDwellTMR","","Compression Dwell Timer"
"T23","TransferEnablTMR","","Transfer Enable Timer"
"T24","TransferDwellTMR","","Operator Side Transfer Dwell Timer"
#END

